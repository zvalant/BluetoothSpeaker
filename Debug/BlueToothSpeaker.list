
BlueToothSpeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a14  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006cb4  08006cb4  00007cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d80  08006d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006d84  08006d84  00007d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  24000000  08006d88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ec  24000080  08006e08  00008080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400076c  08006e08  0000876c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000157b0  00000000  00000000  000080ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003192  00000000  00000000  0001d85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ed0  00000000  00000000  000209f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b3a  00000000  00000000  000218c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000380b4  00000000  00000000  000223fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016e51  00000000  00000000  0005a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a892  00000000  00000000  000712ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cbb91  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040e8  00000000  00000000  001cbbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001cfcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006c9c 	.word	0x08006c9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08006c9c 	.word	0x08006c9c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <MX_GPIO_Init+0xf4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <MX_GPIO_Init+0xf4>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a26      	ldr	r2, [pc, #152]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_GPIO_Init+0xf4>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000714:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_GPIO_Init+0xf8>)
 8000726:	f001 f81f 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 800072a:	f248 0360 	movw	r3, #32864	@ 0x8060
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480f      	ldr	r0, [pc, #60]	@ (800077c <MX_GPIO_Init+0xfc>)
 8000740:	f001 f812 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_GPIO_Init+0x100>)
 8000758:	f001 f806 	bl	8001768 <HAL_GPIO_Init>



/* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	2028      	movs	r0, #40	@ 0x28
 8000762:	f000 ff54 	bl	800160e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	@ 0x28
 8000768:	f000 ff6b 	bl	8001642 <HAL_NVIC_EnableIRQ>
/* USER CODE END 2 */
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58024400 	.word	0x58024400
 8000778:	58020800 	.word	0x58020800
 800077c:	58020000 	.word	0x58020000
 8000780:	58020400 	.word	0x58020400

08000784 <inputOutputPinAssignment>:

/*InputOutputPinAssignment: Will change target pin to either an input if the m18 task is complete
 * or an output to properly execute m18 task.
 *
 */
void inputOutputPinAssignment(PinConfig currentPin){
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	463b      	mov	r3, r7
 800078c:	e883 0003 	stmia.w	r3, {r0, r1}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
	bool m18Active = m18IsProcessActive();
 80007a0:	f000 f8be 	bl	8000920 <m18IsProcessActive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.Pin = currentPin.pin;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
	if (m18Active){
 80007b0:	7ffb      	ldrb	r3, [r7, #31]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <inputOutputPinAssignment+0x38>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e003      	b.n	80007c4 <inputOutputPinAssignment+0x40>

	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(currentPin.port, &GPIO_InitStruct);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	f107 0208 	add.w	r2, r7, #8
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ffcb 	bl	8001768 <HAL_GPIO_Init>
	if (!m18Active){
 80007d2:	7ffb      	ldrb	r3, [r7, #31]
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d006      	beq.n	80007ec <inputOutputPinAssignment+0x68>
		HAL_GPIO_WritePin(currentPin.port,currentPin.pin, GPIO_PIN_SET);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	b291      	uxth	r1, r2
 80007e4:	2201      	movs	r2, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f986 	bl	8001af8 <HAL_GPIO_WritePin>
	}
	HAL_Delay(10);
 80007ec:	200a      	movs	r0, #10
 80007ee:	f000 fe03 	bl	80013f8 <HAL_Delay>


}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <m18TaskTrigger>:
/*m18TaskTrigger: Changes the GPIO pin to an output then set pin to low to start the m18 function call process
and track the time of the trigger to be used to bring the pin high after a delay.
*
*/
void m18TaskTrigger(void){
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
	disableUserButton();
 8000800:	f000 fd16 	bl	8001230 <disableUserButton>
	PinConfig currentPin = m18GetActivePin();
 8000804:	463b      	mov	r3, r7
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f898 	bl	800093c <m18GetActivePin>
	inputOutputPinAssignment(currentPin);
 800080c:	463b      	mov	r3, r7
 800080e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000812:	f7ff ffb7 	bl	8000784 <inputOutputPinAssignment>
	m18SetInProcess(true);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f870 	bl	80008fc <m18SetInProcess>
	HAL_GPIO_WritePin(currentPin.port,currentPin.pin,GPIO_PIN_RESET);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	b291      	uxth	r1, r2
 8000822:	2200      	movs	r2, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f001 f967 	bl	8001af8 <HAL_GPIO_WritePin>
	m18SetStartTime();
 800082a:	f000 f84f 	bl	80008cc <m18SetStartTime>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <m18TaskCompletionCheck>:
/*m18TaskCompletionCheck: Called in a non idle state and will debounce if m18 task isnt in process.
 * After required delay the pin is set back to high ending m18 call and finish logic to complete m18 call process.
 *
 */
uint8_t m18TaskCompletionCheck(void){
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
	if (!m18IsProcessActive()){
 800083c:	f000 f870 	bl	8000920 <m18IsProcessActive>
 8000840:	4603      	mov	r3, r0
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <m18TaskCompletionCheck+0x1a>
		return M18_NO_TASK_IN_PROCESS;
 800084c:	2300      	movs	r3, #0
 800084e:	e021      	b.n	8000894 <m18TaskCompletionCheck+0x5e>

	}
	if (HAL_GetTick()>m18GetStartTime()+M18_DELAY_MS){
 8000850:	f000 fdc6 	bl	80013e0 <HAL_GetTick>
 8000854:	4604      	mov	r4, r0
 8000856:	f000 f845 	bl	80008e4 <m18GetStartTime>
 800085a:	4603      	mov	r3, r0
 800085c:	2232      	movs	r2, #50	@ 0x32
 800085e:	4413      	add	r3, r2
 8000860:	429c      	cmp	r4, r3
 8000862:	d916      	bls.n	8000892 <m18TaskCompletionCheck+0x5c>
		PinConfig currentPin = m18GetActivePin();
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f868 	bl	800093c <m18GetActivePin>
		HAL_GPIO_WritePin(currentPin.port, currentPin.pin,GPIO_PIN_SET);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	b291      	uxth	r1, r2
 8000872:	2201      	movs	r2, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f001 f93f 	bl	8001af8 <HAL_GPIO_WritePin>
		inputOutputPinAssignment(currentPin);
 800087a:	463b      	mov	r3, r7
 800087c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000880:	f7ff ff80 	bl	8000784 <inputOutputPinAssignment>
		m18SetInProcess(false);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f839 	bl	80008fc <m18SetInProcess>
		enableUserButton();
 800088a:	f000 fce2 	bl	8001252 <enableUserButton>

		return M18_TASK_COMPLETE;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <m18TaskCompletionCheck+0x5e>
	}
	 return M18_TASK_INCOMPLETE;
 8000892:	23ff      	movs	r3, #255	@ 0xff

}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <m18Call>:
/*
 * m18Call will either debounce if m18 process is active
 * or will start a m18 function call depending on passed state
 *
 */
uint8_t m18Call(inputState currentState){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	if (m18IsProcessActive()){
 80008a6:	f000 f83b 	bl	8000920 <m18IsProcessActive>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <m18Call+0x18>
		return M18_CALL_DENIED;
 80008b0:	23ff      	movs	r3, #255	@ 0xff
 80008b2:	e006      	b.n	80008c2 <m18Call+0x26>
	}
	m18SetActivePin(currentState);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f854 	bl	8000964 <m18SetActivePin>
	m18TaskTrigger();
 80008bc:	f7ff ff9d 	bl	80007fa <m18TaskTrigger>
	return M18_CALL_SUCCESS;
 80008c0:	2300      	movs	r3, #0

}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <m18SetStartTime>:
M18OperationState m18State = {0, false,(PinConfig){TRACK_OPTIONS_PORT, PAUSE_PLAY_PIN}};
M18OperationState* m18StatePtr = &m18State;



void m18SetStartTime(void){
 80008cc:	b598      	push	{r3, r4, r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	m18StatePtr->m18StartTime = HAL_GetTick();
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <m18SetStartTime+0x14>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	f000 fd84 	bl	80013e0 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	6023      	str	r3, [r4, #0]
}
 80008dc:	bf00      	nop
 80008de:	bd98      	pop	{r3, r4, r7, pc}
 80008e0:	24000010 	.word	0x24000010

080008e4 <m18GetStartTime>:

uint32_t m18GetStartTime(void){
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	return m18StatePtr->m18StartTime;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <m18GetStartTime+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	24000010 	.word	0x24000010

080008fc <m18SetInProcess>:

void m18SetInProcess(bool isActive){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	m18StatePtr->m18InProcess = isActive;
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <m18SetInProcess+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	711a      	strb	r2, [r3, #4]

}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	24000010 	.word	0x24000010

08000920 <m18IsProcessActive>:
bool m18IsProcessActive(void){
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	return m18StatePtr->m18InProcess;
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <m18IsProcessActive+0x18>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	b2db      	uxtb	r3, r3

}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	24000010 	.word	0x24000010

0800093c <m18GetActivePin>:

PinConfig m18GetActivePin(void){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	return m18StatePtr->activePin;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <m18GetActivePin+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	3308      	adds	r3, #8
 800094c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000950:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	24000010 	.word	0x24000010

08000964 <m18SetActivePin>:

void m18SetActivePin(inputState currentState){
 8000964:	b480      	push	{r7}
 8000966:	b08b      	sub	sp, #44	@ 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
		switch(currentState){
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	3b01      	subs	r3, #1
 8000972:	2b03      	cmp	r3, #3
 8000974:	d82e      	bhi.n	80009d4 <m18SetActivePin+0x70>
 8000976:	a201      	add	r2, pc, #4	@ (adr r2, 800097c <m18SetActivePin+0x18>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	0800098d 	.word	0x0800098d
 8000980:	0800099f 	.word	0x0800099f
 8000984:	080009b1 	.word	0x080009b1
 8000988:	080009c3 	.word	0x080009c3
			case STATE_PAUSE_PLAY:
				m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, PAUSE_PLAY_PIN};
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <m18SetActivePin+0x80>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a15      	ldr	r2, [pc, #84]	@ (80009e8 <m18SetActivePin+0x84>)
 8000992:	3308      	adds	r3, #8
 8000994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000998:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 800099c:	e01b      	b.n	80009d6 <m18SetActivePin+0x72>
			case STATE_PREV_TRACK:
				m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, PREV_TRACK_PIN};
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <m18SetActivePin+0x80>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <m18SetActivePin+0x88>)
 80009a4:	3308      	adds	r3, #8
 80009a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009aa:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80009ae:	e012      	b.n	80009d6 <m18SetActivePin+0x72>
			case STATE_NEXT_TRACK:
				m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, NEXT_TRACK_PIN};
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <m18SetActivePin+0x80>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <m18SetActivePin+0x8c>)
 80009b6:	3308      	adds	r3, #8
 80009b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009bc:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80009c0:	e009      	b.n	80009d6 <m18SetActivePin+0x72>
			case STATE_POWER_OFF_ON:
				m18StatePtr->activePin = (PinConfig){M18_POWER_PORT, M18_POWER_PIN};
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <m18SetActivePin+0x80>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <m18SetActivePin+0x90>)
 80009c8:	3308      	adds	r3, #8
 80009ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ce:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80009d2:	e000      	b.n	80009d6 <m18SetActivePin+0x72>
			default:
				break;
 80009d4:	bf00      	nop
		}
}
 80009d6:	bf00      	nop
 80009d8:	372c      	adds	r7, #44	@ 0x2c
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	24000010 	.word	0x24000010
 80009e8:	08006cb4 	.word	0x08006cb4
 80009ec:	08006cbc 	.word	0x08006cbc
 80009f0:	08006cc4 	.word	0x08006cc4
 80009f4:	08006ccc 	.word	0x08006ccc

080009f8 <stateUpdate>:

/*
 * stateUpdate: When current state is not idle state update will run m18 call
 * and check if there is a current m18 call that needs to be completed.
 */
void stateUpdate(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	uint8_t currentState = getSpeakerState();
 80009fe:	f000 f8ef 	bl	8000be0 <getSpeakerState>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	uint8_t callResponse = m18Call(currentState);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff47 	bl	800089c <m18Call>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71bb      	strb	r3, [r7, #6]
	if (callResponse!= SUCCESSFUL_RESPONSE){
	}
	uint8_t taskCompleteResponse = m18TaskCompletionCheck();
 8000a12:	f7ff ff10 	bl	8000836 <m18TaskCompletionCheck>
 8000a16:	4603      	mov	r3, r0
 8000a18:	717b      	strb	r3, [r7, #5]
	if (taskCompleteResponse==SUCCESSFUL_RESPONSE){
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d102      	bne.n	8000a28 <stateUpdate+0x30>
		updateSpeakerState(STATE_IDLE);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f8ca 	bl	8000bbc <updateSpeakerState>
	}

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a36:	f000 f88f 	bl	8000b58 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 fc4b 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f81f 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f7ff fe1d 	bl	8000680 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a46:	f000 fa8f 	bl	8000f68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a4a:	f000 fb43 	bl	80010d4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  const char startMsg[] = "mainStart\r\n";
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <main+0x48>)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart3, &startMsg, sizeof(startMsg)-1,1000);
 8000a58:	1d39      	adds	r1, r7, #4
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	220b      	movs	r2, #11
 8000a60:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <main+0x4c>)
 8000a62:	f004 f859 	bl	8004b18 <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (getSpeakerState()!= STATE_IDLE){
 8000a66:	f000 f8bb 	bl	8000be0 <getSpeakerState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0fa      	beq.n	8000a66 <main+0x36>
		  stateUpdate();
 8000a70:	f7ff ffc2 	bl	80009f8 <stateUpdate>
	if (getSpeakerState()!= STATE_IDLE){
 8000a74:	e7f7      	b.n	8000a66 <main+0x36>
 8000a76:	bf00      	nop
 8000a78:	08006cd4 	.word	0x08006cd4
 8000a7c:	240000a8 	.word	0x240000a8

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	@ 0x70
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8a:	224c      	movs	r2, #76	@ 0x4c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fc84 	bl	800639c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f005 fc7e 	bl	800639c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f001 f98d 	bl	8001dc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <SystemClock_Config+0xd0>)
 8000aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aae:	4a28      	ldr	r2, [pc, #160]	@ (8000b50 <SystemClock_Config+0xd0>)
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <SystemClock_Config+0xd0>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <SystemClock_Config+0xd4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac8:	4a22      	ldr	r2, [pc, #136]	@ (8000b54 <SystemClock_Config+0xd4>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <SystemClock_Config+0xd4>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <SystemClock_Config+0xd4>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000aec:	2322      	movs	r3, #34	@ 0x22
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	@ 0x40
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 f9a5 	bl	8001e54 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b10:	f000 f84e 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	233f      	movs	r3, #63	@ 0x3f
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b28:	2340      	movs	r3, #64	@ 0x40
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fde5 	bl	8002708 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b44:	f000 f834 	bl	8000bb0 <Error_Handler>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3770      	adds	r7, #112	@ 0x70
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58000400 	.word	0x58000400
 8000b54:	58024800 	.word	0x58024800

08000b58 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b6a:	f000 fd85 	bl	8001678 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b7e:	2387      	movs	r3, #135	@ 0x87
 8000b80:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b86:	2300      	movs	r3, #0
 8000b88:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fda3 	bl	80016e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f000 fd80 	bl	80016a8 <HAL_MPU_Enable>

}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <updateSpeakerState>:
#include "globals.h"

State activeState = { 0 };
State *activeStatePtr = &activeState;

void updateSpeakerState(uint8_t newState) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	activeStatePtr->currentState = newState;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <updateSpeakerState+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	701a      	strb	r2, [r3, #0]
	return;
 8000bce:	bf00      	nop

}
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	24000014 	.word	0x24000014

08000be0 <getSpeakerState>:
uint8_t getSpeakerState(void) {
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	return activeStatePtr->currentState;
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <getSpeakerState+0x18>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	24000014 	.word	0x24000014

08000bfc <updateLastPress>:

void updateLastPress(void) {
 8000bfc:	b598      	push	{r3, r4, r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	activeStatePtr->lastPress = HAL_GetTick();
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <updateLastPress+0x14>)
 8000c02:	681c      	ldr	r4, [r3, #0]
 8000c04:	f000 fbec 	bl	80013e0 <HAL_GetTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	6063      	str	r3, [r4, #4]

}
 8000c0c:	bf00      	nop
 8000c0e:	bd98      	pop	{r3, r4, r7, pc}
 8000c10:	24000014 	.word	0x24000014

08000c14 <getLastPress>:
uint32_t getLastPress(void) {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	return activeStatePtr->lastPress;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <getLastPress+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	24000014 	.word	0x24000014

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_MspInit+0x30>)
 8000c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c38:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_MspInit+0x30>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_MspInit+0x30>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58024400 	.word	0x58024400

08000c60 <updateState>:
/* USER CODE BEGIN PFP */
/*
 * updateState: will take duration tracked off user button becoming reset (button release) using overall press time to determine
 * what the current state should be.
 */
void updateState(uint32_t duration_ms){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if(duration_ms < PAUSE_PLAY_LIMIT_MS){
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <updateState+0x54>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d203      	bcs.n	8000c7c <updateState+0x1c>
		updateSpeakerState(STATE_PAUSE_PLAY);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ffa1 	bl	8000bbc <updateSpeakerState>
	}
	else{
		updateSpeakerState(STATE_POWER_OFF_ON);
	}

}
 8000c7a:	e016      	b.n	8000caa <updateState+0x4a>
	else if (duration_ms < PREV_TRACK_LIMIT_MS){
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <updateState+0x58>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d203      	bcs.n	8000c90 <updateState+0x30>
		updateSpeakerState(STATE_PREV_TRACK);
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f7ff ff97 	bl	8000bbc <updateSpeakerState>
}
 8000c8e:	e00c      	b.n	8000caa <updateState+0x4a>
	else if(duration_ms < NEXT_TRACK_LIMIT_MS){
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <updateState+0x5c>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d203      	bcs.n	8000ca4 <updateState+0x44>
		updateSpeakerState(STATE_NEXT_TRACK);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f7ff ff8d 	bl	8000bbc <updateSpeakerState>
}
 8000ca2:	e002      	b.n	8000caa <updateState+0x4a>
		updateSpeakerState(STATE_POWER_OFF_ON);
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f7ff ff89 	bl	8000bbc <updateSpeakerState>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000018 	.word	0x24000018
 8000cb8:	2400001a 	.word	0x2400001a
 8000cbc:	2400001c 	.word	0x2400001c

08000cc0 <HAL_GPIO_EXTI_Callback>:
/*
 * HAL_GPIO_EXTI_Callback: checks to see if the user button triggered interrupt and then will either store
 * the last time the button was pressed or calculate amount of time pressed and change the state accordingly.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b09b      	sub	sp, #108	@ 0x6c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	if (getSpeakerState() != STATE_IDLE){
 8000cca:	f7ff ff89 	bl	8000be0 <getSpeakerState>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d145      	bne.n	8000d60 <HAL_GPIO_EXTI_Callback+0xa0>
		return;

	}
	uint8_t msg[] = "Interrupt\r\n";
 8000cd4:	4a24      	ldr	r2, [pc, #144]	@ (8000d68 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000cd6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, &msg, strlen(msg),MAX_UART_DELAY);
 8000ce0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fafb 	bl	80002e0 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <HAL_GPIO_EXTI_Callback+0xac>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000cf6:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000cf8:	f003 ff0e 	bl	8004b18 <HAL_UART_Transmit>
	if (GPIO_Pin == USER_BUTTON_PIN){
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d02:	d12e      	bne.n	8000d62 <HAL_GPIO_EXTI_Callback+0xa2>
		if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_SET){
 8000d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d08:	481a      	ldr	r0, [pc, #104]	@ (8000d74 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000d0a:	f000 fedd 	bl	8001ac8 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d102      	bne.n	8000d1a <HAL_GPIO_EXTI_Callback+0x5a>
			updateLastPress();
 8000d14:	f7ff ff72 	bl	8000bfc <updateLastPress>
 8000d18:	e023      	b.n	8000d62 <HAL_GPIO_EXTI_Callback+0xa2>

		}else{
			char buff2[80];
			uint32_t duration_ms = HAL_GetTick()-getLastPress();
 8000d1a:	f000 fb61 	bl	80013e0 <HAL_GetTick>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	f7ff ff78 	bl	8000c14 <getLastPress>
 8000d24:	4603      	mov	r3, r0
 8000d26:	1ae3      	subs	r3, r4, r3
 8000d28:	667b      	str	r3, [r7, #100]	@ 0x64
			updateState(duration_ms);
 8000d2a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000d2c:	f7ff ff98 	bl	8000c60 <updateState>
			sprintf(buff2, "Duration: %d ms State: %d \r\n",duration_ms, getSpeakerState());
 8000d30:	f7ff ff56 	bl	8000be0 <getSpeakerState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f107 0008 	add.w	r0, r7, #8
 8000d3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d3c:	490e      	ldr	r1, [pc, #56]	@ (8000d78 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000d3e:	f005 fb0d 	bl	800635c <siprintf>
			HAL_UART_Transmit(&huart3, buff2, strlen(buff2), MAX_UART_DELAY);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff faca 	bl	80002e0 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_GPIO_EXTI_Callback+0xac>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	f107 0108 	add.w	r1, r7, #8
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000d5a:	f003 fedd 	bl	8004b18 <HAL_UART_Transmit>
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_EXTI_Callback+0xa2>
		return;
 8000d60:	bf00      	nop
		}
	}

}
 8000d62:	376c      	adds	r7, #108	@ 0x6c
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	08006d00 	.word	0x08006d00
 8000d6c:	2400001e 	.word	0x2400001e
 8000d70:	240000a8 	.word	0x240000a8
 8000d74:	58020800 	.word	0x58020800
 8000d78:	08006ce0 	.word	0x08006ce0

08000d7c <EXTI15_10_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Calls HAL EXTI handler for PC13
void EXTI15_10_IRQHandler(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d84:	f000 fed1 	bl	8001b2a <HAL_GPIO_EXTI_IRQHandler>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 fae9 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
		errno = ENOMEM;
 8000e1c:	f005 fac6 	bl	80063ac <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24080000 	.word	0x24080000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	240000a4 	.word	0x240000a4
 8000e54:	24000770 	.word	0x24000770

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <SystemInit+0xe4>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a36      	ldr	r2, [pc, #216]	@ (8000f3c <SystemInit+0xe4>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6c:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <SystemInit+0xe8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d807      	bhi.n	8000e88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <SystemInit+0xe8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <SystemInit+0xe8>)
 8000e82:	f043 0307 	orr.w	r3, r3, #7
 8000e86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <SystemInit+0xec>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f44 <SystemInit+0xec>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <SystemInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <SystemInit+0xec>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4929      	ldr	r1, [pc, #164]	@ (8000f44 <SystemInit+0xec>)
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <SystemInit+0xf0>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <SystemInit+0xe8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <SystemInit+0xe8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <SystemInit+0xe8>)
 8000ebc:	f043 0307 	orr.w	r3, r3, #7
 8000ec0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <SystemInit+0xec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <SystemInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <SystemInit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <SystemInit+0xec>)
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <SystemInit+0xf4>)
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <SystemInit+0xec>)
 8000edc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <SystemInit+0xf8>)
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <SystemInit+0xec>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <SystemInit+0xfc>)
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <SystemInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <SystemInit+0xec>)
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <SystemInit+0xfc>)
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <SystemInit+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <SystemInit+0xec>)
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <SystemInit+0xfc>)
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <SystemInit+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <SystemInit+0xec>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <SystemInit+0xec>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <SystemInit+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <SystemInit+0x100>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <SystemInit+0x104>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f22:	d202      	bcs.n	8000f2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SystemInit+0x108>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <SystemInit+0x10c>)
 8000f2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	52002000 	.word	0x52002000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f4c:	02020200 	.word	0x02020200
 8000f50:	01ff0000 	.word	0x01ff0000
 8000f54:	01010280 	.word	0x01010280
 8000f58:	5c001000 	.word	0x5c001000
 8000f5c:	ffff0000 	.word	0xffff0000
 8000f60:	51008108 	.word	0x51008108
 8000f64:	52004000 	.word	0x52004000

08000f68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <MX_USART3_UART_Init+0x94>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb0:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f003 fd61 	bl	8004a78 <HAL_UART_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fbc:	f7ff fdf8 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fc4:	f004 fdf7 	bl	8005bb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fce:	f7ff fdef 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fd6:	f004 fe2c 	bl	8005c32 <HAL_UARTEx_SetRxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f7ff fde6 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_USART3_UART_Init+0x90>)
 8000fe6:	f004 fdad 	bl	8005b44 <HAL_UARTEx_DisableFifoMode>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f7ff fdde 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	240000a8 	.word	0x240000a8
 8000ffc:	40004800 	.word	0x40004800

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ba      	sub	sp, #232	@ 0xe8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	22c0      	movs	r2, #192	@ 0xc0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f005 f9bb 	bl	800639c <memset>
  if(uartHandle->Instance==USART3)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_UART_MspInit+0xc8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d146      	bne.n	80010be <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001030:	f04f 0202 	mov.w	r2, #2
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4618      	mov	r0, r3
 8001048:	f001 feea 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001052:	f7ff fdad 	bl	8000bb0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <HAL_UART_MspInit+0xcc>)
 8001058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105c:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <HAL_UART_MspInit+0xcc>)
 800105e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001062:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_UART_MspInit+0xcc>)
 8001068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800106c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_UART_MspInit+0xcc>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_UART_MspInit+0xcc>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <HAL_UART_MspInit+0xcc>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001092:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ac:	2307      	movs	r3, #7
 80010ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <HAL_UART_MspInit+0xd0>)
 80010ba:	f000 fb55 	bl	8001768 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	37e8      	adds	r7, #232	@ 0xe8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40004800 	.word	0x40004800
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020c00 	.word	0x58020c00

080010d4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80010dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001104:	2200      	movs	r2, #0
 8001106:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800110a:	2201      	movs	r2, #1
 800110c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001110:	2201      	movs	r2, #1
 8001112:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001116:	2200      	movs	r2, #0
 8001118:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800111c:	f000 fd1f 	bl	8001b5e <HAL_PCD_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001126:	f7ff fd43 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2400013c 	.word	0x2400013c
 8001134:	40080000 	.word	0x40080000

08001138 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ba      	sub	sp, #232	@ 0xe8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	22c0      	movs	r2, #192	@ 0xc0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f005 f91f 	bl	800639c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a30      	ldr	r2, [pc, #192]	@ (8001224 <HAL_PCD_MspInit+0xec>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d159      	bne.n	800121c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001168:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001174:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fe4d 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800118c:	f7ff fd10 	bl	8000bb0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001190:	f000 fe50 	bl	8001e34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <HAL_PCD_MspInit+0xf0>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <HAL_PCD_MspInit+0xf0>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <HAL_PCD_MspInit+0xf0>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011b2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80011b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011cc:	230a      	movs	r3, #10
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4814      	ldr	r0, [pc, #80]	@ (800122c <HAL_PCD_MspInit+0xf4>)
 80011da:	f000 fac5 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <HAL_PCD_MspInit+0xf4>)
 80011fa:	f000 fab5 	bl	8001768 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_PCD_MspInit+0xf0>)
 8001200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001204:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_PCD_MspInit+0xf0>)
 8001206:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800120a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_PCD_MspInit+0xf0>)
 8001210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	37e8      	adds	r7, #232	@ 0xe8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40080000 	.word	0x40080000
 8001228:	58024400 	.word	0x58024400
 800122c:	58020000 	.word	0x58020000

08001230 <disableUserButton>:


/*disableUserButton: Will mask interrupts for the user button to prevent unwanted
 * interrupts during active calls to receiver.
 */
void disableUserButton(void){
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	EXTI->IMR1 &= ~EXTI_IMR1_IM13;
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800123c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001240:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <enableUserButton>:
/*enableUserButton: Will clear bit to prevent stale interrupts from triggering
 * and will enable interrupts on user button again.
 *
 */
void enableUserButton(void){
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
	EXTI->PR1 = EXTI_PR1_PR13;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	EXTI->IMR1 |= EXTI_IMR1_IM13;
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800126e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001272:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001284:	f7ff fde8 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	@ (80012cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f005 f883 	bl	80063b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fbbd 	bl	8000a30 <main>
  bx  lr
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012c0:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80012c4:	08006d88 	.word	0x08006d88
  ldr r2, =_sbss
 80012c8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80012cc:	2400076c 	.word	0x2400076c

080012d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC3_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f98c 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012e0:	f001 fbc8 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_Init+0x68>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	4913      	ldr	r1, [pc, #76]	@ (8001340 <HAL_Init+0x6c>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_Init+0x68>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_Init+0x6c>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <HAL_Init+0x70>)
 8001316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <HAL_Init+0x74>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	200f      	movs	r0, #15
 8001320:	f000 f814 	bl	800134c <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e002      	b.n	8001334 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800132e:	f7ff fc7d 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58024400 	.word	0x58024400
 8001340:	08006d0c 	.word	0x08006d0c
 8001344:	24000024 	.word	0x24000024
 8001348:	24000020 	.word	0x24000020

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e021      	b.n	80013a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_InitTick+0x64>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_InitTick+0x60>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f971 	bl	800165e <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f93b 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <HAL_InitTick+0x68>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2400002c 	.word	0x2400002c
 80013b0:	24000020 	.word	0x24000020
 80013b4:	24000028 	.word	0x24000028

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2400002c 	.word	0x2400002c
 80013dc:	24000620 	.word	0x24000620

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	24000620 	.word	0x24000620

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2400002c 	.word	0x2400002c

08001440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetREVID+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0c1b      	lsrs	r3, r3, #16
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	5c001000 	.word	0x5c001000

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <__NVIC_SetPriorityGrouping+0x40>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	4313      	orrs	r3, r2
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <__NVIC_SetPriorityGrouping+0x40>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	05fa0000 	.word	0x05fa0000

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	@ (80014f4 <__NVIC_EnableIRQ+0x38>)
 80014d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	@ (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	@ (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff8e 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff29 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff40 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff33 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa4 	bl	80015b4 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800167c:	f3bf 8f5f 	dmb	sy
}
 8001680:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <HAL_MPU_Disable+0x28>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_MPU_Disable+0x28>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_MPU_Disable+0x2c>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	e000ed90 	.word	0xe000ed90

080016a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016b0:	4a0b      	ldr	r2, [pc, #44]	@ (80016e0 <HAL_MPU_Enable+0x38>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_MPU_Enable+0x3c>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <HAL_MPU_Enable+0x3c>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016c6:	f3bf 8f4f 	dsb	sy
}
 80016ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016cc:	f3bf 8f6f 	isb	sy
}
 80016d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed90 	.word	0xe000ed90
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	785a      	ldrb	r2, [r3, #1]
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_MPU_ConfigRegion+0x7c>)
 80016f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_MPU_ConfigRegion+0x7c>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <HAL_MPU_ConfigRegion+0x7c>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001704:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <HAL_MPU_ConfigRegion+0x7c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7b1b      	ldrb	r3, [r3, #12]
 8001710:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7adb      	ldrb	r3, [r3, #11]
 8001716:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7a9b      	ldrb	r3, [r3, #10]
 800171e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7b5b      	ldrb	r3, [r3, #13]
 8001726:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7b9b      	ldrb	r3, [r3, #14]
 800172e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7bdb      	ldrb	r3, [r3, #15]
 8001736:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7a5b      	ldrb	r3, [r3, #9]
 800173e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7a1b      	ldrb	r3, [r3, #8]
 8001746:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001748:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001752:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001754:	6113      	str	r3, [r2, #16]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed90 	.word	0xe000ed90

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001776:	4b89      	ldr	r3, [pc, #548]	@ (800199c <HAL_GPIO_Init+0x234>)
 8001778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800177a:	e194      	b.n	8001aa6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8186 	beq.w	8001aa0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d005      	beq.n	80017ac <HAL_GPIO_Init+0x44>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d130      	bne.n	800180e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017e2:	2201      	movs	r2, #1
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f003 0201 	and.w	r2, r3, #1
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b03      	cmp	r3, #3
 8001818:	d017      	beq.n	800184a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d123      	bne.n	800189e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	69b9      	ldr	r1, [r7, #24]
 800189a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0203 	and.w	r2, r3, #3
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80e0 	beq.w	8001aa0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e0:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <HAL_GPIO_Init+0x238>)
 80018e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018e6:	4a2e      	ldr	r2, [pc, #184]	@ (80019a0 <HAL_GPIO_Init+0x238>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018f0:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <HAL_GPIO_Init+0x238>)
 80018f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <HAL_GPIO_Init+0x23c>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <HAL_GPIO_Init+0x240>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d052      	beq.n	80019d0 <HAL_GPIO_Init+0x268>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a1f      	ldr	r2, [pc, #124]	@ (80019ac <HAL_GPIO_Init+0x244>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d031      	beq.n	8001996 <HAL_GPIO_Init+0x22e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <HAL_GPIO_Init+0x248>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d02b      	beq.n	8001992 <HAL_GPIO_Init+0x22a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a1d      	ldr	r2, [pc, #116]	@ (80019b4 <HAL_GPIO_Init+0x24c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d025      	beq.n	800198e <HAL_GPIO_Init+0x226>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <HAL_GPIO_Init+0x250>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01f      	beq.n	800198a <HAL_GPIO_Init+0x222>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <HAL_GPIO_Init+0x254>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x21e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a1a      	ldr	r2, [pc, #104]	@ (80019c0 <HAL_GPIO_Init+0x258>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x21a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <HAL_GPIO_Init+0x25c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x216>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a18      	ldr	r2, [pc, #96]	@ (80019c8 <HAL_GPIO_Init+0x260>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x212>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a17      	ldr	r2, [pc, #92]	@ (80019cc <HAL_GPIO_Init+0x264>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x20e>
 8001972:	2309      	movs	r3, #9
 8001974:	e02d      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 8001976:	230a      	movs	r3, #10
 8001978:	e02b      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 800197a:	2308      	movs	r3, #8
 800197c:	e029      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 800197e:	2307      	movs	r3, #7
 8001980:	e027      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 8001982:	2306      	movs	r3, #6
 8001984:	e025      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 8001986:	2305      	movs	r3, #5
 8001988:	e023      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 800198a:	2304      	movs	r3, #4
 800198c:	e021      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 800198e:	2303      	movs	r3, #3
 8001990:	e01f      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 8001992:	2302      	movs	r3, #2
 8001994:	e01d      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 8001996:	2301      	movs	r3, #1
 8001998:	e01b      	b.n	80019d2 <HAL_GPIO_Init+0x26a>
 800199a:	bf00      	nop
 800199c:	58000080 	.word	0x58000080
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58000400 	.word	0x58000400
 80019a8:	58020000 	.word	0x58020000
 80019ac:	58020400 	.word	0x58020400
 80019b0:	58020800 	.word	0x58020800
 80019b4:	58020c00 	.word	0x58020c00
 80019b8:	58021000 	.word	0x58021000
 80019bc:	58021400 	.word	0x58021400
 80019c0:	58021800 	.word	0x58021800
 80019c4:	58021c00 	.word	0x58021c00
 80019c8:	58022000 	.word	0x58022000
 80019cc:	58022400 	.word	0x58022400
 80019d0:	2300      	movs	r3, #0
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e2:	4938      	ldr	r1, [pc, #224]	@ (8001ac4 <HAL_GPIO_Init+0x35c>)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f ae63 	bne.w	800177c <HAL_GPIO_Init+0x14>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3724      	adds	r7, #36	@ 0x24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	58000400 	.word	0x58000400

08001ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	619a      	str	r2, [r3, #24]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f8b5 	bl	8000cc0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af02      	add	r7, sp, #8
 8001b64:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0fe      	b.n	8001d6e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fad7 	bl	8001138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 f94a 	bl	8005e30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7c1a      	ldrb	r2, [r3, #16]
 8001ba4:	f88d 2000 	strb.w	r2, [sp]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bac:	f004 f8ce 	bl	8005d4c <USB_CoreInit>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0d5      	b.n	8001d6e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 f942 	bl	8005e52 <USB_SetCurrentMode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0c6      	b.n	8001d6e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e04a      	b.n	8001c7c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3315      	adds	r3, #21
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3314      	adds	r3, #20
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	b298      	uxth	r0, r3
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	332e      	adds	r3, #46	@ 0x2e
 8001c22:	4602      	mov	r2, r0
 8001c24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3318      	adds	r3, #24
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	331c      	adds	r3, #28
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3320      	adds	r3, #32
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3324      	adds	r3, #36	@ 0x24
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3af      	bcc.n	8001be6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e044      	b.n	8001d16 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3301      	adds	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3b5      	bcc.n	8001c8c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7c1a      	ldrb	r2, [r3, #16]
 8001d28:	f88d 2000 	strb.w	r2, [sp]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d30:	f004 f8dc 	bl	8005eec <USB_DevInit>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e013      	b.n	8001d6e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7b1b      	ldrb	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f80b 	bl	8001d78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fa97 	bl	800629a <USB_DevDisconnect>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_PCDEx_ActivateLPM+0x44>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	10000003 	.word	0x10000003

08001dc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_PWREx_ConfigSupply+0x70>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00a      	beq.n	8001dea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_PWREx_ConfigSupply+0x70>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e01f      	b.n	8001e26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e01d      	b.n	8001e26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_PWREx_ConfigSupply+0x70>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	490f      	ldr	r1, [pc, #60]	@ (8001e30 <HAL_PWREx_ConfigSupply+0x70>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001dfa:	f7ff faf1 	bl	80013e0 <HAL_GetTick>
 8001dfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e00:	e009      	b.n	8001e16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e02:	f7ff faed 	bl	80013e0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e10:	d901      	bls.n	8001e16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e007      	b.n	8001e26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_PWREx_ConfigSupply+0x70>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e22:	d1ee      	bne.n	8001e02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58024800 	.word	0x58024800

08001e34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	58024800 	.word	0x58024800

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f000 bc48 	b.w	80026f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8088 	beq.w	8001f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4b99      	ldr	r3, [pc, #612]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e80:	4b96      	ldr	r3, [pc, #600]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d007      	beq.n	8001e9c <HAL_RCC_OscConfig+0x48>
 8001e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8e:	2b18      	cmp	r3, #24
 8001e90:	d111      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62>
 8001e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d06d      	beq.n	8001f84 <HAL_RCC_OscConfig+0x130>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d169      	bne.n	8001f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f000 bc21 	b.w	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x7a>
 8001ec0:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a85      	ldr	r2, [pc, #532]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x9c>
 8001ed6:	4b81      	ldr	r3, [pc, #516]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a80      	ldr	r2, [pc, #512]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b7e      	ldr	r3, [pc, #504]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001efa:	4b78      	ldr	r3, [pc, #480]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a74      	ldr	r2, [pc, #464]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd8>
 8001f14:	4b71      	ldr	r3, [pc, #452]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a70      	ldr	r2, [pc, #448]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6d      	ldr	r2, [pc, #436]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff fa54 	bl	80013e0 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fa50 	bl	80013e0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e3d4      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fa40 	bl	80013e0 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fa3c 	bl	80013e0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e3c0      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f76:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x110>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80ca 	beq.w	8002128 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f94:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_RCC_OscConfig+0x166>
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	2b18      	cmp	r3, #24
 8001fae:	d156      	bne.n	800205e <HAL_RCC_OscConfig+0x20a>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d151      	bne.n	800205e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fba:	4b48      	ldr	r3, [pc, #288]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e392      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fd2:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0219 	bic.w	r2, r3, #25
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	493f      	ldr	r1, [pc, #252]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f9fc 	bl	80013e0 <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7ff f9f8 	bl	80013e0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e37c      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ffe:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	f7ff fa19 	bl	8001440 <HAL_GetREVID>
 800200e:	4603      	mov	r3, r0
 8002010:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002014:	4293      	cmp	r3, r2
 8002016:	d817      	bhi.n	8002048 <HAL_RCC_OscConfig+0x1f4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b40      	cmp	r3, #64	@ 0x40
 800201e:	d108      	bne.n	8002032 <HAL_RCC_OscConfig+0x1de>
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002028:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002030:	e07a      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	031b      	lsls	r3, r3, #12
 8002040:	4926      	ldr	r1, [pc, #152]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002046:	e06f      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	4921      	ldr	r1, [pc, #132]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205c:	e064      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d047      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002066:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0219 	bic.w	r2, r3, #25
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	491a      	ldr	r1, [pc, #104]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f9b2 	bl	80013e0 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff f9ae 	bl	80013e0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e332      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	f7ff f9cf 	bl	8001440 <HAL_GetREVID>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d819      	bhi.n	80020e0 <HAL_RCC_OscConfig+0x28c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b40      	cmp	r3, #64	@ 0x40
 80020b2:	d108      	bne.n	80020c6 <HAL_RCC_OscConfig+0x272>
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c2:	6053      	str	r3, [r2, #4]
 80020c4:	e030      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	031b      	lsls	r3, r3, #12
 80020d4:	4901      	ldr	r1, [pc, #4]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
 80020da:	e025      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
 80020dc:	58024400 	.word	0x58024400
 80020e0:	4b9a      	ldr	r3, [pc, #616]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	4997      	ldr	r1, [pc, #604]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e018      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b95      	ldr	r3, [pc, #596]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a94      	ldr	r2, [pc, #592]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f96d 	bl	80013e0 <HAL_GetTick>
 8002106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff f969 	bl	80013e0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2ed      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800211c:	4b8b      	ldr	r3, [pc, #556]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a9 	beq.w	8002288 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002136:	4b85      	ldr	r3, [pc, #532]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002140:	4b82      	ldr	r3, [pc, #520]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d007      	beq.n	800215c <HAL_RCC_OscConfig+0x308>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b18      	cmp	r3, #24
 8002150:	d13a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x374>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d135      	bne.n	80021c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800215c:	4b7b      	ldr	r3, [pc, #492]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_OscConfig+0x320>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b80      	cmp	r3, #128	@ 0x80
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e2c1      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002174:	f7ff f964 	bl	8001440 <HAL_GetREVID>
 8002178:	4603      	mov	r3, r0
 800217a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800217e:	4293      	cmp	r3, r2
 8002180:	d817      	bhi.n	80021b2 <HAL_RCC_OscConfig+0x35e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2b20      	cmp	r3, #32
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x348>
 800218a:	4b70      	ldr	r3, [pc, #448]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002192:	4a6e      	ldr	r2, [pc, #440]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002198:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800219a:	e075      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800219c:	4b6b      	ldr	r3, [pc, #428]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	4968      	ldr	r1, [pc, #416]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021b0:	e06a      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021b2:	4b66      	ldr	r3, [pc, #408]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	4962      	ldr	r1, [pc, #392]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021c6:	e05f      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d042      	beq.n	8002256 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021d0:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f900 	bl	80013e0 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021e4:	f7ff f8fc 	bl	80013e0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e280      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f6:	4b55      	ldr	r3, [pc, #340]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002202:	f7ff f91d 	bl	8001440 <HAL_GetREVID>
 8002206:	4603      	mov	r3, r0
 8002208:	f241 0203 	movw	r2, #4099	@ 0x1003
 800220c:	4293      	cmp	r3, r2
 800220e:	d817      	bhi.n	8002240 <HAL_RCC_OscConfig+0x3ec>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	2b20      	cmp	r3, #32
 8002216:	d108      	bne.n	800222a <HAL_RCC_OscConfig+0x3d6>
 8002218:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002220:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002222:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002226:	6053      	str	r3, [r2, #4]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
 800222a:	4b48      	ldr	r3, [pc, #288]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	4944      	ldr	r1, [pc, #272]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
 800223e:	e023      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
 8002240:	4b42      	ldr	r3, [pc, #264]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	493f      	ldr	r1, [pc, #252]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a3c      	ldr	r2, [pc, #240]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800225c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff f8bd 	bl	80013e0 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800226a:	f7ff f8b9 	bl	80013e0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e23d      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800227c:	4b33      	ldr	r3, [pc, #204]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d036      	beq.n	8002302 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a0:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7ff f89a 	bl	80013e0 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7ff f896 	bl	80013e0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e21a      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x45c>
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d4:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff f880 	bl	80013e0 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff f87c 	bl	80013e0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e200      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d039      	beq.n	8002382 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01c      	beq.n	8002350 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002322:	f7ff f85d 	bl	80013e0 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800232a:	f7ff f859 	bl	80013e0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1dd      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x4d6>
 8002348:	e01b      	b.n	8002382 <HAL_RCC_OscConfig+0x52e>
 800234a:	bf00      	nop
 800234c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002350:	4b9b      	ldr	r3, [pc, #620]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a9a      	ldr	r2, [pc, #616]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800235a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800235c:	f7ff f840 	bl	80013e0 <HAL_GetTick>
 8002360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002364:	f7ff f83c 	bl	80013e0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1c0      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002376:	4b92      	ldr	r3, [pc, #584]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8081 	beq.w	8002492 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002390:	4b8c      	ldr	r3, [pc, #560]	@ (80025c4 <HAL_RCC_OscConfig+0x770>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a8b      	ldr	r2, [pc, #556]	@ (80025c4 <HAL_RCC_OscConfig+0x770>)
 8002396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800239c:	f7ff f820 	bl	80013e0 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7ff f81c 	bl	80013e0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1a0      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b6:	4b83      	ldr	r3, [pc, #524]	@ (80025c4 <HAL_RCC_OscConfig+0x770>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x584>
 80023ca:	4b7d      	ldr	r3, [pc, #500]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	4a7c      	ldr	r2, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d6:	e02d      	b.n	8002434 <HAL_RCC_OscConfig+0x5e0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x5a6>
 80023e0:	4b77      	ldr	r3, [pc, #476]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	4a76      	ldr	r2, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ec:	4b74      	ldr	r3, [pc, #464]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f0:	4a73      	ldr	r2, [pc, #460]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	f023 0304 	bic.w	r3, r3, #4
 80023f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f8:	e01c      	b.n	8002434 <HAL_RCC_OscConfig+0x5e0>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x5c8>
 8002402:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002406:	4a6e      	ldr	r2, [pc, #440]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6713      	str	r3, [r2, #112]	@ 0x70
 800240e:	4b6c      	ldr	r3, [pc, #432]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	4a6b      	ldr	r2, [pc, #428]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	@ 0x70
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x5e0>
 800241c:	4b68      	ldr	r3, [pc, #416]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a67      	ldr	r2, [pc, #412]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	4b65      	ldr	r3, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a64      	ldr	r2, [pc, #400]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800242e:	f023 0304 	bic.w	r3, r3, #4
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe ffd0 	bl	80013e0 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe ffcc 	bl	80013e0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e14e      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800245a:	4b59      	ldr	r3, [pc, #356]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ee      	beq.n	8002444 <HAL_RCC_OscConfig+0x5f0>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe ffba 	bl	80013e0 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe ffb6 	bl	80013e0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e138      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002486:	4b4e      	ldr	r3, [pc, #312]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ee      	bne.n	8002470 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 812d 	beq.w	80026f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800249c:	4b48      	ldr	r3, [pc, #288]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a4:	2b18      	cmp	r3, #24
 80024a6:	f000 80bd 	beq.w	8002624 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	f040 809e 	bne.w	80025f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a41      	ldr	r2, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe ff8e 	bl	80013e0 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe ff8a 	bl	80013e0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e10e      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024da:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e6:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ea:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <HAL_RCC_OscConfig+0x774>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	4931      	ldr	r1, [pc, #196]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	3b01      	subs	r3, #1
 8002506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	3b01      	subs	r3, #1
 8002510:	025b      	lsls	r3, r3, #9
 8002512:	b29b      	uxth	r3, r3
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	3b01      	subs	r3, #1
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002530:	4923      	ldr	r1, [pc, #140]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002542:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002546:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_RCC_OscConfig+0x778>)
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800254e:	00d2      	lsls	r2, r2, #3
 8002550:	491b      	ldr	r1, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	f023 020c 	bic.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4917      	ldr	r1, [pc, #92]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f023 0202 	bic.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	4912      	ldr	r1, [pc, #72]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800258c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe ff13 	bl	80013e0 <HAL_GetTick>
 80025ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025bc:	e011      	b.n	80025e2 <HAL_RCC_OscConfig+0x78e>
 80025be:	bf00      	nop
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58024800 	.word	0x58024800
 80025c8:	fffffc0c 	.word	0xfffffc0c
 80025cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe ff06 	bl	80013e0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e08a      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025e2:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x77c>
 80025ee:	e082      	b.n	80026f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a42      	ldr	r2, [pc, #264]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80025f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fef0 	bl	80013e0 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe feec 	bl	80013e0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e070      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002616:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x7b0>
 8002622:	e068      	b.n	80026f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800262a:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	d031      	beq.n	800269c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d12a      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d122      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0a5b      	lsrs	r3, r3, #9
 800266a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002672:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d111      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	0c1b      	lsrs	r3, r3, #16
 800267c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e02b      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026a0:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d01f      	beq.n	80026f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c2:	f7fe fe8d 	bl	80013e0 <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026c8:	bf00      	nop
 80026ca:	f7fe fe89 	bl	80013e0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d0f9      	beq.n	80026ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_OscConfig+0x8b0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026e2:	00d2      	lsls	r2, r2, #3
 80026e4:	4906      	ldr	r1, [pc, #24]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026ea:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3730      	adds	r7, #48	@ 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	58024400 	.word	0x58024400
 8002704:	ffff0007 	.word	0xffff0007

08002708 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e19c      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b8a      	ldr	r3, [pc, #552]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b87      	ldr	r3, [pc, #540]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	4985      	ldr	r1, [pc, #532]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b83      	ldr	r3, [pc, #524]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e184      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002764:	429a      	cmp	r2, r3
 8002766:	d908      	bls.n	800277a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002768:	4b78      	ldr	r3, [pc, #480]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4975      	ldr	r1, [pc, #468]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002776:	4313      	orrs	r3, r2
 8002778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d010      	beq.n	80027a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	4b70      	ldr	r3, [pc, #448]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002792:	429a      	cmp	r2, r3
 8002794:	d908      	bls.n	80027a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002796:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	496a      	ldr	r1, [pc, #424]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d908      	bls.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027c4:	4b61      	ldr	r3, [pc, #388]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	495e      	ldr	r1, [pc, #376]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d908      	bls.n	8002804 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027f2:	4b56      	ldr	r3, [pc, #344]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4953      	ldr	r1, [pc, #332]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002800:	4313      	orrs	r3, r2
 8002802:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b4d      	ldr	r3, [pc, #308]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	429a      	cmp	r2, r3
 800281e:	d908      	bls.n	8002832 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f023 020f 	bic.w	r2, r3, #15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4947      	ldr	r1, [pc, #284]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800282e:	4313      	orrs	r3, r2
 8002830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d055      	beq.n	80028ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800283e:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4940      	ldr	r1, [pc, #256]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800284c:	4313      	orrs	r3, r2
 800284e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002858:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d121      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0f6      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d107      	bne.n	8002880 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002870:	4b36      	ldr	r3, [pc, #216]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d115      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0ea      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002888:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0de      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0d6      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a8:	4b28      	ldr	r3, [pc, #160]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4925      	ldr	r1, [pc, #148]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe fd91 	bl	80013e0 <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c2:	f7fe fd8d 	bl	80013e0 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0be      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d8:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d1eb      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	4b14      	ldr	r3, [pc, #80]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	429a      	cmp	r2, r3
 8002904:	d208      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	490e      	ldr	r1, [pc, #56]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002914:	4313      	orrs	r3, r2
 8002916:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d214      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4906      	ldr	r1, [pc, #24]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e086      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
 8002948:	52002000 	.word	0x52002000
 800294c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002968:	429a      	cmp	r2, r3
 800296a:	d208      	bcs.n	800297e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800296c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4939      	ldr	r1, [pc, #228]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 800297a:	4313      	orrs	r3, r2
 800297c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002996:	429a      	cmp	r2, r3
 8002998:	d208      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	492e      	ldr	r1, [pc, #184]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d208      	bcs.n	80029da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4922      	ldr	r1, [pc, #136]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d010      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d208      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4917      	ldr	r1, [pc, #92]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a08:	f000 f834 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	4912      	ldr	r1, [pc, #72]	@ (8002a64 <HAL_RCC_ClockConfig+0x35c>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <HAL_RCC_ClockConfig+0x35c>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x360>)
 8002a3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a40:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x364>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_RCC_ClockConfig+0x368>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fc7e 	bl	800134c <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
 8002a64:	08006d0c 	.word	0x08006d0c
 8002a68:	24000024 	.word	0x24000024
 8002a6c:	24000020 	.word	0x24000020
 8002a70:	24000028 	.word	0x24000028

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7a:	4bb3      	ldr	r3, [pc, #716]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	f200 8155 	bhi.w	8002d32 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002af5 	.word	0x08002af5
 8002a94:	08002d33 	.word	0x08002d33
 8002a98:	08002d33 	.word	0x08002d33
 8002a9c:	08002d33 	.word	0x08002d33
 8002aa0:	08002d33 	.word	0x08002d33
 8002aa4:	08002d33 	.word	0x08002d33
 8002aa8:	08002d33 	.word	0x08002d33
 8002aac:	08002d33 	.word	0x08002d33
 8002ab0:	08002b1b 	.word	0x08002b1b
 8002ab4:	08002d33 	.word	0x08002d33
 8002ab8:	08002d33 	.word	0x08002d33
 8002abc:	08002d33 	.word	0x08002d33
 8002ac0:	08002d33 	.word	0x08002d33
 8002ac4:	08002d33 	.word	0x08002d33
 8002ac8:	08002d33 	.word	0x08002d33
 8002acc:	08002d33 	.word	0x08002d33
 8002ad0:	08002b21 	.word	0x08002b21
 8002ad4:	08002d33 	.word	0x08002d33
 8002ad8:	08002d33 	.word	0x08002d33
 8002adc:	08002d33 	.word	0x08002d33
 8002ae0:	08002d33 	.word	0x08002d33
 8002ae4:	08002d33 	.word	0x08002d33
 8002ae8:	08002d33 	.word	0x08002d33
 8002aec:	08002d33 	.word	0x08002d33
 8002af0:	08002b27 	.word	0x08002b27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af4:	4b94      	ldr	r3, [pc, #592]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b00:	4b91      	ldr	r3, [pc, #580]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	4a90      	ldr	r2, [pc, #576]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b12:	e111      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b14:	4b8d      	ldr	r3, [pc, #564]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b16:	61bb      	str	r3, [r7, #24]
      break;
 8002b18:	e10e      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b1c:	61bb      	str	r3, [r7, #24]
      break;
 8002b1e:	e10b      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b20:	4b8c      	ldr	r3, [pc, #560]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b22:	61bb      	str	r3, [r7, #24]
      break;
 8002b24:	e108      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b26:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b30:	4b85      	ldr	r3, [pc, #532]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b3c:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b46:	4b80      	ldr	r3, [pc, #512]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80e1 	beq.w	8002d2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f000 8083 	beq.w	8002c78 <HAL_RCC_GetSysClockFreq+0x204>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	f200 80a1 	bhi.w	8002cbc <HAL_RCC_GetSysClockFreq+0x248>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x114>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d056      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b86:	e099      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b88:	4b6f      	ldr	r3, [pc, #444]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b94:	4b6c      	ldr	r3, [pc, #432]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bbe:	4b62      	ldr	r3, [pc, #392]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bee:	e087      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c02:	4b51      	ldr	r3, [pc, #324]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c32:	e065      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c46:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c76:	e043      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cba:	e021      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ce2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	0a5b      	lsrs	r3, r3, #9
 8002d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d24:	ee17 3a90 	vmov	r3, s15
 8002d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
      break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d32:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d34:	61bb      	str	r3, [r7, #24]
      break;
 8002d36:	bf00      	nop
  }

  return sysclockfreq;
 8002d38:	69bb      	ldr	r3, [r7, #24]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	03d09000 	.word	0x03d09000
 8002d50:	003d0900 	.word	0x003d0900
 8002d54:	017d7840 	.word	0x017d7840
 8002d58:	46000000 	.word	0x46000000
 8002d5c:	4c742400 	.word	0x4c742400
 8002d60:	4a742400 	.word	0x4a742400
 8002d64:	4bbebc20 	.word	0x4bbebc20

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d6e:	f7ff fe81 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490f      	ldr	r1, [pc, #60]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002da4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002da6:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	08006d0c 	.word	0x08006d0c
 8002dc0:	24000024 	.word	0x24000024
 8002dc4:	24000020 	.word	0x24000020

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002dcc:	f7ff ffcc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	08006d0c 	.word	0x08006d0c

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002df8:	f7ff ffb6 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4904      	ldr	r1, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	08006d0c 	.word	0x08006d0c

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b0ca      	sub	sp, #296	@ 0x128
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e44:	2500      	movs	r5, #0
 8002e46:	ea54 0305 	orrs.w	r3, r4, r5
 8002e4a:	d049      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e56:	d02f      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e5c:	d828      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e62:	d01a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e68:	d822      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e72:	d007      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e76:	4bb8      	ldr	r3, [pc, #736]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	4ab7      	ldr	r2, [pc, #732]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e82:	e01a      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e88:	3308      	adds	r3, #8
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fc8f 	bl	80047b0 <RCCEx_PLL2_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e98:	e00f      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9e:	3328      	adds	r3, #40	@ 0x28
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fd36 	bl	8004914 <RCCEx_PLL3_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002eae:	e004      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eb6:	e000      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ec2:	4ba5      	ldr	r3, [pc, #660]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ed0:	4aa1      	ldr	r2, [pc, #644]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ed6:	e003      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002eec:	f04f 0900 	mov.w	r9, #0
 8002ef0:	ea58 0309 	orrs.w	r3, r8, r9
 8002ef4:	d047      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d82a      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f00:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f1d 	.word	0x08002f1d
 8002f0c:	08002f2b 	.word	0x08002f2b
 8002f10:	08002f41 	.word	0x08002f41
 8002f14:	08002f5f 	.word	0x08002f5f
 8002f18:	08002f5f 	.word	0x08002f5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	4a8d      	ldr	r2, [pc, #564]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f28:	e01a      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2e:	3308      	adds	r3, #8
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fc3c 	bl	80047b0 <RCCEx_PLL2_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f3e:	e00f      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f44:	3328      	adds	r3, #40	@ 0x28
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fce3 	bl	8004914 <RCCEx_PLL3_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f54:	e004      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f68:	4b7b      	ldr	r3, [pc, #492]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6c:	f023 0107 	bic.w	r1, r3, #7
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	4a78      	ldr	r2, [pc, #480]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f7c:	e003      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f92:	f04f 0b00 	mov.w	fp, #0
 8002f96:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f9a:	d04c      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa6:	d030      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fac:	d829      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb0:	d02d      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb4:	d825      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d018      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d821      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002fc2:	2b40      	cmp	r3, #64	@ 0x40
 8002fc4:	d007      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002fc6:	e01c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4b63      	ldr	r3, [pc, #396]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fcc:	4a62      	ldr	r2, [pc, #392]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fd4:	e01c      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fda:	3308      	adds	r3, #8
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fbe6 	bl	80047b0 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fea:	e011      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff0:	3328      	adds	r3, #40	@ 0x28
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fc8d 	bl	8004914 <RCCEx_PLL3_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003008:	e002      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800300e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003018:	4b4f      	ldr	r3, [pc, #316]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800301a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	4a4c      	ldr	r2, [pc, #304]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6513      	str	r3, [r2, #80]	@ 0x50
 800302c:	e003      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003042:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800304c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d053      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800305e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003062:	d035      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003064:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003068:	d82e      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800306a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800306e:	d031      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003070:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003074:	d828      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800307a:	d01a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003080:	d822      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003086:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800308a:	d007      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800308c:	e01c      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308e:	4b32      	ldr	r3, [pc, #200]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	4a31      	ldr	r2, [pc, #196]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800309a:	e01c      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	3308      	adds	r3, #8
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fb83 	bl	80047b0 <RCCEx_PLL2_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80030b0:	e011      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b6:	3328      	adds	r3, #40	@ 0x28
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 fc2a 	bl	8004914 <RCCEx_PLL3_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030c6:	e006      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030de:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800310a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003114:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d056      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003126:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800312a:	d038      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800312c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003130:	d831      	bhi.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003132:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003136:	d034      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003138:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800313c:	d82b      	bhi.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800313e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003142:	d01d      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003148:	d825      	bhi.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800314e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003154:	e01f      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003156:	bf00      	nop
 8003158:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800315c:	4ba2      	ldr	r3, [pc, #648]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	4aa1      	ldr	r2, [pc, #644]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003168:	e01c      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316e:	3308      	adds	r3, #8
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f001 fb1c 	bl	80047b0 <RCCEx_PLL2_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800317e:	e011      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	3328      	adds	r3, #40	@ 0x28
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f001 fbc3 	bl	8004914 <RCCEx_PLL3_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003194:	e006      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800319c:	e002      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80031a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80031ac:	4b8e      	ldr	r3, [pc, #568]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031bc:	4a8a      	ldr	r2, [pc, #552]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031be:	430b      	orrs	r3, r1
 80031c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80031e6:	460b      	mov	r3, r1
 80031e8:	4313      	orrs	r3, r2
 80031ea:	d03a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	2b30      	cmp	r3, #48	@ 0x30
 80031f4:	d01f      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80031f6:	2b30      	cmp	r3, #48	@ 0x30
 80031f8:	d819      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d00c      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d815      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d019      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003206:	2b10      	cmp	r3, #16
 8003208:	d111      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320a:	4b77      	ldr	r3, [pc, #476]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	4a76      	ldr	r2, [pc, #472]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003216:	e011      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321c:	3308      	adds	r3, #8
 800321e:	2102      	movs	r1, #2
 8003220:	4618      	mov	r0, r3
 8003222:	f001 fac5 	bl	80047b0 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800323a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003244:	4b68      	ldr	r3, [pc, #416]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003248:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	4a65      	ldr	r2, [pc, #404]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003254:	430b      	orrs	r3, r1
 8003256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800325e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800326e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003278:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800327c:	460b      	mov	r3, r1
 800327e:	4313      	orrs	r3, r2
 8003280:	d051      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800328c:	d035      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800328e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003292:	d82e      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003298:	d031      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800329a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800329e:	d828      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a4:	d01a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80032a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032aa:	d822      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d007      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80032b6:	e01c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b8:	4b4b      	ldr	r3, [pc, #300]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4a4a      	ldr	r2, [pc, #296]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032c4:	e01c      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ca:	3308      	adds	r3, #8
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fa6e 	bl	80047b0 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032da:	e011      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fb15 	bl	8004914 <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f8:	e002      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003308:	4b37      	ldr	r3, [pc, #220]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800330a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	4a34      	ldr	r2, [pc, #208]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6513      	str	r3, [r2, #80]	@ 0x50
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800333c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d056      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003350:	d033      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003356:	d82c      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800335c:	d02f      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800335e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003362:	d826      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003368:	d02b      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800336a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800336e:	d820      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003374:	d012      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800337a:	d81a      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d022      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d115      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338a:	3308      	adds	r3, #8
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f001 fa0e 	bl	80047b0 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800339a:	e015      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	3328      	adds	r3, #40	@ 0x28
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fab5 	bl	8004914 <RCCEx_PLL3_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80033b0:	e00a      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033de:	4a02      	ldr	r2, [pc, #8]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033e6:	bf00      	nop
 80033e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003404:	2300      	movs	r3, #0
 8003406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800340a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800340e:	460b      	mov	r3, r1
 8003410:	4313      	orrs	r3, r2
 8003412:	d055      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003420:	d033      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003426:	d82c      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d02f      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003432:	d826      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003434:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003438:	d02b      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800343a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800343e:	d820      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003444:	d012      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800344a:	d81a      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d022      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003454:	d115      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	3308      	adds	r3, #8
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f9a6 	bl	80047b0 <RCCEx_PLL2_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800346a:	e015      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	3328      	adds	r3, #40	@ 0x28
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f001 fa4d 	bl	8004914 <RCCEx_PLL3_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003480:	e00a      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003488:	e006      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800348a:	bf00      	nop
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034a0:	4ba3      	ldr	r3, [pc, #652]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b6:	e003      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80034cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d037      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ea:	d00e      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80034ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034f0:	d816      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80034f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034fa:	d111      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4a8b      	ldr	r2, [pc, #556]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003508:	e00f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	3308      	adds	r3, #8
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f94c 	bl	80047b0 <RCCEx_PLL2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003532:	4b7f      	ldr	r3, [pc, #508]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003536:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003540:	4a7b      	ldr	r2, [pc, #492]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003542:	430b      	orrs	r3, r1
 8003544:	6513      	str	r3, [r2, #80]	@ 0x50
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800355c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003566:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	d039      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003576:	2b03      	cmp	r3, #3
 8003578:	d81c      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035bd 	.word	0x080035bd
 8003584:	08003591 	.word	0x08003591
 8003588:	0800359f 	.word	0x0800359f
 800358c:	080035bd 	.word	0x080035bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b67      	ldr	r3, [pc, #412]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a66      	ldr	r2, [pc, #408]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800359c:	e00f      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	3308      	adds	r3, #8
 80035a4:	2102      	movs	r1, #2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 f902 	bl	80047b0 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	f023 0103 	bic.w	r1, r3, #3
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d4:	4a56      	ldr	r2, [pc, #344]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	f000 809f 	beq.w	8003744 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003606:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003612:	f7fd fee5 	bl	80013e0 <HAL_GetTick>
 8003616:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361a:	e00b      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fd fee0 	bl	80013e0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	@ 0x64
 800362a:	d903      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003632:	e005      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003634:	4b3f      	ldr	r3, [pc, #252]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ed      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003644:	2b00      	cmp	r3, #0
 8003646:	d179      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003654:	4053      	eors	r3, r2
 8003656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800365e:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003666:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800366a:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	4a30      	ldr	r2, [pc, #192]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003674:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800367c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003682:	4a2b      	ldr	r2, [pc, #172]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003696:	d118      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fea2 	bl	80013e0 <HAL_GetTick>
 800369c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a0:	e00d      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd fe9d 	bl	80013e0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80036ac:	1ad2      	subs	r2, r2, r3
 80036ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d903      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80036bc:	e005      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0eb      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80036ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d129      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e2:	d10e      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036f4:	091a      	lsrs	r2, r3, #4
 80036f6:	4b10      	ldr	r3, [pc, #64]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6113      	str	r3, [r2, #16]
 8003700:	e005      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003708:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800370c:	6113      	str	r3, [r2, #16]
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003710:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003720:	430b      	orrs	r3, r1
 8003722:	6713      	str	r3, [r2, #112]	@ 0x70
 8003724:	e00e      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800372e:	e009      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003730:	58024400 	.word	0x58024400
 8003734:	58024800 	.word	0x58024800
 8003738:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f002 0301 	and.w	r3, r2, #1
 8003750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800375a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	f000 8089 	beq.w	8003878 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800376c:	2b28      	cmp	r3, #40	@ 0x28
 800376e:	d86b      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003770:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	08003851 	.word	0x08003851
 800377c:	08003849 	.word	0x08003849
 8003780:	08003849 	.word	0x08003849
 8003784:	08003849 	.word	0x08003849
 8003788:	08003849 	.word	0x08003849
 800378c:	08003849 	.word	0x08003849
 8003790:	08003849 	.word	0x08003849
 8003794:	08003849 	.word	0x08003849
 8003798:	0800381d 	.word	0x0800381d
 800379c:	08003849 	.word	0x08003849
 80037a0:	08003849 	.word	0x08003849
 80037a4:	08003849 	.word	0x08003849
 80037a8:	08003849 	.word	0x08003849
 80037ac:	08003849 	.word	0x08003849
 80037b0:	08003849 	.word	0x08003849
 80037b4:	08003849 	.word	0x08003849
 80037b8:	08003833 	.word	0x08003833
 80037bc:	08003849 	.word	0x08003849
 80037c0:	08003849 	.word	0x08003849
 80037c4:	08003849 	.word	0x08003849
 80037c8:	08003849 	.word	0x08003849
 80037cc:	08003849 	.word	0x08003849
 80037d0:	08003849 	.word	0x08003849
 80037d4:	08003849 	.word	0x08003849
 80037d8:	08003851 	.word	0x08003851
 80037dc:	08003849 	.word	0x08003849
 80037e0:	08003849 	.word	0x08003849
 80037e4:	08003849 	.word	0x08003849
 80037e8:	08003849 	.word	0x08003849
 80037ec:	08003849 	.word	0x08003849
 80037f0:	08003849 	.word	0x08003849
 80037f4:	08003849 	.word	0x08003849
 80037f8:	08003851 	.word	0x08003851
 80037fc:	08003849 	.word	0x08003849
 8003800:	08003849 	.word	0x08003849
 8003804:	08003849 	.word	0x08003849
 8003808:	08003849 	.word	0x08003849
 800380c:	08003849 	.word	0x08003849
 8003810:	08003849 	.word	0x08003849
 8003814:	08003849 	.word	0x08003849
 8003818:	08003851 	.word	0x08003851
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	3308      	adds	r3, #8
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ffc3 	bl	80047b0 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	3328      	adds	r3, #40	@ 0x28
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f86a 	bl	8004914 <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800385a:	4bbf      	ldr	r3, [pc, #764]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003868:	4abb      	ldr	r2, [pc, #748]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800386a:	430b      	orrs	r3, r1
 800386c:	6553      	str	r3, [r2, #84]	@ 0x54
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f002 0302 	and.w	r3, r2, #2
 8003884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800388e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d041      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d824      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80038a2:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038f5 	.word	0x080038f5
 80038ac:	080038c1 	.word	0x080038c1
 80038b0:	080038d7 	.word	0x080038d7
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	080038f5 	.word	0x080038f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	3308      	adds	r3, #8
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 ff71 	bl	80047b0 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038d4:	e00f      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	3328      	adds	r3, #40	@ 0x28
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f818 	bl	8004914 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038ea:	e004      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80038f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038fe:	4b96      	ldr	r3, [pc, #600]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f023 0107 	bic.w	r1, r3, #7
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390c:	4a92      	ldr	r2, [pc, #584]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800390e:	430b      	orrs	r3, r1
 8003910:	6553      	str	r3, [r2, #84]	@ 0x54
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 0304 	and.w	r3, r2, #4
 8003928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003932:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d044      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003944:	2b05      	cmp	r3, #5
 8003946:	d825      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003948:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	0800399d 	.word	0x0800399d
 8003954:	08003969 	.word	0x08003969
 8003958:	0800397f 	.word	0x0800397f
 800395c:	0800399d 	.word	0x0800399d
 8003960:	0800399d 	.word	0x0800399d
 8003964:	0800399d 	.word	0x0800399d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	3308      	adds	r3, #8
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f000 ff1d 	bl	80047b0 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800397c:	e00f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	3328      	adds	r3, #40	@ 0x28
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f000 ffc4 	bl	8004914 <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f023 0107 	bic.w	r1, r3, #7
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b6:	4a68      	ldr	r2, [pc, #416]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f002 0320 	and.w	r3, r2, #32
 80039d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d055      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f2:	d033      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f8:	d82c      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fe:	d02f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d826      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a0a:	d02b      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003a0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a10:	d820      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a16:	d012      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a1c:	d81a      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d022      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a26:	d115      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 febd 	bl	80047b0 <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a3c:	e015      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a42:	3328      	adds	r3, #40	@ 0x28
 8003a44:	2102      	movs	r1, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ff64 	bl	8004914 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a52:	e00a      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5a:	e006      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a60:	bf00      	nop
 8003a62:	e002      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a72:	4b39      	ldr	r3, [pc, #228]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003aa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d058      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003abe:	d033      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ac0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ac4:	d82c      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	d02f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad0:	d826      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ad6:	d02b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003adc:	d820      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae2:	d012      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae8:	d81a      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d022      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af2:	d115      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	3308      	adds	r3, #8
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fe57 	bl	80047b0 <RCCEx_PLL2_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	3328      	adds	r3, #40	@ 0x28
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fefe 	bl	8004914 <RCCEx_PLL3_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b26:	e006      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b28:	bf00      	nop
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b2c:	bf00      	nop
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10e      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b4e:	4a02      	ldr	r2, [pc, #8]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d055      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b90:	d033      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b96:	d82c      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b9c:	d02f      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba2:	d826      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ba4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ba8:	d02b      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003baa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003bae:	d820      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bb4:	d012      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bba:	d81a      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d022      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fdee 	bl	80047b0 <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bda:	e015      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	3328      	adds	r3, #40	@ 0x28
 8003be2:	2102      	movs	r1, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fe95 	bl	8004914 <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c10:	4ba1      	ldr	r3, [pc, #644]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c20:	4a9d      	ldr	r2, [pc, #628]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c22:	430b      	orrs	r3, r1
 8003c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f002 0308 	and.w	r3, r2, #8
 8003c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d01e      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fe54 	bl	8004914 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c78:	4b87      	ldr	r3, [pc, #540]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c88:	4a83      	ldr	r2, [pc, #524]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f002 0310 	and.w	r3, r2, #16
 8003c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ca4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d01e      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cba:	d10c      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	3328      	adds	r3, #40	@ 0x28
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fe25 	bl	8004914 <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd6:	4b70      	ldr	r3, [pc, #448]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ce6:	4a6c      	ldr	r2, [pc, #432]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d03e      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d18:	d022      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d1e:	d81b      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003d2a:	e015      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	3308      	adds	r3, #8
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fd3b 	bl	80047b0 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d40:	e00f      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	3328      	adds	r3, #40	@ 0x28
 8003d48:	2102      	movs	r1, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fde2 	bl	8004914 <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d56:	e004      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d7a:	4a47      	ldr	r2, [pc, #284]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d98:	2300      	movs	r3, #0
 8003d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d03b      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003db2:	d01f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003db4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003db8:	d818      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003dc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dc4:	d007      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003dc6:	e011      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc8:	4b33      	ldr	r3, [pc, #204]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	3328      	adds	r3, #40	@ 0x28
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fd98 	bl	8004914 <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003e2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d034      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e48:	d007      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003e4a:	e011      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4c:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4a11      	ldr	r2, [pc, #68]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e58:	e00e      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fca4 	bl	80047b0 <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e6e:	e003      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e80:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8e:	4a02      	ldr	r2, [pc, #8]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	d00c      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	3328      	adds	r3, #40	@ 0x28
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd23 	bl	8004914 <RCCEx_PLL3_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ee6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ee8:	2300      	movs	r3, #0
 8003eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	d038      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f02:	d018      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f08:	d811      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f0e:	d014      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f14:	d80b      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d011      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4bc3      	ldr	r3, [pc, #780]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	4ac2      	ldr	r2, [pc, #776]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f48:	4bb9      	ldr	r3, [pc, #740]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f58:	4ab5      	ldr	r2, [pc, #724]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f5e:	e003      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f76:	2300      	movs	r3, #0
 8003f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f84:	4baa      	ldr	r3, [pc, #680]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f92:	4aa7      	ldr	r2, [pc, #668]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003faa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fb4:	4b9e      	ldr	r3, [pc, #632]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003fc4:	4a9a      	ldr	r2, [pc, #616]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fdc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fe6:	4b92      	ldr	r3, [pc, #584]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004006:	643b      	str	r3, [r7, #64]	@ 0x40
 8004008:	2300      	movs	r3, #0
 800400a:	647b      	str	r3, [r7, #68]	@ 0x44
 800400c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004016:	4b86      	ldr	r3, [pc, #536]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	4a85      	ldr	r2, [pc, #532]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800401c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004020:	6113      	str	r3, [r2, #16]
 8004022:	4b83      	ldr	r3, [pc, #524]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004024:	6919      	ldr	r1, [r3, #16]
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800402e:	4a80      	ldr	r2, [pc, #512]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004040:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004042:	2300      	movs	r3, #0
 8004044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004046:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004050:	4b77      	ldr	r3, [pc, #476]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405e:	4a74      	ldr	r2, [pc, #464]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004060:	430b      	orrs	r3, r1
 8004062:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004070:	633b      	str	r3, [r7, #48]	@ 0x30
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	@ 0x34
 8004076:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004080:	4b6b      	ldr	r3, [pc, #428]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004084:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004090:	4a67      	ldr	r2, [pc, #412]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004092:	430b      	orrs	r3, r1
 8004094:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	2100      	movs	r1, #0
 80040a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80040ac:	460b      	mov	r3, r1
 80040ae:	4313      	orrs	r3, r2
 80040b0:	d011      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	3308      	adds	r3, #8
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fb78 	bl	80047b0 <RCCEx_PLL2_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	2100      	movs	r1, #0
 80040e0:	6239      	str	r1, [r7, #32]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d011      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3308      	adds	r3, #8
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb58 	bl	80047b0 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	2100      	movs	r1, #0
 8004120:	61b9      	str	r1, [r7, #24]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800412c:	460b      	mov	r3, r1
 800412e:	4313      	orrs	r3, r2
 8004130:	d011      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	3308      	adds	r3, #8
 8004138:	2102      	movs	r1, #2
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fb38 	bl	80047b0 <RCCEx_PLL2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	2100      	movs	r1, #0
 8004160:	6139      	str	r1, [r7, #16]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d011      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	3328      	adds	r3, #40	@ 0x28
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fbca 	bl	8004914 <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	2100      	movs	r1, #0
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d011      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	3328      	adds	r3, #40	@ 0x28
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fbaa 	bl	8004914 <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	2100      	movs	r1, #0
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d011      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	3328      	adds	r3, #40	@ 0x28
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fb8a 	bl	8004914 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004216:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800422a:	46bd      	mov	sp, r7
 800422c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004230:	58024400 	.word	0x58024400

08004234 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004238:	f7fe fd96 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	@ (800425c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	58024400 	.word	0x58024400
 800425c:	08006d0c 	.word	0x08006d0c

08004260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004268:	4ba1      	ldr	r3, [pc, #644]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004272:	4b9f      	ldr	r3, [pc, #636]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	0b1b      	lsrs	r3, r3, #12
 8004278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800427c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800427e:	4b9c      	ldr	r3, [pc, #624]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800428a:	4b99      	ldr	r3, [pc, #612]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	08db      	lsrs	r3, r3, #3
 8004290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8111 	beq.w	80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	f000 8083 	beq.w	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	f200 80a1 	bhi.w	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d056      	beq.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80042ca:	e099      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042cc:	4b88      	ldr	r3, [pc, #544]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02d      	beq.n	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042d8:	4b85      	ldr	r3, [pc, #532]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	08db      	lsrs	r3, r3, #3
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	4a84      	ldr	r2, [pc, #528]	@ (80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b7b      	ldr	r3, [pc, #492]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004332:	e087      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80044fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b6a      	ldr	r3, [pc, #424]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004376:	e065      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b59      	ldr	r3, [pc, #356]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a03 	vldr	s12, [r7, #12]
 800439e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ba:	e043      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b48      	ldr	r3, [pc, #288]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043fe:	e021      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b37      	ldr	r3, [pc, #220]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a03 	vldr	s12, [r7, #12]
 8004426:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004442:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004444:	4b2a      	ldr	r3, [pc, #168]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446a:	ee17 2a90 	vmov	r2, s15
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004472:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004498:	ee17 2a90 	vmov	r2, s15
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80044a0:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80044be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c6:	ee17 2a90 	vmov	r2, s15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80044ce:	e008      	b.n	80044e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
}
 80044e2:	bf00      	nop
 80044e4:	3724      	adds	r7, #36	@ 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
 80044f4:	03d09000 	.word	0x03d09000
 80044f8:	46000000 	.word	0x46000000
 80044fc:	4c742400 	.word	0x4c742400
 8004500:	4a742400 	.word	0x4a742400
 8004504:	4bbebc20 	.word	0x4bbebc20

08004508 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	@ 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004510:	4ba1      	ldr	r3, [pc, #644]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800451a:	4b9f      	ldr	r3, [pc, #636]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	0d1b      	lsrs	r3, r3, #20
 8004520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004524:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004526:	4b9c      	ldr	r3, [pc, #624]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004532:	4b99      	ldr	r3, [pc, #612]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8111 	beq.w	8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b02      	cmp	r3, #2
 800455a:	f000 8083 	beq.w	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f200 80a1 	bhi.w	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d056      	beq.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004572:	e099      	b.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b88      	ldr	r3, [pc, #544]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02d      	beq.n	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004580:	4b85      	ldr	r3, [pc, #532]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	4a84      	ldr	r2, [pc, #528]	@ (800479c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045da:	e087      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80047a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461e:	e065      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b59      	ldr	r3, [pc, #356]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	e043      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b48      	ldr	r3, [pc, #288]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a6:	e021      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b37      	ldr	r3, [pc, #220]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	0a5b      	lsrs	r3, r3, #9
 80046f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004706:	edd7 6a07 	vldr	s13, [r7, #28]
 800470a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004712:	ee17 2a90 	vmov	r2, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800471a:	4b1f      	ldr	r3, [pc, #124]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004734:	edd7 6a07 	vldr	s13, [r7, #28]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004748:	4b13      	ldr	r3, [pc, #76]	@ (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	0e1b      	lsrs	r3, r3, #24
 800474e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800475e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004762:	edd7 6a07 	vldr	s13, [r7, #28]
 8004766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476e:	ee17 2a90 	vmov	r2, s15
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004776:	e008      	b.n	800478a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	@ 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	03d09000 	.word	0x03d09000
 80047a0:	46000000 	.word	0x46000000
 80047a4:	4c742400 	.word	0x4c742400
 80047a8:	4a742400 	.word	0x4a742400
 80047ac:	4bbebc20 	.word	0x4bbebc20

080047b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047be:	4b53      	ldr	r3, [pc, #332]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d101      	bne.n	80047ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e099      	b.n	8004902 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047ce:	4b4f      	ldr	r3, [pc, #316]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a4e      	ldr	r2, [pc, #312]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80047d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fc fe01 	bl	80013e0 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047e2:	f7fc fdfd 	bl	80013e0 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e086      	b.n	8004902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047f4:	4b45      	ldr	r3, [pc, #276]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004800:	4b42      	ldr	r3, [pc, #264]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	493f      	ldr	r1, [pc, #252]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	628b      	str	r3, [r1, #40]	@ 0x28
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	3b01      	subs	r3, #1
 800481a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	3b01      	subs	r3, #1
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	b29b      	uxth	r3, r3
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	3b01      	subs	r3, #1
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004844:	4931      	ldr	r1, [pc, #196]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800484a:	4b30      	ldr	r3, [pc, #192]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	492d      	ldr	r1, [pc, #180]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800485c:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	f023 0220 	bic.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4928      	ldr	r1, [pc, #160]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800486e:	4b27      	ldr	r3, [pc, #156]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	4a26      	ldr	r2, [pc, #152]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004874:	f023 0310 	bic.w	r3, r3, #16
 8004878:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800487a:	4b24      	ldr	r3, [pc, #144]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 800487c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <RCCEx_PLL2_Config+0x160>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	69d2      	ldr	r2, [r2, #28]
 8004886:	00d2      	lsls	r2, r2, #3
 8004888:	4920      	ldr	r1, [pc, #128]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800488e:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	4a1e      	ldr	r2, [pc, #120]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 8004894:	f043 0310 	orr.w	r3, r3, #16
 8004898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048a0:	4b1a      	ldr	r3, [pc, #104]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	4a19      	ldr	r2, [pc, #100]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048ac:	e00f      	b.n	80048ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048b4:	4b15      	ldr	r3, [pc, #84]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	4a14      	ldr	r2, [pc, #80]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048c0:	e005      	b.n	80048ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048c2:	4b12      	ldr	r3, [pc, #72]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4a11      	ldr	r2, [pc, #68]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048ce:	4b0f      	ldr	r3, [pc, #60]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a0e      	ldr	r2, [pc, #56]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fc fd81 	bl	80013e0 <HAL_GetTick>
 80048de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048e0:	e008      	b.n	80048f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048e2:	f7fc fd7d 	bl	80013e0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e006      	b.n	8004902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <RCCEx_PLL2_Config+0x15c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	ffff0007 	.word	0xffff0007

08004914 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004922:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b03      	cmp	r3, #3
 800492c:	d101      	bne.n	8004932 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e099      	b.n	8004a66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004932:	4b4f      	ldr	r3, [pc, #316]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4e      	ldr	r2, [pc, #312]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fc fd4f 	bl	80013e0 <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004944:	e008      	b.n	8004958 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004946:	f7fc fd4b 	bl	80013e0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e086      	b.n	8004a66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004958:	4b45      	ldr	r3, [pc, #276]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004964:	4b42      	ldr	r3, [pc, #264]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	051b      	lsls	r3, r3, #20
 8004972:	493f      	ldr	r1, [pc, #252]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	628b      	str	r3, [r1, #40]	@ 0x28
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	3b01      	subs	r3, #1
 800497e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	3b01      	subs	r3, #1
 8004988:	025b      	lsls	r3, r3, #9
 800498a:	b29b      	uxth	r3, r3
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049a8:	4931      	ldr	r1, [pc, #196]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049ae:	4b30      	ldr	r3, [pc, #192]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	492d      	ldr	r1, [pc, #180]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4928      	ldr	r1, [pc, #160]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049d2:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	4a26      	ldr	r2, [pc, #152]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049de:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e2:	4b24      	ldr	r3, [pc, #144]	@ (8004a74 <RCCEx_PLL3_Config+0x160>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69d2      	ldr	r2, [r2, #28]
 80049ea:	00d2      	lsls	r2, r2, #3
 80049ec:	4920      	ldr	r1, [pc, #128]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a04:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a10:	e00f      	b.n	8004a32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d106      	bne.n	8004a26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a18:	4b15      	ldr	r3, [pc, #84]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a24:	e005      	b.n	8004a32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a26:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	4a11      	ldr	r2, [pc, #68]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a32:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3e:	f7fc fccf 	bl	80013e0 <HAL_GetTick>
 8004a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a44:	e008      	b.n	8004a58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a46:	f7fc fccb 	bl	80013e0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e006      	b.n	8004a66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
 8004a74:	ffff0007 	.word	0xffff0007

08004a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e042      	b.n	8004b10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc faaf 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	@ 0x24
 8004aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fe1e 	bl	8005704 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8b3 	bl	8004c34 <UART_SetConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e01b      	b.n	8004b10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fe9d 	bl	8005848 <UART_CheckIdleState>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d17b      	bne.n	8004c2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_UART_Transmit+0x26>
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e074      	b.n	8004c2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2221      	movs	r2, #33	@ 0x21
 8004b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fc45 	bl	80013e0 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b70:	d108      	bne.n	8004b84 <HAL_UART_Transmit+0x6c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e003      	b.n	8004b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b8c:	e030      	b.n	8004bf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2180      	movs	r1, #128	@ 0x80
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 feff 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e03d      	b.n	8004c2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	3302      	adds	r3, #2
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e007      	b.n	8004bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1c8      	bne.n	8004b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2140      	movs	r1, #64	@ 0x40
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fec8 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e006      	b.n	8004c2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b092      	sub	sp, #72	@ 0x48
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4bbe      	ldr	r3, [pc, #760]	@ (8004f5c <UART_SetConfig+0x328>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4ab3      	ldr	r2, [pc, #716]	@ (8004f60 <UART_SetConfig+0x32c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	4baf      	ldr	r3, [pc, #700]	@ (8004f64 <UART_SetConfig+0x330>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	f023 010f 	bic.w	r1, r3, #15
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aa6      	ldr	r2, [pc, #664]	@ (8004f68 <UART_SetConfig+0x334>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d177      	bne.n	8004dc4 <UART_SetConfig+0x190>
 8004cd4:	4ba5      	ldr	r3, [pc, #660]	@ (8004f6c <UART_SetConfig+0x338>)
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cdc:	2b28      	cmp	r3, #40	@ 0x28
 8004cde:	d86d      	bhi.n	8004dbc <UART_SetConfig+0x188>
 8004ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0xb4>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d8d 	.word	0x08004d8d
 8004cec:	08004dbd 	.word	0x08004dbd
 8004cf0:	08004dbd 	.word	0x08004dbd
 8004cf4:	08004dbd 	.word	0x08004dbd
 8004cf8:	08004dbd 	.word	0x08004dbd
 8004cfc:	08004dbd 	.word	0x08004dbd
 8004d00:	08004dbd 	.word	0x08004dbd
 8004d04:	08004dbd 	.word	0x08004dbd
 8004d08:	08004d95 	.word	0x08004d95
 8004d0c:	08004dbd 	.word	0x08004dbd
 8004d10:	08004dbd 	.word	0x08004dbd
 8004d14:	08004dbd 	.word	0x08004dbd
 8004d18:	08004dbd 	.word	0x08004dbd
 8004d1c:	08004dbd 	.word	0x08004dbd
 8004d20:	08004dbd 	.word	0x08004dbd
 8004d24:	08004dbd 	.word	0x08004dbd
 8004d28:	08004d9d 	.word	0x08004d9d
 8004d2c:	08004dbd 	.word	0x08004dbd
 8004d30:	08004dbd 	.word	0x08004dbd
 8004d34:	08004dbd 	.word	0x08004dbd
 8004d38:	08004dbd 	.word	0x08004dbd
 8004d3c:	08004dbd 	.word	0x08004dbd
 8004d40:	08004dbd 	.word	0x08004dbd
 8004d44:	08004dbd 	.word	0x08004dbd
 8004d48:	08004da5 	.word	0x08004da5
 8004d4c:	08004dbd 	.word	0x08004dbd
 8004d50:	08004dbd 	.word	0x08004dbd
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004dbd 	.word	0x08004dbd
 8004d60:	08004dbd 	.word	0x08004dbd
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004dad 	.word	0x08004dad
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004dbd 	.word	0x08004dbd
 8004d74:	08004dbd 	.word	0x08004dbd
 8004d78:	08004dbd 	.word	0x08004dbd
 8004d7c:	08004dbd 	.word	0x08004dbd
 8004d80:	08004dbd 	.word	0x08004dbd
 8004d84:	08004dbd 	.word	0x08004dbd
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e222      	b.n	80051da <UART_SetConfig+0x5a6>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e21e      	b.n	80051da <UART_SetConfig+0x5a6>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da2:	e21a      	b.n	80051da <UART_SetConfig+0x5a6>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004daa:	e216      	b.n	80051da <UART_SetConfig+0x5a6>
 8004dac:	2320      	movs	r3, #32
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db2:	e212      	b.n	80051da <UART_SetConfig+0x5a6>
 8004db4:	2340      	movs	r3, #64	@ 0x40
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dba:	e20e      	b.n	80051da <UART_SetConfig+0x5a6>
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc2:	e20a      	b.n	80051da <UART_SetConfig+0x5a6>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a69      	ldr	r2, [pc, #420]	@ (8004f70 <UART_SetConfig+0x33c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d130      	bne.n	8004e30 <UART_SetConfig+0x1fc>
 8004dce:	4b67      	ldr	r3, [pc, #412]	@ (8004f6c <UART_SetConfig+0x338>)
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d826      	bhi.n	8004e28 <UART_SetConfig+0x1f4>
 8004dda:	a201      	add	r2, pc, #4	@ (adr r2, 8004de0 <UART_SetConfig+0x1ac>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004df9 	.word	0x08004df9
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e1ec      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e1e8      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0e:	e1e4      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e16:	e1e0      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e18:	2320      	movs	r3, #32
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1e:	e1dc      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e20:	2340      	movs	r3, #64	@ 0x40
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e26:	e1d8      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2e:	e1d4      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a4f      	ldr	r2, [pc, #316]	@ (8004f74 <UART_SetConfig+0x340>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d130      	bne.n	8004e9c <UART_SetConfig+0x268>
 8004e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f6c <UART_SetConfig+0x338>)
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	d826      	bhi.n	8004e94 <UART_SetConfig+0x260>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <UART_SetConfig+0x218>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e65 	.word	0x08004e65
 8004e50:	08004e6d 	.word	0x08004e6d
 8004e54:	08004e75 	.word	0x08004e75
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e6a:	e1b6      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e72:	e1b2      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e7a:	e1ae      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e82:	e1aa      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e84:	2320      	movs	r3, #32
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8a:	e1a6      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e8c:	2340      	movs	r3, #64	@ 0x40
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e92:	e1a2      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9a:	e19e      	b.n	80051da <UART_SetConfig+0x5a6>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <UART_SetConfig+0x344>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d130      	bne.n	8004f08 <UART_SetConfig+0x2d4>
 8004ea6:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <UART_SetConfig+0x338>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d826      	bhi.n	8004f00 <UART_SetConfig+0x2cc>
 8004eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <UART_SetConfig+0x284>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004ed1 	.word	0x08004ed1
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	08004ee1 	.word	0x08004ee1
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed6:	e180      	b.n	80051da <UART_SetConfig+0x5a6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ede:	e17c      	b.n	80051da <UART_SetConfig+0x5a6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee6:	e178      	b.n	80051da <UART_SetConfig+0x5a6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eee:	e174      	b.n	80051da <UART_SetConfig+0x5a6>
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef6:	e170      	b.n	80051da <UART_SetConfig+0x5a6>
 8004ef8:	2340      	movs	r3, #64	@ 0x40
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efe:	e16c      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f00:	2380      	movs	r3, #128	@ 0x80
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f06:	e168      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f7c <UART_SetConfig+0x348>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d142      	bne.n	8004f98 <UART_SetConfig+0x364>
 8004f12:	4b16      	ldr	r3, [pc, #88]	@ (8004f6c <UART_SetConfig+0x338>)
 8004f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d838      	bhi.n	8004f90 <UART_SetConfig+0x35c>
 8004f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <UART_SetConfig+0x2f0>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f3d 	.word	0x08004f3d
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f4d 	.word	0x08004f4d
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f81 	.word	0x08004f81
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f42:	e14a      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e146      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f52:	e142      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5a:	e13e      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f5c:	cfff69f3 	.word	0xcfff69f3
 8004f60:	58000c00 	.word	0x58000c00
 8004f64:	11fff4ff 	.word	0x11fff4ff
 8004f68:	40011000 	.word	0x40011000
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	40004400 	.word	0x40004400
 8004f74:	40004800 	.word	0x40004800
 8004f78:	40004c00 	.word	0x40004c00
 8004f7c:	40005000 	.word	0x40005000
 8004f80:	2320      	movs	r3, #32
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e128      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f88:	2340      	movs	r3, #64	@ 0x40
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e124      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e120      	b.n	80051da <UART_SetConfig+0x5a6>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4acb      	ldr	r2, [pc, #812]	@ (80052cc <UART_SetConfig+0x698>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d176      	bne.n	8005090 <UART_SetConfig+0x45c>
 8004fa2:	4bcb      	ldr	r3, [pc, #812]	@ (80052d0 <UART_SetConfig+0x69c>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004faa:	2b28      	cmp	r3, #40	@ 0x28
 8004fac:	d86c      	bhi.n	8005088 <UART_SetConfig+0x454>
 8004fae:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <UART_SetConfig+0x380>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08005059 	.word	0x08005059
 8004fb8:	08005089 	.word	0x08005089
 8004fbc:	08005089 	.word	0x08005089
 8004fc0:	08005089 	.word	0x08005089
 8004fc4:	08005089 	.word	0x08005089
 8004fc8:	08005089 	.word	0x08005089
 8004fcc:	08005089 	.word	0x08005089
 8004fd0:	08005089 	.word	0x08005089
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	08005089 	.word	0x08005089
 8004fdc:	08005089 	.word	0x08005089
 8004fe0:	08005089 	.word	0x08005089
 8004fe4:	08005089 	.word	0x08005089
 8004fe8:	08005089 	.word	0x08005089
 8004fec:	08005089 	.word	0x08005089
 8004ff0:	08005089 	.word	0x08005089
 8004ff4:	08005069 	.word	0x08005069
 8004ff8:	08005089 	.word	0x08005089
 8004ffc:	08005089 	.word	0x08005089
 8005000:	08005089 	.word	0x08005089
 8005004:	08005089 	.word	0x08005089
 8005008:	08005089 	.word	0x08005089
 800500c:	08005089 	.word	0x08005089
 8005010:	08005089 	.word	0x08005089
 8005014:	08005071 	.word	0x08005071
 8005018:	08005089 	.word	0x08005089
 800501c:	08005089 	.word	0x08005089
 8005020:	08005089 	.word	0x08005089
 8005024:	08005089 	.word	0x08005089
 8005028:	08005089 	.word	0x08005089
 800502c:	08005089 	.word	0x08005089
 8005030:	08005089 	.word	0x08005089
 8005034:	08005079 	.word	0x08005079
 8005038:	08005089 	.word	0x08005089
 800503c:	08005089 	.word	0x08005089
 8005040:	08005089 	.word	0x08005089
 8005044:	08005089 	.word	0x08005089
 8005048:	08005089 	.word	0x08005089
 800504c:	08005089 	.word	0x08005089
 8005050:	08005089 	.word	0x08005089
 8005054:	08005081 	.word	0x08005081
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e0bc      	b.n	80051da <UART_SetConfig+0x5a6>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e0b8      	b.n	80051da <UART_SetConfig+0x5a6>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e0b4      	b.n	80051da <UART_SetConfig+0x5a6>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e0b0      	b.n	80051da <UART_SetConfig+0x5a6>
 8005078:	2320      	movs	r3, #32
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e0ac      	b.n	80051da <UART_SetConfig+0x5a6>
 8005080:	2340      	movs	r3, #64	@ 0x40
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005086:	e0a8      	b.n	80051da <UART_SetConfig+0x5a6>
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508e:	e0a4      	b.n	80051da <UART_SetConfig+0x5a6>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a8f      	ldr	r2, [pc, #572]	@ (80052d4 <UART_SetConfig+0x6a0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d130      	bne.n	80050fc <UART_SetConfig+0x4c8>
 800509a:	4b8d      	ldr	r3, [pc, #564]	@ (80052d0 <UART_SetConfig+0x69c>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d826      	bhi.n	80050f4 <UART_SetConfig+0x4c0>
 80050a6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <UART_SetConfig+0x478>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	080050d5 	.word	0x080050d5
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050ed 	.word	0x080050ed
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e086      	b.n	80051da <UART_SetConfig+0x5a6>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e082      	b.n	80051da <UART_SetConfig+0x5a6>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e07e      	b.n	80051da <UART_SetConfig+0x5a6>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e07a      	b.n	80051da <UART_SetConfig+0x5a6>
 80050e4:	2320      	movs	r3, #32
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e076      	b.n	80051da <UART_SetConfig+0x5a6>
 80050ec:	2340      	movs	r3, #64	@ 0x40
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f2:	e072      	b.n	80051da <UART_SetConfig+0x5a6>
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fa:	e06e      	b.n	80051da <UART_SetConfig+0x5a6>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a75      	ldr	r2, [pc, #468]	@ (80052d8 <UART_SetConfig+0x6a4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d130      	bne.n	8005168 <UART_SetConfig+0x534>
 8005106:	4b72      	ldr	r3, [pc, #456]	@ (80052d0 <UART_SetConfig+0x69c>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	2b05      	cmp	r3, #5
 8005110:	d826      	bhi.n	8005160 <UART_SetConfig+0x52c>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <UART_SetConfig+0x4e4>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005131 	.word	0x08005131
 800511c:	08005139 	.word	0x08005139
 8005120:	08005141 	.word	0x08005141
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e050      	b.n	80051da <UART_SetConfig+0x5a6>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e04c      	b.n	80051da <UART_SetConfig+0x5a6>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e048      	b.n	80051da <UART_SetConfig+0x5a6>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e044      	b.n	80051da <UART_SetConfig+0x5a6>
 8005150:	2320      	movs	r3, #32
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e040      	b.n	80051da <UART_SetConfig+0x5a6>
 8005158:	2340      	movs	r3, #64	@ 0x40
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e03c      	b.n	80051da <UART_SetConfig+0x5a6>
 8005160:	2380      	movs	r3, #128	@ 0x80
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e038      	b.n	80051da <UART_SetConfig+0x5a6>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5b      	ldr	r2, [pc, #364]	@ (80052dc <UART_SetConfig+0x6a8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d130      	bne.n	80051d4 <UART_SetConfig+0x5a0>
 8005172:	4b57      	ldr	r3, [pc, #348]	@ (80052d0 <UART_SetConfig+0x69c>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b05      	cmp	r3, #5
 800517c:	d826      	bhi.n	80051cc <UART_SetConfig+0x598>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <UART_SetConfig+0x550>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	0800519d 	.word	0x0800519d
 8005188:	080051a5 	.word	0x080051a5
 800518c:	080051ad 	.word	0x080051ad
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	2302      	movs	r3, #2
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a2:	e01a      	b.n	80051da <UART_SetConfig+0x5a6>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e016      	b.n	80051da <UART_SetConfig+0x5a6>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e012      	b.n	80051da <UART_SetConfig+0x5a6>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ba:	e00e      	b.n	80051da <UART_SetConfig+0x5a6>
 80051bc:	2320      	movs	r3, #32
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c2:	e00a      	b.n	80051da <UART_SetConfig+0x5a6>
 80051c4:	2340      	movs	r3, #64	@ 0x40
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ca:	e006      	b.n	80051da <UART_SetConfig+0x5a6>
 80051cc:	2380      	movs	r3, #128	@ 0x80
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e002      	b.n	80051da <UART_SetConfig+0x5a6>
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <UART_SetConfig+0x6a8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	f040 80f8 	bne.w	80053d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	dc46      	bgt.n	800527c <UART_SetConfig+0x648>
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	f2c0 8082 	blt.w	80052f8 <UART_SetConfig+0x6c4>
 80051f4:	3b02      	subs	r3, #2
 80051f6:	2b1e      	cmp	r3, #30
 80051f8:	d87e      	bhi.n	80052f8 <UART_SetConfig+0x6c4>
 80051fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <UART_SetConfig+0x5cc>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005283 	.word	0x08005283
 8005204:	080052f9 	.word	0x080052f9
 8005208:	0800528b 	.word	0x0800528b
 800520c:	080052f9 	.word	0x080052f9
 8005210:	080052f9 	.word	0x080052f9
 8005214:	080052f9 	.word	0x080052f9
 8005218:	0800529b 	.word	0x0800529b
 800521c:	080052f9 	.word	0x080052f9
 8005220:	080052f9 	.word	0x080052f9
 8005224:	080052f9 	.word	0x080052f9
 8005228:	080052f9 	.word	0x080052f9
 800522c:	080052f9 	.word	0x080052f9
 8005230:	080052f9 	.word	0x080052f9
 8005234:	080052f9 	.word	0x080052f9
 8005238:	080052ab 	.word	0x080052ab
 800523c:	080052f9 	.word	0x080052f9
 8005240:	080052f9 	.word	0x080052f9
 8005244:	080052f9 	.word	0x080052f9
 8005248:	080052f9 	.word	0x080052f9
 800524c:	080052f9 	.word	0x080052f9
 8005250:	080052f9 	.word	0x080052f9
 8005254:	080052f9 	.word	0x080052f9
 8005258:	080052f9 	.word	0x080052f9
 800525c:	080052f9 	.word	0x080052f9
 8005260:	080052f9 	.word	0x080052f9
 8005264:	080052f9 	.word	0x080052f9
 8005268:	080052f9 	.word	0x080052f9
 800526c:	080052f9 	.word	0x080052f9
 8005270:	080052f9 	.word	0x080052f9
 8005274:	080052f9 	.word	0x080052f9
 8005278:	080052eb 	.word	0x080052eb
 800527c:	2b40      	cmp	r3, #64	@ 0x40
 800527e:	d037      	beq.n	80052f0 <UART_SetConfig+0x6bc>
 8005280:	e03a      	b.n	80052f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005282:	f7fe ffd7 	bl	8004234 <HAL_RCCEx_GetD3PCLK1Freq>
 8005286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005288:	e03c      	b.n	8005304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800528a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe ffe6 	bl	8004260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005298:	e034      	b.n	8005304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800529a:	f107 0318 	add.w	r3, r7, #24
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff f932 	bl	8004508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a8:	e02c      	b.n	8005304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052aa:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <UART_SetConfig+0x69c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052b6:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <UART_SetConfig+0x69c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	08db      	lsrs	r3, r3, #3
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	4a07      	ldr	r2, [pc, #28]	@ (80052e0 <UART_SetConfig+0x6ac>)
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052c8:	e01c      	b.n	8005304 <UART_SetConfig+0x6d0>
 80052ca:	bf00      	nop
 80052cc:	40011400 	.word	0x40011400
 80052d0:	58024400 	.word	0x58024400
 80052d4:	40007800 	.word	0x40007800
 80052d8:	40007c00 	.word	0x40007c00
 80052dc:	58000c00 	.word	0x58000c00
 80052e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b9d      	ldr	r3, [pc, #628]	@ (800555c <UART_SetConfig+0x928>)
 80052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052e8:	e00c      	b.n	8005304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052ea:	4b9d      	ldr	r3, [pc, #628]	@ (8005560 <UART_SetConfig+0x92c>)
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ee:	e009      	b.n	8005304 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052f6:	e005      	b.n	8005304 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005302:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 81de 	beq.w	80056c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	4a94      	ldr	r2, [pc, #592]	@ (8005564 <UART_SetConfig+0x930>)
 8005312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005316:	461a      	mov	r2, r3
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	fbb3 f3f2 	udiv	r3, r3, r2
 800531e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532c:	429a      	cmp	r2, r3
 800532e:	d305      	bcc.n	800533c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005338:	429a      	cmp	r2, r3
 800533a:	d903      	bls.n	8005344 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005342:	e1c1      	b.n	80056c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005346:	2200      	movs	r2, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	60fa      	str	r2, [r7, #12]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	4a84      	ldr	r2, [pc, #528]	@ (8005564 <UART_SetConfig+0x930>)
 8005352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005356:	b29b      	uxth	r3, r3
 8005358:	2200      	movs	r2, #0
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005366:	f7fb f813 	bl	8000390 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	020b      	lsls	r3, r1, #8
 800537c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005380:	0202      	lsls	r2, r0, #8
 8005382:	6979      	ldr	r1, [r7, #20]
 8005384:	6849      	ldr	r1, [r1, #4]
 8005386:	0849      	lsrs	r1, r1, #1
 8005388:	2000      	movs	r0, #0
 800538a:	460c      	mov	r4, r1
 800538c:	4605      	mov	r5, r0
 800538e:	eb12 0804 	adds.w	r8, r2, r4
 8005392:	eb43 0905 	adc.w	r9, r3, r5
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	469a      	mov	sl, r3
 800539e:	4693      	mov	fp, r2
 80053a0:	4652      	mov	r2, sl
 80053a2:	465b      	mov	r3, fp
 80053a4:	4640      	mov	r0, r8
 80053a6:	4649      	mov	r1, r9
 80053a8:	f7fa fff2 	bl	8000390 <__aeabi_uldivmod>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4613      	mov	r3, r2
 80053b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ba:	d308      	bcc.n	80053ce <UART_SetConfig+0x79a>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c2:	d204      	bcs.n	80053ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e17c      	b.n	80056c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80053d4:	e178      	b.n	80056c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053de:	f040 80c5 	bne.w	800556c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80053e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	dc48      	bgt.n	800547c <UART_SetConfig+0x848>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db7b      	blt.n	80054e6 <UART_SetConfig+0x8b2>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d879      	bhi.n	80054e6 <UART_SetConfig+0x8b2>
 80053f2:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <UART_SetConfig+0x7c4>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005483 	.word	0x08005483
 80053fc:	0800548b 	.word	0x0800548b
 8005400:	080054e7 	.word	0x080054e7
 8005404:	080054e7 	.word	0x080054e7
 8005408:	08005493 	.word	0x08005493
 800540c:	080054e7 	.word	0x080054e7
 8005410:	080054e7 	.word	0x080054e7
 8005414:	080054e7 	.word	0x080054e7
 8005418:	080054a3 	.word	0x080054a3
 800541c:	080054e7 	.word	0x080054e7
 8005420:	080054e7 	.word	0x080054e7
 8005424:	080054e7 	.word	0x080054e7
 8005428:	080054e7 	.word	0x080054e7
 800542c:	080054e7 	.word	0x080054e7
 8005430:	080054e7 	.word	0x080054e7
 8005434:	080054e7 	.word	0x080054e7
 8005438:	080054b3 	.word	0x080054b3
 800543c:	080054e7 	.word	0x080054e7
 8005440:	080054e7 	.word	0x080054e7
 8005444:	080054e7 	.word	0x080054e7
 8005448:	080054e7 	.word	0x080054e7
 800544c:	080054e7 	.word	0x080054e7
 8005450:	080054e7 	.word	0x080054e7
 8005454:	080054e7 	.word	0x080054e7
 8005458:	080054e7 	.word	0x080054e7
 800545c:	080054e7 	.word	0x080054e7
 8005460:	080054e7 	.word	0x080054e7
 8005464:	080054e7 	.word	0x080054e7
 8005468:	080054e7 	.word	0x080054e7
 800546c:	080054e7 	.word	0x080054e7
 8005470:	080054e7 	.word	0x080054e7
 8005474:	080054e7 	.word	0x080054e7
 8005478:	080054d9 	.word	0x080054d9
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	d02e      	beq.n	80054de <UART_SetConfig+0x8aa>
 8005480:	e031      	b.n	80054e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005482:	f7fd fca1 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8005486:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005488:	e033      	b.n	80054f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800548a:	f7fd fcb3 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 800548e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005490:	e02f      	b.n	80054f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fee2 	bl	8004260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a0:	e027      	b.n	80054f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a2:	f107 0318 	add.w	r3, r7, #24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff f82e 	bl	8004508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054b0:	e01f      	b.n	80054f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005568 <UART_SetConfig+0x934>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054be:	4b2a      	ldr	r3, [pc, #168]	@ (8005568 <UART_SetConfig+0x934>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	4a24      	ldr	r2, [pc, #144]	@ (800555c <UART_SetConfig+0x928>)
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054d0:	e00f      	b.n	80054f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80054d2:	4b22      	ldr	r3, [pc, #136]	@ (800555c <UART_SetConfig+0x928>)
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054d6:	e00c      	b.n	80054f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054d8:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <UART_SetConfig+0x92c>)
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054dc:	e009      	b.n	80054f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054e4:	e005      	b.n	80054f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80e7 	beq.w	80056c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <UART_SetConfig+0x930>)
 8005500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005504:	461a      	mov	r2, r3
 8005506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005508:	fbb3 f3f2 	udiv	r3, r3, r2
 800550c:	005a      	lsls	r2, r3, #1
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	441a      	add	r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	2b0f      	cmp	r3, #15
 8005524:	d916      	bls.n	8005554 <UART_SetConfig+0x920>
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552c:	d212      	bcs.n	8005554 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	b29b      	uxth	r3, r3
 8005532:	f023 030f 	bic.w	r3, r3, #15
 8005536:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	b29a      	uxth	r2, r3
 8005544:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005546:	4313      	orrs	r3, r2
 8005548:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	e0b9      	b.n	80056c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800555a:	e0b5      	b.n	80056c8 <UART_SetConfig+0xa94>
 800555c:	03d09000 	.word	0x03d09000
 8005560:	003d0900 	.word	0x003d0900
 8005564:	08006d1c 	.word	0x08006d1c
 8005568:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800556c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005570:	2b20      	cmp	r3, #32
 8005572:	dc49      	bgt.n	8005608 <UART_SetConfig+0x9d4>
 8005574:	2b00      	cmp	r3, #0
 8005576:	db7c      	blt.n	8005672 <UART_SetConfig+0xa3e>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d87a      	bhi.n	8005672 <UART_SetConfig+0xa3e>
 800557c:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <UART_SetConfig+0x950>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	0800560f 	.word	0x0800560f
 8005588:	08005617 	.word	0x08005617
 800558c:	08005673 	.word	0x08005673
 8005590:	08005673 	.word	0x08005673
 8005594:	0800561f 	.word	0x0800561f
 8005598:	08005673 	.word	0x08005673
 800559c:	08005673 	.word	0x08005673
 80055a0:	08005673 	.word	0x08005673
 80055a4:	0800562f 	.word	0x0800562f
 80055a8:	08005673 	.word	0x08005673
 80055ac:	08005673 	.word	0x08005673
 80055b0:	08005673 	.word	0x08005673
 80055b4:	08005673 	.word	0x08005673
 80055b8:	08005673 	.word	0x08005673
 80055bc:	08005673 	.word	0x08005673
 80055c0:	08005673 	.word	0x08005673
 80055c4:	0800563f 	.word	0x0800563f
 80055c8:	08005673 	.word	0x08005673
 80055cc:	08005673 	.word	0x08005673
 80055d0:	08005673 	.word	0x08005673
 80055d4:	08005673 	.word	0x08005673
 80055d8:	08005673 	.word	0x08005673
 80055dc:	08005673 	.word	0x08005673
 80055e0:	08005673 	.word	0x08005673
 80055e4:	08005673 	.word	0x08005673
 80055e8:	08005673 	.word	0x08005673
 80055ec:	08005673 	.word	0x08005673
 80055f0:	08005673 	.word	0x08005673
 80055f4:	08005673 	.word	0x08005673
 80055f8:	08005673 	.word	0x08005673
 80055fc:	08005673 	.word	0x08005673
 8005600:	08005673 	.word	0x08005673
 8005604:	08005665 	.word	0x08005665
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d02e      	beq.n	800566a <UART_SetConfig+0xa36>
 800560c:	e031      	b.n	8005672 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800560e:	f7fd fbdb 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8005612:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005614:	e033      	b.n	800567e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005616:	f7fd fbed 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 800561a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800561c:	e02f      	b.n	800567e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800561e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fe1c 	bl	8004260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800562c:	e027      	b.n	800567e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800562e:	f107 0318 	add.w	r3, r7, #24
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe ff68 	bl	8004508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800563c:	e01f      	b.n	800567e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800563e:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <UART_SetConfig+0xac0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800564a:	4b2a      	ldr	r3, [pc, #168]	@ (80056f4 <UART_SetConfig+0xac0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	08db      	lsrs	r3, r3, #3
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	4a28      	ldr	r2, [pc, #160]	@ (80056f8 <UART_SetConfig+0xac4>)
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800565c:	e00f      	b.n	800567e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800565e:	4b26      	ldr	r3, [pc, #152]	@ (80056f8 <UART_SetConfig+0xac4>)
 8005660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005662:	e00c      	b.n	800567e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005664:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <UART_SetConfig+0xac8>)
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005668:	e009      	b.n	800567e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005670:	e005      	b.n	800567e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800567c:	bf00      	nop
    }

    if (pclk != 0U)
 800567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d021      	beq.n	80056c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <UART_SetConfig+0xacc>)
 800568a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800568e:	461a      	mov	r2, r3
 8005690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005692:	fbb3 f2f2 	udiv	r2, r3, r2
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	441a      	add	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056aa:	2b0f      	cmp	r3, #15
 80056ac:	d909      	bls.n	80056c2 <UART_SetConfig+0xa8e>
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b4:	d205      	bcs.n	80056c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e002      	b.n	80056c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3748      	adds	r7, #72	@ 0x48
 80056ec:	46bd      	mov	sp, r7
 80056ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f2:	bf00      	nop
 80056f4:	58024400 	.word	0x58024400
 80056f8:	03d09000 	.word	0x03d09000
 80056fc:	003d0900 	.word	0x003d0900
 8005700:	08006d1c 	.word	0x08006d1c

08005704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01a      	beq.n	800581a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005802:	d10a      	bne.n	800581a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b098      	sub	sp, #96	@ 0x60
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005858:	f7fb fdc2 	bl	80013e0 <HAL_GetTick>
 800585c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d12f      	bne.n	80058cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800586c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f88e 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d022      	beq.n	80058cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800589a:	653b      	str	r3, [r7, #80]	@ 0x50
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e063      	b.n	8005994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d149      	bne.n	800596e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e2:	2200      	movs	r2, #0
 80058e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f857 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d03c      	beq.n	800596e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	623b      	str	r3, [r7, #32]
   return(result);
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005912:	633b      	str	r3, [r7, #48]	@ 0x30
 8005914:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	60fb      	str	r3, [r7, #12]
   return(result);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	617b      	str	r3, [r7, #20]
   return(result);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e012      	b.n	8005994 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3758      	adds	r7, #88	@ 0x58
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e04f      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d04b      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fb fd13 	bl	80013e0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <UART_WaitOnFlagUntilTimeout+0x30>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e04e      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d037      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	d034      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b40      	cmp	r3, #64	@ 0x40
 80059e8:	d031      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d110      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2208      	movs	r2, #8
 80059fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f839 	bl	8005a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e029      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a28:	d111      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f81f 	bl	8005a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e00f      	b.n	8005a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d0a0      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b095      	sub	sp, #84	@ 0x54
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e6      	bne.n	8005a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b40 <UART_EndRxTransfer+0xc8>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d118      	bne.n	8005b20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b34:	bf00      	nop
 8005b36:	3754      	adds	r7, #84	@ 0x54
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	effffffe 	.word	0xeffffffe

08005b44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e027      	b.n	8005baa <HAL_UARTEx_DisableFifoMode+0x66>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	@ 0x24
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e02d      	b.n	8005c2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f850 	bl	8005cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e02d      	b.n	8005ca6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2224      	movs	r2, #36	@ 0x24
 8005c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f812 	bl	8005cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cd0:	e031      	b.n	8005d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cd2:	2310      	movs	r3, #16
 8005cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	0e5b      	lsrs	r3, r3, #25
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	0f5b      	lsrs	r3, r3, #29
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	7b3a      	ldrb	r2, [r7, #12]
 8005cfe:	4911      	ldr	r1, [pc, #68]	@ (8005d44 <UARTEx_SetNbDataToProcess+0x94>)
 8005d00:	5c8a      	ldrb	r2, [r1, r2]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d06:	7b3a      	ldrb	r2, [r7, #12]
 8005d08:	490f      	ldr	r1, [pc, #60]	@ (8005d48 <UARTEx_SetNbDataToProcess+0x98>)
 8005d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	7b7a      	ldrb	r2, [r7, #13]
 8005d1c:	4909      	ldr	r1, [pc, #36]	@ (8005d44 <UARTEx_SetNbDataToProcess+0x94>)
 8005d1e:	5c8a      	ldrb	r2, [r1, r2]
 8005d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d24:	7b7a      	ldrb	r2, [r7, #13]
 8005d26:	4908      	ldr	r1, [pc, #32]	@ (8005d48 <UARTEx_SetNbDataToProcess+0x98>)
 8005d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	08006d34 	.word	0x08006d34
 8005d48:	08006d3c 	.word	0x08006d3c

08005d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	f107 001c 	add.w	r0, r7, #28
 8005d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d121      	bne.n	8005daa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	4b2c      	ldr	r3, [pc, #176]	@ (8005e28 <USB_CoreInit+0xdc>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 faaa 	bl	80062f8 <USB_CoreReset>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e01b      	b.n	8005de2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa9e 	bl	80062f8 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dd4:	e005      	b.n	8005de2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005de2:	7fbb      	ldrb	r3, [r7, #30]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d116      	bne.n	8005e16 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005df6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e2c <USB_CoreInit+0xe0>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f043 0206 	orr.w	r2, r3, #6
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e22:	b004      	add	sp, #16
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	ffbdffbf 	.word	0xffbdffbf
 8005e2c:	03ee0000 	.word	0x03ee0000

08005e30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f023 0201 	bic.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d115      	bne.n	8005ea0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e80:	200a      	movs	r0, #10
 8005e82:	f7fb fab9 	bl	80013f8 <HAL_Delay>
      ms += 10U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	330a      	adds	r3, #10
 8005e8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa25 	bl	80062dc <USB_GetMode>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d01e      	beq.n	8005ed6 <USB_SetCurrentMode+0x84>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e9c:	d9f0      	bls.n	8005e80 <USB_SetCurrentMode+0x2e>
 8005e9e:	e01a      	b.n	8005ed6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d115      	bne.n	8005ed2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005eb2:	200a      	movs	r0, #10
 8005eb4:	f7fb faa0 	bl	80013f8 <HAL_Delay>
      ms += 10U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	330a      	adds	r3, #10
 8005ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa0c 	bl	80062dc <USB_GetMode>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <USB_SetCurrentMode+0x84>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ece:	d9f0      	bls.n	8005eb2 <USB_SetCurrentMode+0x60>
 8005ed0:	e001      	b.n	8005ed6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e005      	b.n	8005ee2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005eda:	d101      	bne.n	8005ee0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eec:	b084      	sub	sp, #16
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e009      	b.n	8005f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3340      	adds	r3, #64	@ 0x40
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b0e      	cmp	r3, #14
 8005f24:	d9f2      	bls.n	8005f0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d11c      	bne.n	8005f68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e005      	b.n	8005f74 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10d      	bne.n	8005fa4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f90:	2100      	movs	r1, #0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f968 	bl	8006268 <USB_SetDevSpeed>
 8005f98:	e008      	b.n	8005fac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f963 	bl	8006268 <USB_SetDevSpeed>
 8005fa2:	e003      	b.n	8005fac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f95e 	bl	8006268 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fac:	2110      	movs	r1, #16
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8fa 	bl	80061a8 <USB_FlushTxFifo>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f924 	bl	800620c <USB_FlushRxFifo>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e043      	b.n	8006080 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800600a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800600e:	d118      	bne.n	8006042 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e013      	b.n	8006054 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e008      	b.n	8006054 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006072:	461a      	mov	r2, r3
 8006074:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006084:	461a      	mov	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4293      	cmp	r3, r2
 800608a:	d3b5      	bcc.n	8005ff8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	e043      	b.n	800611a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a8:	d118      	bne.n	80060dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e013      	b.n	80060ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e008      	b.n	80060ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	461a      	mov	r2, r3
 800610e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3301      	adds	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800611e:	461a      	mov	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4293      	cmp	r3, r2
 8006124:	d3b5      	bcc.n	8006092 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006138:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006146:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f043 0210 	orr.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <USB_DevInit+0x2b4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006168:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f043 0208 	orr.w	r2, r3, #8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800617c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <USB_DevInit+0x2b8>)
 800618a:	4313      	orrs	r3, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800619c:	b004      	add	sp, #16
 800619e:	4770      	bx	lr
 80061a0:	803c3800 	.word	0x803c3800
 80061a4:	40000004 	.word	0x40000004

080061a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c2:	d901      	bls.n	80061c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e01b      	b.n	8006200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	daf2      	bge.n	80061b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	019b      	lsls	r3, r3, #6
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ec:	d901      	bls.n	80061f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e006      	b.n	8006200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d0f0      	beq.n	80061e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006224:	d901      	bls.n	800622a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e018      	b.n	800625c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	daf2      	bge.n	8006218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2210      	movs	r2, #16
 800623a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006248:	d901      	bls.n	800624e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e006      	b.n	800625c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b10      	cmp	r3, #16
 8006258:	d0f0      	beq.n	800623c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c8:	f043 0302 	orr.w	r3, r3, #2
 80062cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	f003 0301 	and.w	r3, r3, #1
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006310:	d901      	bls.n	8006316 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e01b      	b.n	800634e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	daf2      	bge.n	8006304 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800633a:	d901      	bls.n	8006340 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e006      	b.n	800634e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d0f0      	beq.n	800632e <USB_CoreReset+0x36>

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <siprintf>:
 800635c:	b40e      	push	{r1, r2, r3}
 800635e:	b500      	push	{lr}
 8006360:	b09c      	sub	sp, #112	@ 0x70
 8006362:	ab1d      	add	r3, sp, #116	@ 0x74
 8006364:	9002      	str	r0, [sp, #8]
 8006366:	9006      	str	r0, [sp, #24]
 8006368:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800636c:	4809      	ldr	r0, [pc, #36]	@ (8006394 <siprintf+0x38>)
 800636e:	9107      	str	r1, [sp, #28]
 8006370:	9104      	str	r1, [sp, #16]
 8006372:	4909      	ldr	r1, [pc, #36]	@ (8006398 <siprintf+0x3c>)
 8006374:	f853 2b04 	ldr.w	r2, [r3], #4
 8006378:	9105      	str	r1, [sp, #20]
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	a902      	add	r1, sp, #8
 8006380:	f000 f994 	bl	80066ac <_svfiprintf_r>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	b01c      	add	sp, #112	@ 0x70
 800638c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006390:	b003      	add	sp, #12
 8006392:	4770      	bx	lr
 8006394:	24000030 	.word	0x24000030
 8006398:	ffff0208 	.word	0xffff0208

0800639c <memset>:
 800639c:	4402      	add	r2, r0
 800639e:	4603      	mov	r3, r0
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d100      	bne.n	80063a6 <memset+0xa>
 80063a4:	4770      	bx	lr
 80063a6:	f803 1b01 	strb.w	r1, [r3], #1
 80063aa:	e7f9      	b.n	80063a0 <memset+0x4>

080063ac <__errno>:
 80063ac:	4b01      	ldr	r3, [pc, #4]	@ (80063b4 <__errno+0x8>)
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	24000030 	.word	0x24000030

080063b8 <__libc_init_array>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4d0d      	ldr	r5, [pc, #52]	@ (80063f0 <__libc_init_array+0x38>)
 80063bc:	4c0d      	ldr	r4, [pc, #52]	@ (80063f4 <__libc_init_array+0x3c>)
 80063be:	1b64      	subs	r4, r4, r5
 80063c0:	10a4      	asrs	r4, r4, #2
 80063c2:	2600      	movs	r6, #0
 80063c4:	42a6      	cmp	r6, r4
 80063c6:	d109      	bne.n	80063dc <__libc_init_array+0x24>
 80063c8:	4d0b      	ldr	r5, [pc, #44]	@ (80063f8 <__libc_init_array+0x40>)
 80063ca:	4c0c      	ldr	r4, [pc, #48]	@ (80063fc <__libc_init_array+0x44>)
 80063cc:	f000 fc66 	bl	8006c9c <_init>
 80063d0:	1b64      	subs	r4, r4, r5
 80063d2:	10a4      	asrs	r4, r4, #2
 80063d4:	2600      	movs	r6, #0
 80063d6:	42a6      	cmp	r6, r4
 80063d8:	d105      	bne.n	80063e6 <__libc_init_array+0x2e>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e0:	4798      	blx	r3
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7ee      	b.n	80063c4 <__libc_init_array+0xc>
 80063e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ea:	4798      	blx	r3
 80063ec:	3601      	adds	r6, #1
 80063ee:	e7f2      	b.n	80063d6 <__libc_init_array+0x1e>
 80063f0:	08006d80 	.word	0x08006d80
 80063f4:	08006d80 	.word	0x08006d80
 80063f8:	08006d80 	.word	0x08006d80
 80063fc:	08006d84 	.word	0x08006d84

08006400 <__retarget_lock_acquire_recursive>:
 8006400:	4770      	bx	lr

08006402 <__retarget_lock_release_recursive>:
 8006402:	4770      	bx	lr

08006404 <_free_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4605      	mov	r5, r0
 8006408:	2900      	cmp	r1, #0
 800640a:	d041      	beq.n	8006490 <_free_r+0x8c>
 800640c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006410:	1f0c      	subs	r4, r1, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfb8      	it	lt
 8006416:	18e4      	addlt	r4, r4, r3
 8006418:	f000 f8e0 	bl	80065dc <__malloc_lock>
 800641c:	4a1d      	ldr	r2, [pc, #116]	@ (8006494 <_free_r+0x90>)
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	b933      	cbnz	r3, 8006430 <_free_r+0x2c>
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	6014      	str	r4, [r2, #0]
 8006426:	4628      	mov	r0, r5
 8006428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800642c:	f000 b8dc 	b.w	80065e8 <__malloc_unlock>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d908      	bls.n	8006446 <_free_r+0x42>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	1821      	adds	r1, r4, r0
 8006438:	428b      	cmp	r3, r1
 800643a:	bf01      	itttt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	1809      	addeq	r1, r1, r0
 8006442:	6021      	streq	r1, [r4, #0]
 8006444:	e7ed      	b.n	8006422 <_free_r+0x1e>
 8006446:	461a      	mov	r2, r3
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	b10b      	cbz	r3, 8006450 <_free_r+0x4c>
 800644c:	42a3      	cmp	r3, r4
 800644e:	d9fa      	bls.n	8006446 <_free_r+0x42>
 8006450:	6811      	ldr	r1, [r2, #0]
 8006452:	1850      	adds	r0, r2, r1
 8006454:	42a0      	cmp	r0, r4
 8006456:	d10b      	bne.n	8006470 <_free_r+0x6c>
 8006458:	6820      	ldr	r0, [r4, #0]
 800645a:	4401      	add	r1, r0
 800645c:	1850      	adds	r0, r2, r1
 800645e:	4283      	cmp	r3, r0
 8006460:	6011      	str	r1, [r2, #0]
 8006462:	d1e0      	bne.n	8006426 <_free_r+0x22>
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6053      	str	r3, [r2, #4]
 800646a:	4408      	add	r0, r1
 800646c:	6010      	str	r0, [r2, #0]
 800646e:	e7da      	b.n	8006426 <_free_r+0x22>
 8006470:	d902      	bls.n	8006478 <_free_r+0x74>
 8006472:	230c      	movs	r3, #12
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	e7d6      	b.n	8006426 <_free_r+0x22>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	1821      	adds	r1, r4, r0
 800647c:	428b      	cmp	r3, r1
 800647e:	bf04      	itt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	bf04      	itt	eq
 8006488:	1809      	addeq	r1, r1, r0
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	6054      	str	r4, [r2, #4]
 800648e:	e7ca      	b.n	8006426 <_free_r+0x22>
 8006490:	bd38      	pop	{r3, r4, r5, pc}
 8006492:	bf00      	nop
 8006494:	24000768 	.word	0x24000768

08006498 <sbrk_aligned>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4e0f      	ldr	r6, [pc, #60]	@ (80064d8 <sbrk_aligned+0x40>)
 800649c:	460c      	mov	r4, r1
 800649e:	6831      	ldr	r1, [r6, #0]
 80064a0:	4605      	mov	r5, r0
 80064a2:	b911      	cbnz	r1, 80064aa <sbrk_aligned+0x12>
 80064a4:	f000 fba6 	bl	8006bf4 <_sbrk_r>
 80064a8:	6030      	str	r0, [r6, #0]
 80064aa:	4621      	mov	r1, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 fba1 	bl	8006bf4 <_sbrk_r>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d103      	bne.n	80064be <sbrk_aligned+0x26>
 80064b6:	f04f 34ff 	mov.w	r4, #4294967295
 80064ba:	4620      	mov	r0, r4
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	1cc4      	adds	r4, r0, #3
 80064c0:	f024 0403 	bic.w	r4, r4, #3
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	d0f8      	beq.n	80064ba <sbrk_aligned+0x22>
 80064c8:	1a21      	subs	r1, r4, r0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fb92 	bl	8006bf4 <_sbrk_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d1f2      	bne.n	80064ba <sbrk_aligned+0x22>
 80064d4:	e7ef      	b.n	80064b6 <sbrk_aligned+0x1e>
 80064d6:	bf00      	nop
 80064d8:	24000764 	.word	0x24000764

080064dc <_malloc_r>:
 80064dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e0:	1ccd      	adds	r5, r1, #3
 80064e2:	f025 0503 	bic.w	r5, r5, #3
 80064e6:	3508      	adds	r5, #8
 80064e8:	2d0c      	cmp	r5, #12
 80064ea:	bf38      	it	cc
 80064ec:	250c      	movcc	r5, #12
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	4606      	mov	r6, r0
 80064f2:	db01      	blt.n	80064f8 <_malloc_r+0x1c>
 80064f4:	42a9      	cmp	r1, r5
 80064f6:	d904      	bls.n	8006502 <_malloc_r+0x26>
 80064f8:	230c      	movs	r3, #12
 80064fa:	6033      	str	r3, [r6, #0]
 80064fc:	2000      	movs	r0, #0
 80064fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065d8 <_malloc_r+0xfc>
 8006506:	f000 f869 	bl	80065dc <__malloc_lock>
 800650a:	f8d8 3000 	ldr.w	r3, [r8]
 800650e:	461c      	mov	r4, r3
 8006510:	bb44      	cbnz	r4, 8006564 <_malloc_r+0x88>
 8006512:	4629      	mov	r1, r5
 8006514:	4630      	mov	r0, r6
 8006516:	f7ff ffbf 	bl	8006498 <sbrk_aligned>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	4604      	mov	r4, r0
 800651e:	d158      	bne.n	80065d2 <_malloc_r+0xf6>
 8006520:	f8d8 4000 	ldr.w	r4, [r8]
 8006524:	4627      	mov	r7, r4
 8006526:	2f00      	cmp	r7, #0
 8006528:	d143      	bne.n	80065b2 <_malloc_r+0xd6>
 800652a:	2c00      	cmp	r4, #0
 800652c:	d04b      	beq.n	80065c6 <_malloc_r+0xea>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	4639      	mov	r1, r7
 8006532:	4630      	mov	r0, r6
 8006534:	eb04 0903 	add.w	r9, r4, r3
 8006538:	f000 fb5c 	bl	8006bf4 <_sbrk_r>
 800653c:	4581      	cmp	r9, r0
 800653e:	d142      	bne.n	80065c6 <_malloc_r+0xea>
 8006540:	6821      	ldr	r1, [r4, #0]
 8006542:	1a6d      	subs	r5, r5, r1
 8006544:	4629      	mov	r1, r5
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ffa6 	bl	8006498 <sbrk_aligned>
 800654c:	3001      	adds	r0, #1
 800654e:	d03a      	beq.n	80065c6 <_malloc_r+0xea>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	442b      	add	r3, r5
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	f8d8 3000 	ldr.w	r3, [r8]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	bb62      	cbnz	r2, 80065b8 <_malloc_r+0xdc>
 800655e:	f8c8 7000 	str.w	r7, [r8]
 8006562:	e00f      	b.n	8006584 <_malloc_r+0xa8>
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	1b52      	subs	r2, r2, r5
 8006568:	d420      	bmi.n	80065ac <_malloc_r+0xd0>
 800656a:	2a0b      	cmp	r2, #11
 800656c:	d917      	bls.n	800659e <_malloc_r+0xc2>
 800656e:	1961      	adds	r1, r4, r5
 8006570:	42a3      	cmp	r3, r4
 8006572:	6025      	str	r5, [r4, #0]
 8006574:	bf18      	it	ne
 8006576:	6059      	strne	r1, [r3, #4]
 8006578:	6863      	ldr	r3, [r4, #4]
 800657a:	bf08      	it	eq
 800657c:	f8c8 1000 	streq.w	r1, [r8]
 8006580:	5162      	str	r2, [r4, r5]
 8006582:	604b      	str	r3, [r1, #4]
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f82f 	bl	80065e8 <__malloc_unlock>
 800658a:	f104 000b 	add.w	r0, r4, #11
 800658e:	1d23      	adds	r3, r4, #4
 8006590:	f020 0007 	bic.w	r0, r0, #7
 8006594:	1ac2      	subs	r2, r0, r3
 8006596:	bf1c      	itt	ne
 8006598:	1a1b      	subne	r3, r3, r0
 800659a:	50a3      	strne	r3, [r4, r2]
 800659c:	e7af      	b.n	80064fe <_malloc_r+0x22>
 800659e:	6862      	ldr	r2, [r4, #4]
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	bf0c      	ite	eq
 80065a4:	f8c8 2000 	streq.w	r2, [r8]
 80065a8:	605a      	strne	r2, [r3, #4]
 80065aa:	e7eb      	b.n	8006584 <_malloc_r+0xa8>
 80065ac:	4623      	mov	r3, r4
 80065ae:	6864      	ldr	r4, [r4, #4]
 80065b0:	e7ae      	b.n	8006510 <_malloc_r+0x34>
 80065b2:	463c      	mov	r4, r7
 80065b4:	687f      	ldr	r7, [r7, #4]
 80065b6:	e7b6      	b.n	8006526 <_malloc_r+0x4a>
 80065b8:	461a      	mov	r2, r3
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d1fb      	bne.n	80065b8 <_malloc_r+0xdc>
 80065c0:	2300      	movs	r3, #0
 80065c2:	6053      	str	r3, [r2, #4]
 80065c4:	e7de      	b.n	8006584 <_malloc_r+0xa8>
 80065c6:	230c      	movs	r3, #12
 80065c8:	6033      	str	r3, [r6, #0]
 80065ca:	4630      	mov	r0, r6
 80065cc:	f000 f80c 	bl	80065e8 <__malloc_unlock>
 80065d0:	e794      	b.n	80064fc <_malloc_r+0x20>
 80065d2:	6005      	str	r5, [r0, #0]
 80065d4:	e7d6      	b.n	8006584 <_malloc_r+0xa8>
 80065d6:	bf00      	nop
 80065d8:	24000768 	.word	0x24000768

080065dc <__malloc_lock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	@ (80065e4 <__malloc_lock+0x8>)
 80065de:	f7ff bf0f 	b.w	8006400 <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	24000760 	.word	0x24000760

080065e8 <__malloc_unlock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__malloc_unlock+0x8>)
 80065ea:	f7ff bf0a 	b.w	8006402 <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	24000760 	.word	0x24000760

080065f4 <__ssputs_r>:
 80065f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f8:	688e      	ldr	r6, [r1, #8]
 80065fa:	461f      	mov	r7, r3
 80065fc:	42be      	cmp	r6, r7
 80065fe:	680b      	ldr	r3, [r1, #0]
 8006600:	4682      	mov	sl, r0
 8006602:	460c      	mov	r4, r1
 8006604:	4690      	mov	r8, r2
 8006606:	d82d      	bhi.n	8006664 <__ssputs_r+0x70>
 8006608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800660c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006610:	d026      	beq.n	8006660 <__ssputs_r+0x6c>
 8006612:	6965      	ldr	r5, [r4, #20]
 8006614:	6909      	ldr	r1, [r1, #16]
 8006616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800661a:	eba3 0901 	sub.w	r9, r3, r1
 800661e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006622:	1c7b      	adds	r3, r7, #1
 8006624:	444b      	add	r3, r9
 8006626:	106d      	asrs	r5, r5, #1
 8006628:	429d      	cmp	r5, r3
 800662a:	bf38      	it	cc
 800662c:	461d      	movcc	r5, r3
 800662e:	0553      	lsls	r3, r2, #21
 8006630:	d527      	bpl.n	8006682 <__ssputs_r+0x8e>
 8006632:	4629      	mov	r1, r5
 8006634:	f7ff ff52 	bl	80064dc <_malloc_r>
 8006638:	4606      	mov	r6, r0
 800663a:	b360      	cbz	r0, 8006696 <__ssputs_r+0xa2>
 800663c:	6921      	ldr	r1, [r4, #16]
 800663e:	464a      	mov	r2, r9
 8006640:	f000 fae8 	bl	8006c14 <memcpy>
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800664a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	6126      	str	r6, [r4, #16]
 8006652:	6165      	str	r5, [r4, #20]
 8006654:	444e      	add	r6, r9
 8006656:	eba5 0509 	sub.w	r5, r5, r9
 800665a:	6026      	str	r6, [r4, #0]
 800665c:	60a5      	str	r5, [r4, #8]
 800665e:	463e      	mov	r6, r7
 8006660:	42be      	cmp	r6, r7
 8006662:	d900      	bls.n	8006666 <__ssputs_r+0x72>
 8006664:	463e      	mov	r6, r7
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	4632      	mov	r2, r6
 800666a:	4641      	mov	r1, r8
 800666c:	f000 faa8 	bl	8006bc0 <memmove>
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	1b9b      	subs	r3, r3, r6
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	4433      	add	r3, r6
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	2000      	movs	r0, #0
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	462a      	mov	r2, r5
 8006684:	f000 fad4 	bl	8006c30 <_realloc_r>
 8006688:	4606      	mov	r6, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d1e0      	bne.n	8006650 <__ssputs_r+0x5c>
 800668e:	6921      	ldr	r1, [r4, #16]
 8006690:	4650      	mov	r0, sl
 8006692:	f7ff feb7 	bl	8006404 <_free_r>
 8006696:	230c      	movs	r3, #12
 8006698:	f8ca 3000 	str.w	r3, [sl]
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	e7e9      	b.n	800667e <__ssputs_r+0x8a>
	...

080066ac <_svfiprintf_r>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	4698      	mov	r8, r3
 80066b2:	898b      	ldrh	r3, [r1, #12]
 80066b4:	061b      	lsls	r3, r3, #24
 80066b6:	b09d      	sub	sp, #116	@ 0x74
 80066b8:	4607      	mov	r7, r0
 80066ba:	460d      	mov	r5, r1
 80066bc:	4614      	mov	r4, r2
 80066be:	d510      	bpl.n	80066e2 <_svfiprintf_r+0x36>
 80066c0:	690b      	ldr	r3, [r1, #16]
 80066c2:	b973      	cbnz	r3, 80066e2 <_svfiprintf_r+0x36>
 80066c4:	2140      	movs	r1, #64	@ 0x40
 80066c6:	f7ff ff09 	bl	80064dc <_malloc_r>
 80066ca:	6028      	str	r0, [r5, #0]
 80066cc:	6128      	str	r0, [r5, #16]
 80066ce:	b930      	cbnz	r0, 80066de <_svfiprintf_r+0x32>
 80066d0:	230c      	movs	r3, #12
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	b01d      	add	sp, #116	@ 0x74
 80066da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066de:	2340      	movs	r3, #64	@ 0x40
 80066e0:	616b      	str	r3, [r5, #20]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e6:	2320      	movs	r3, #32
 80066e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80066f0:	2330      	movs	r3, #48	@ 0x30
 80066f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006890 <_svfiprintf_r+0x1e4>
 80066f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066fa:	f04f 0901 	mov.w	r9, #1
 80066fe:	4623      	mov	r3, r4
 8006700:	469a      	mov	sl, r3
 8006702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006706:	b10a      	cbz	r2, 800670c <_svfiprintf_r+0x60>
 8006708:	2a25      	cmp	r2, #37	@ 0x25
 800670a:	d1f9      	bne.n	8006700 <_svfiprintf_r+0x54>
 800670c:	ebba 0b04 	subs.w	fp, sl, r4
 8006710:	d00b      	beq.n	800672a <_svfiprintf_r+0x7e>
 8006712:	465b      	mov	r3, fp
 8006714:	4622      	mov	r2, r4
 8006716:	4629      	mov	r1, r5
 8006718:	4638      	mov	r0, r7
 800671a:	f7ff ff6b 	bl	80065f4 <__ssputs_r>
 800671e:	3001      	adds	r0, #1
 8006720:	f000 80a7 	beq.w	8006872 <_svfiprintf_r+0x1c6>
 8006724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006726:	445a      	add	r2, fp
 8006728:	9209      	str	r2, [sp, #36]	@ 0x24
 800672a:	f89a 3000 	ldrb.w	r3, [sl]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 809f 	beq.w	8006872 <_svfiprintf_r+0x1c6>
 8006734:	2300      	movs	r3, #0
 8006736:	f04f 32ff 	mov.w	r2, #4294967295
 800673a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800673e:	f10a 0a01 	add.w	sl, sl, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	9307      	str	r3, [sp, #28]
 8006746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800674a:	931a      	str	r3, [sp, #104]	@ 0x68
 800674c:	4654      	mov	r4, sl
 800674e:	2205      	movs	r2, #5
 8006750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006754:	484e      	ldr	r0, [pc, #312]	@ (8006890 <_svfiprintf_r+0x1e4>)
 8006756:	f7f9 fdcb 	bl	80002f0 <memchr>
 800675a:	9a04      	ldr	r2, [sp, #16]
 800675c:	b9d8      	cbnz	r0, 8006796 <_svfiprintf_r+0xea>
 800675e:	06d0      	lsls	r0, r2, #27
 8006760:	bf44      	itt	mi
 8006762:	2320      	movmi	r3, #32
 8006764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006768:	0711      	lsls	r1, r2, #28
 800676a:	bf44      	itt	mi
 800676c:	232b      	movmi	r3, #43	@ 0x2b
 800676e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006772:	f89a 3000 	ldrb.w	r3, [sl]
 8006776:	2b2a      	cmp	r3, #42	@ 0x2a
 8006778:	d015      	beq.n	80067a6 <_svfiprintf_r+0xfa>
 800677a:	9a07      	ldr	r2, [sp, #28]
 800677c:	4654      	mov	r4, sl
 800677e:	2000      	movs	r0, #0
 8006780:	f04f 0c0a 	mov.w	ip, #10
 8006784:	4621      	mov	r1, r4
 8006786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800678a:	3b30      	subs	r3, #48	@ 0x30
 800678c:	2b09      	cmp	r3, #9
 800678e:	d94b      	bls.n	8006828 <_svfiprintf_r+0x17c>
 8006790:	b1b0      	cbz	r0, 80067c0 <_svfiprintf_r+0x114>
 8006792:	9207      	str	r2, [sp, #28]
 8006794:	e014      	b.n	80067c0 <_svfiprintf_r+0x114>
 8006796:	eba0 0308 	sub.w	r3, r0, r8
 800679a:	fa09 f303 	lsl.w	r3, r9, r3
 800679e:	4313      	orrs	r3, r2
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	46a2      	mov	sl, r4
 80067a4:	e7d2      	b.n	800674c <_svfiprintf_r+0xa0>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	1d19      	adds	r1, r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	9103      	str	r1, [sp, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfbb      	ittet	lt
 80067b2:	425b      	neglt	r3, r3
 80067b4:	f042 0202 	orrlt.w	r2, r2, #2
 80067b8:	9307      	strge	r3, [sp, #28]
 80067ba:	9307      	strlt	r3, [sp, #28]
 80067bc:	bfb8      	it	lt
 80067be:	9204      	strlt	r2, [sp, #16]
 80067c0:	7823      	ldrb	r3, [r4, #0]
 80067c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80067c4:	d10a      	bne.n	80067dc <_svfiprintf_r+0x130>
 80067c6:	7863      	ldrb	r3, [r4, #1]
 80067c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067ca:	d132      	bne.n	8006832 <_svfiprintf_r+0x186>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	1d1a      	adds	r2, r3, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	9203      	str	r2, [sp, #12]
 80067d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067d8:	3402      	adds	r4, #2
 80067da:	9305      	str	r3, [sp, #20]
 80067dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80068a0 <_svfiprintf_r+0x1f4>
 80067e0:	7821      	ldrb	r1, [r4, #0]
 80067e2:	2203      	movs	r2, #3
 80067e4:	4650      	mov	r0, sl
 80067e6:	f7f9 fd83 	bl	80002f0 <memchr>
 80067ea:	b138      	cbz	r0, 80067fc <_svfiprintf_r+0x150>
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	eba0 000a 	sub.w	r0, r0, sl
 80067f2:	2240      	movs	r2, #64	@ 0x40
 80067f4:	4082      	lsls	r2, r0
 80067f6:	4313      	orrs	r3, r2
 80067f8:	3401      	adds	r4, #1
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006800:	4824      	ldr	r0, [pc, #144]	@ (8006894 <_svfiprintf_r+0x1e8>)
 8006802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006806:	2206      	movs	r2, #6
 8006808:	f7f9 fd72 	bl	80002f0 <memchr>
 800680c:	2800      	cmp	r0, #0
 800680e:	d036      	beq.n	800687e <_svfiprintf_r+0x1d2>
 8006810:	4b21      	ldr	r3, [pc, #132]	@ (8006898 <_svfiprintf_r+0x1ec>)
 8006812:	bb1b      	cbnz	r3, 800685c <_svfiprintf_r+0x1b0>
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	3307      	adds	r3, #7
 8006818:	f023 0307 	bic.w	r3, r3, #7
 800681c:	3308      	adds	r3, #8
 800681e:	9303      	str	r3, [sp, #12]
 8006820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006822:	4433      	add	r3, r6
 8006824:	9309      	str	r3, [sp, #36]	@ 0x24
 8006826:	e76a      	b.n	80066fe <_svfiprintf_r+0x52>
 8006828:	fb0c 3202 	mla	r2, ip, r2, r3
 800682c:	460c      	mov	r4, r1
 800682e:	2001      	movs	r0, #1
 8006830:	e7a8      	b.n	8006784 <_svfiprintf_r+0xd8>
 8006832:	2300      	movs	r3, #0
 8006834:	3401      	adds	r4, #1
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	4619      	mov	r1, r3
 800683a:	f04f 0c0a 	mov.w	ip, #10
 800683e:	4620      	mov	r0, r4
 8006840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006844:	3a30      	subs	r2, #48	@ 0x30
 8006846:	2a09      	cmp	r2, #9
 8006848:	d903      	bls.n	8006852 <_svfiprintf_r+0x1a6>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0c6      	beq.n	80067dc <_svfiprintf_r+0x130>
 800684e:	9105      	str	r1, [sp, #20]
 8006850:	e7c4      	b.n	80067dc <_svfiprintf_r+0x130>
 8006852:	fb0c 2101 	mla	r1, ip, r1, r2
 8006856:	4604      	mov	r4, r0
 8006858:	2301      	movs	r3, #1
 800685a:	e7f0      	b.n	800683e <_svfiprintf_r+0x192>
 800685c:	ab03      	add	r3, sp, #12
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	462a      	mov	r2, r5
 8006862:	4b0e      	ldr	r3, [pc, #56]	@ (800689c <_svfiprintf_r+0x1f0>)
 8006864:	a904      	add	r1, sp, #16
 8006866:	4638      	mov	r0, r7
 8006868:	f3af 8000 	nop.w
 800686c:	1c42      	adds	r2, r0, #1
 800686e:	4606      	mov	r6, r0
 8006870:	d1d6      	bne.n	8006820 <_svfiprintf_r+0x174>
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	065b      	lsls	r3, r3, #25
 8006876:	f53f af2d 	bmi.w	80066d4 <_svfiprintf_r+0x28>
 800687a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800687c:	e72c      	b.n	80066d8 <_svfiprintf_r+0x2c>
 800687e:	ab03      	add	r3, sp, #12
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	462a      	mov	r2, r5
 8006884:	4b05      	ldr	r3, [pc, #20]	@ (800689c <_svfiprintf_r+0x1f0>)
 8006886:	a904      	add	r1, sp, #16
 8006888:	4638      	mov	r0, r7
 800688a:	f000 f879 	bl	8006980 <_printf_i>
 800688e:	e7ed      	b.n	800686c <_svfiprintf_r+0x1c0>
 8006890:	08006d44 	.word	0x08006d44
 8006894:	08006d4e 	.word	0x08006d4e
 8006898:	00000000 	.word	0x00000000
 800689c:	080065f5 	.word	0x080065f5
 80068a0:	08006d4a 	.word	0x08006d4a

080068a4 <_printf_common>:
 80068a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	4616      	mov	r6, r2
 80068aa:	4698      	mov	r8, r3
 80068ac:	688a      	ldr	r2, [r1, #8]
 80068ae:	690b      	ldr	r3, [r1, #16]
 80068b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	bfb8      	it	lt
 80068b8:	4613      	movlt	r3, r2
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068c0:	4607      	mov	r7, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b10a      	cbz	r2, 80068ca <_printf_common+0x26>
 80068c6:	3301      	adds	r3, #1
 80068c8:	6033      	str	r3, [r6, #0]
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	0699      	lsls	r1, r3, #26
 80068ce:	bf42      	ittt	mi
 80068d0:	6833      	ldrmi	r3, [r6, #0]
 80068d2:	3302      	addmi	r3, #2
 80068d4:	6033      	strmi	r3, [r6, #0]
 80068d6:	6825      	ldr	r5, [r4, #0]
 80068d8:	f015 0506 	ands.w	r5, r5, #6
 80068dc:	d106      	bne.n	80068ec <_printf_common+0x48>
 80068de:	f104 0a19 	add.w	sl, r4, #25
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	6832      	ldr	r2, [r6, #0]
 80068e6:	1a9b      	subs	r3, r3, r2
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	dc26      	bgt.n	800693a <_printf_common+0x96>
 80068ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	3b00      	subs	r3, #0
 80068f4:	bf18      	it	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	0692      	lsls	r2, r2, #26
 80068fa:	d42b      	bmi.n	8006954 <_printf_common+0xb0>
 80068fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006900:	4641      	mov	r1, r8
 8006902:	4638      	mov	r0, r7
 8006904:	47c8      	blx	r9
 8006906:	3001      	adds	r0, #1
 8006908:	d01e      	beq.n	8006948 <_printf_common+0xa4>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	6922      	ldr	r2, [r4, #16]
 800690e:	f003 0306 	and.w	r3, r3, #6
 8006912:	2b04      	cmp	r3, #4
 8006914:	bf02      	ittt	eq
 8006916:	68e5      	ldreq	r5, [r4, #12]
 8006918:	6833      	ldreq	r3, [r6, #0]
 800691a:	1aed      	subeq	r5, r5, r3
 800691c:	68a3      	ldr	r3, [r4, #8]
 800691e:	bf0c      	ite	eq
 8006920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006924:	2500      	movne	r5, #0
 8006926:	4293      	cmp	r3, r2
 8006928:	bfc4      	itt	gt
 800692a:	1a9b      	subgt	r3, r3, r2
 800692c:	18ed      	addgt	r5, r5, r3
 800692e:	2600      	movs	r6, #0
 8006930:	341a      	adds	r4, #26
 8006932:	42b5      	cmp	r5, r6
 8006934:	d11a      	bne.n	800696c <_printf_common+0xc8>
 8006936:	2000      	movs	r0, #0
 8006938:	e008      	b.n	800694c <_printf_common+0xa8>
 800693a:	2301      	movs	r3, #1
 800693c:	4652      	mov	r2, sl
 800693e:	4641      	mov	r1, r8
 8006940:	4638      	mov	r0, r7
 8006942:	47c8      	blx	r9
 8006944:	3001      	adds	r0, #1
 8006946:	d103      	bne.n	8006950 <_printf_common+0xac>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006950:	3501      	adds	r5, #1
 8006952:	e7c6      	b.n	80068e2 <_printf_common+0x3e>
 8006954:	18e1      	adds	r1, r4, r3
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	2030      	movs	r0, #48	@ 0x30
 800695a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800695e:	4422      	add	r2, r4
 8006960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006968:	3302      	adds	r3, #2
 800696a:	e7c7      	b.n	80068fc <_printf_common+0x58>
 800696c:	2301      	movs	r3, #1
 800696e:	4622      	mov	r2, r4
 8006970:	4641      	mov	r1, r8
 8006972:	4638      	mov	r0, r7
 8006974:	47c8      	blx	r9
 8006976:	3001      	adds	r0, #1
 8006978:	d0e6      	beq.n	8006948 <_printf_common+0xa4>
 800697a:	3601      	adds	r6, #1
 800697c:	e7d9      	b.n	8006932 <_printf_common+0x8e>
	...

08006980 <_printf_i>:
 8006980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	7e0f      	ldrb	r7, [r1, #24]
 8006986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006988:	2f78      	cmp	r7, #120	@ 0x78
 800698a:	4691      	mov	r9, r2
 800698c:	4680      	mov	r8, r0
 800698e:	460c      	mov	r4, r1
 8006990:	469a      	mov	sl, r3
 8006992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006996:	d807      	bhi.n	80069a8 <_printf_i+0x28>
 8006998:	2f62      	cmp	r7, #98	@ 0x62
 800699a:	d80a      	bhi.n	80069b2 <_printf_i+0x32>
 800699c:	2f00      	cmp	r7, #0
 800699e:	f000 80d2 	beq.w	8006b46 <_printf_i+0x1c6>
 80069a2:	2f58      	cmp	r7, #88	@ 0x58
 80069a4:	f000 80b9 	beq.w	8006b1a <_printf_i+0x19a>
 80069a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069b0:	e03a      	b.n	8006a28 <_printf_i+0xa8>
 80069b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069b6:	2b15      	cmp	r3, #21
 80069b8:	d8f6      	bhi.n	80069a8 <_printf_i+0x28>
 80069ba:	a101      	add	r1, pc, #4	@ (adr r1, 80069c0 <_printf_i+0x40>)
 80069bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a2d 	.word	0x08006a2d
 80069c8:	080069a9 	.word	0x080069a9
 80069cc:	080069a9 	.word	0x080069a9
 80069d0:	080069a9 	.word	0x080069a9
 80069d4:	080069a9 	.word	0x080069a9
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	080069a9 	.word	0x080069a9
 80069e0:	080069a9 	.word	0x080069a9
 80069e4:	080069a9 	.word	0x080069a9
 80069e8:	080069a9 	.word	0x080069a9
 80069ec:	08006b2d 	.word	0x08006b2d
 80069f0:	08006a57 	.word	0x08006a57
 80069f4:	08006ae7 	.word	0x08006ae7
 80069f8:	080069a9 	.word	0x080069a9
 80069fc:	080069a9 	.word	0x080069a9
 8006a00:	08006b4f 	.word	0x08006b4f
 8006a04:	080069a9 	.word	0x080069a9
 8006a08:	08006a57 	.word	0x08006a57
 8006a0c:	080069a9 	.word	0x080069a9
 8006a10:	080069a9 	.word	0x080069a9
 8006a14:	08006aef 	.word	0x08006aef
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6032      	str	r2, [r6, #0]
 8006a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e09d      	b.n	8006b68 <_printf_i+0x1e8>
 8006a2c:	6833      	ldr	r3, [r6, #0]
 8006a2e:	6820      	ldr	r0, [r4, #0]
 8006a30:	1d19      	adds	r1, r3, #4
 8006a32:	6031      	str	r1, [r6, #0]
 8006a34:	0606      	lsls	r6, r0, #24
 8006a36:	d501      	bpl.n	8006a3c <_printf_i+0xbc>
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	e003      	b.n	8006a44 <_printf_i+0xc4>
 8006a3c:	0645      	lsls	r5, r0, #25
 8006a3e:	d5fb      	bpl.n	8006a38 <_printf_i+0xb8>
 8006a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a44:	2d00      	cmp	r5, #0
 8006a46:	da03      	bge.n	8006a50 <_printf_i+0xd0>
 8006a48:	232d      	movs	r3, #45	@ 0x2d
 8006a4a:	426d      	negs	r5, r5
 8006a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a50:	4859      	ldr	r0, [pc, #356]	@ (8006bb8 <_printf_i+0x238>)
 8006a52:	230a      	movs	r3, #10
 8006a54:	e011      	b.n	8006a7a <_printf_i+0xfa>
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	0608      	lsls	r0, r1, #24
 8006a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a60:	d402      	bmi.n	8006a68 <_printf_i+0xe8>
 8006a62:	0649      	lsls	r1, r1, #25
 8006a64:	bf48      	it	mi
 8006a66:	b2ad      	uxthmi	r5, r5
 8006a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a6a:	4853      	ldr	r0, [pc, #332]	@ (8006bb8 <_printf_i+0x238>)
 8006a6c:	6033      	str	r3, [r6, #0]
 8006a6e:	bf14      	ite	ne
 8006a70:	230a      	movne	r3, #10
 8006a72:	2308      	moveq	r3, #8
 8006a74:	2100      	movs	r1, #0
 8006a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a7a:	6866      	ldr	r6, [r4, #4]
 8006a7c:	60a6      	str	r6, [r4, #8]
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	bfa2      	ittt	ge
 8006a82:	6821      	ldrge	r1, [r4, #0]
 8006a84:	f021 0104 	bicge.w	r1, r1, #4
 8006a88:	6021      	strge	r1, [r4, #0]
 8006a8a:	b90d      	cbnz	r5, 8006a90 <_printf_i+0x110>
 8006a8c:	2e00      	cmp	r6, #0
 8006a8e:	d04b      	beq.n	8006b28 <_printf_i+0x1a8>
 8006a90:	4616      	mov	r6, r2
 8006a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a96:	fb03 5711 	mls	r7, r3, r1, r5
 8006a9a:	5dc7      	ldrb	r7, [r0, r7]
 8006a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aa0:	462f      	mov	r7, r5
 8006aa2:	42bb      	cmp	r3, r7
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	d9f4      	bls.n	8006a92 <_printf_i+0x112>
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d10b      	bne.n	8006ac4 <_printf_i+0x144>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	07df      	lsls	r7, r3, #31
 8006ab0:	d508      	bpl.n	8006ac4 <_printf_i+0x144>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6861      	ldr	r1, [r4, #4]
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	bfde      	ittt	le
 8006aba:	2330      	movle	r3, #48	@ 0x30
 8006abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ac4:	1b92      	subs	r2, r2, r6
 8006ac6:	6122      	str	r2, [r4, #16]
 8006ac8:	f8cd a000 	str.w	sl, [sp]
 8006acc:	464b      	mov	r3, r9
 8006ace:	aa03      	add	r2, sp, #12
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	f7ff fee6 	bl	80068a4 <_printf_common>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d14a      	bne.n	8006b72 <_printf_i+0x1f2>
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	b004      	add	sp, #16
 8006ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	f043 0320 	orr.w	r3, r3, #32
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	4833      	ldr	r0, [pc, #204]	@ (8006bbc <_printf_i+0x23c>)
 8006af0:	2778      	movs	r7, #120	@ 0x78
 8006af2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	6831      	ldr	r1, [r6, #0]
 8006afa:	061f      	lsls	r7, r3, #24
 8006afc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b00:	d402      	bmi.n	8006b08 <_printf_i+0x188>
 8006b02:	065f      	lsls	r7, r3, #25
 8006b04:	bf48      	it	mi
 8006b06:	b2ad      	uxthmi	r5, r5
 8006b08:	6031      	str	r1, [r6, #0]
 8006b0a:	07d9      	lsls	r1, r3, #31
 8006b0c:	bf44      	itt	mi
 8006b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b12:	6023      	strmi	r3, [r4, #0]
 8006b14:	b11d      	cbz	r5, 8006b1e <_printf_i+0x19e>
 8006b16:	2310      	movs	r3, #16
 8006b18:	e7ac      	b.n	8006a74 <_printf_i+0xf4>
 8006b1a:	4827      	ldr	r0, [pc, #156]	@ (8006bb8 <_printf_i+0x238>)
 8006b1c:	e7e9      	b.n	8006af2 <_printf_i+0x172>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f023 0320 	bic.w	r3, r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	e7f6      	b.n	8006b16 <_printf_i+0x196>
 8006b28:	4616      	mov	r6, r2
 8006b2a:	e7bd      	b.n	8006aa8 <_printf_i+0x128>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	6825      	ldr	r5, [r4, #0]
 8006b30:	6961      	ldr	r1, [r4, #20]
 8006b32:	1d18      	adds	r0, r3, #4
 8006b34:	6030      	str	r0, [r6, #0]
 8006b36:	062e      	lsls	r6, r5, #24
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	d501      	bpl.n	8006b40 <_printf_i+0x1c0>
 8006b3c:	6019      	str	r1, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <_printf_i+0x1c6>
 8006b40:	0668      	lsls	r0, r5, #25
 8006b42:	d5fb      	bpl.n	8006b3c <_printf_i+0x1bc>
 8006b44:	8019      	strh	r1, [r3, #0]
 8006b46:	2300      	movs	r3, #0
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	4616      	mov	r6, r2
 8006b4c:	e7bc      	b.n	8006ac8 <_printf_i+0x148>
 8006b4e:	6833      	ldr	r3, [r6, #0]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	6032      	str	r2, [r6, #0]
 8006b54:	681e      	ldr	r6, [r3, #0]
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7f9 fbc8 	bl	80002f0 <memchr>
 8006b60:	b108      	cbz	r0, 8006b66 <_printf_i+0x1e6>
 8006b62:	1b80      	subs	r0, r0, r6
 8006b64:	6060      	str	r0, [r4, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b70:	e7aa      	b.n	8006ac8 <_printf_i+0x148>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d0ad      	beq.n	8006adc <_printf_i+0x15c>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	079b      	lsls	r3, r3, #30
 8006b84:	d413      	bmi.n	8006bae <_printf_i+0x22e>
 8006b86:	68e0      	ldr	r0, [r4, #12]
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	bfb8      	it	lt
 8006b8e:	4618      	movlt	r0, r3
 8006b90:	e7a6      	b.n	8006ae0 <_printf_i+0x160>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4632      	mov	r2, r6
 8006b96:	4649      	mov	r1, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	47d0      	blx	sl
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d09d      	beq.n	8006adc <_printf_i+0x15c>
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	9903      	ldr	r1, [sp, #12]
 8006ba6:	1a5b      	subs	r3, r3, r1
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dcf2      	bgt.n	8006b92 <_printf_i+0x212>
 8006bac:	e7eb      	b.n	8006b86 <_printf_i+0x206>
 8006bae:	2500      	movs	r5, #0
 8006bb0:	f104 0619 	add.w	r6, r4, #25
 8006bb4:	e7f5      	b.n	8006ba2 <_printf_i+0x222>
 8006bb6:	bf00      	nop
 8006bb8:	08006d55 	.word	0x08006d55
 8006bbc:	08006d66 	.word	0x08006d66

08006bc0 <memmove>:
 8006bc0:	4288      	cmp	r0, r1
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	eb01 0402 	add.w	r4, r1, r2
 8006bc8:	d902      	bls.n	8006bd0 <memmove+0x10>
 8006bca:	4284      	cmp	r4, r0
 8006bcc:	4623      	mov	r3, r4
 8006bce:	d807      	bhi.n	8006be0 <memmove+0x20>
 8006bd0:	1e43      	subs	r3, r0, #1
 8006bd2:	42a1      	cmp	r1, r4
 8006bd4:	d008      	beq.n	8006be8 <memmove+0x28>
 8006bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bde:	e7f8      	b.n	8006bd2 <memmove+0x12>
 8006be0:	4402      	add	r2, r0
 8006be2:	4601      	mov	r1, r0
 8006be4:	428a      	cmp	r2, r1
 8006be6:	d100      	bne.n	8006bea <memmove+0x2a>
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bf2:	e7f7      	b.n	8006be4 <memmove+0x24>

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4d06      	ldr	r5, [pc, #24]	@ (8006c10 <_sbrk_r+0x1c>)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fa f8f4 	bl	8000dec <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	2400075c 	.word	0x2400075c

08006c14 <memcpy>:
 8006c14:	440a      	add	r2, r1
 8006c16:	4291      	cmp	r1, r2
 8006c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c1c:	d100      	bne.n	8006c20 <memcpy+0xc>
 8006c1e:	4770      	bx	lr
 8006c20:	b510      	push	{r4, lr}
 8006c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2a:	4291      	cmp	r1, r2
 8006c2c:	d1f9      	bne.n	8006c22 <memcpy+0xe>
 8006c2e:	bd10      	pop	{r4, pc}

08006c30 <_realloc_r>:
 8006c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c34:	4680      	mov	r8, r0
 8006c36:	4615      	mov	r5, r2
 8006c38:	460c      	mov	r4, r1
 8006c3a:	b921      	cbnz	r1, 8006c46 <_realloc_r+0x16>
 8006c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	4611      	mov	r1, r2
 8006c42:	f7ff bc4b 	b.w	80064dc <_malloc_r>
 8006c46:	b92a      	cbnz	r2, 8006c54 <_realloc_r+0x24>
 8006c48:	f7ff fbdc 	bl	8006404 <_free_r>
 8006c4c:	2400      	movs	r4, #0
 8006c4e:	4620      	mov	r0, r4
 8006c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c54:	f000 f81a 	bl	8006c8c <_malloc_usable_size_r>
 8006c58:	4285      	cmp	r5, r0
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	d802      	bhi.n	8006c64 <_realloc_r+0x34>
 8006c5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c62:	d8f4      	bhi.n	8006c4e <_realloc_r+0x1e>
 8006c64:	4629      	mov	r1, r5
 8006c66:	4640      	mov	r0, r8
 8006c68:	f7ff fc38 	bl	80064dc <_malloc_r>
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d0ec      	beq.n	8006c4c <_realloc_r+0x1c>
 8006c72:	42b5      	cmp	r5, r6
 8006c74:	462a      	mov	r2, r5
 8006c76:	4621      	mov	r1, r4
 8006c78:	bf28      	it	cs
 8006c7a:	4632      	movcs	r2, r6
 8006c7c:	f7ff ffca 	bl	8006c14 <memcpy>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4640      	mov	r0, r8
 8006c84:	f7ff fbbe 	bl	8006404 <_free_r>
 8006c88:	463c      	mov	r4, r7
 8006c8a:	e7e0      	b.n	8006c4e <_realloc_r+0x1e>

08006c8c <_malloc_usable_size_r>:
 8006c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c90:	1f18      	subs	r0, r3, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bfbc      	itt	lt
 8006c96:	580b      	ldrlt	r3, [r1, r0]
 8006c98:	18c0      	addlt	r0, r0, r3
 8006c9a:	4770      	bx	lr

08006c9c <_init>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr

08006ca8 <_fini>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr
