
BluetoothSpeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006bb4  08006bb4  00007bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c78  08006c78  00007c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c80  08006c80  00007c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c84  08006c84  00007c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  24000000  08006c88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f0  24000080  08006d08  00008080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000770  08006d08  00008770  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000150e8  00000000  00000000  000080ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dec  00000000  00000000  0001d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e28  00000000  00000000  0001ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000acb  00000000  00000000  00020db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037810  00000000  00000000  0002187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014af8  00000000  00000000  0005908b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a835  00000000  00000000  0006db83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c83b8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f14  00000000  00000000  001c83fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001cc310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006b9c 	.word	0x08006b9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08006b9c 	.word	0x08006b9c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b37      	ldr	r3, [pc, #220]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a35      	ldr	r2, [pc, #212]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a2e      	ldr	r2, [pc, #184]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071e:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_GPIO_Init+0xf4>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000750:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4814      	ldr	r0, [pc, #80]	@ (80007b4 <MX_GPIO_Init+0xf8>)
 8000762:	f000 ff81 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000766:	f248 0360 	movw	r3, #32864	@ 0x8060
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480f      	ldr	r0, [pc, #60]	@ (80007b8 <MX_GPIO_Init+0xfc>)
 800077c:	f000 ff74 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	480a      	ldr	r0, [pc, #40]	@ (80007bc <MX_GPIO_Init+0x100>)
 8000794:	f000 ff68 	bl	8001668 <HAL_GPIO_Init>



/* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2102      	movs	r1, #2
 800079c:	2028      	movs	r0, #40	@ 0x28
 800079e:	f000 feb6 	bl	800150e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a2:	2028      	movs	r0, #40	@ 0x28
 80007a4:	f000 fecd 	bl	8001542 <HAL_NVIC_EnableIRQ>
/* USER CODE END 2 */
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58020800 	.word	0x58020800
 80007b8:	58020000 	.word	0x58020000
 80007bc:	58020400 	.word	0x58020400

080007c0 <InputOutputPinAssignment>:

/*InputOutputPinAssignment: Will change target pin to either an input if the m18 task is complete
 * or an output to properly execute m18 task.
 *
 */
void InputOutputPinAssignment(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = m18StatePtr->activePin.pin;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <InputOutputPinAssignment+0x54>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
	if (m18StatePtr->m18InProcess){
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <InputOutputPinAssignment+0x54>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <InputOutputPinAssignment+0x32>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	e003      	b.n	80007fa <InputOutputPinAssignment+0x3a>

	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	}
	HAL_GPIO_Init(m18StatePtr->activePin.port, &GPIO_InitStruct);
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <InputOutputPinAssignment+0x54>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f000 ff2f 	bl	8001668 <HAL_GPIO_Init>


}/*m18TaskTrigger: Changes the GPIO pin to an output then set pin to low to start the m18 function call process
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	24000010 	.word	0x24000010

08000818 <m18TaskTrigger>:
and track the time of the trigger to be used to bring the pin high after a delay.
*
*/
void m18TaskTrigger(void){
 8000818:	b598      	push	{r3, r4, r7, lr}
 800081a:	af00      	add	r7, sp, #0
	InputOutputPinAssignment();
 800081c:	f7ff ffd0 	bl	80007c0 <InputOutputPinAssignment>
	HAL_GPIO_WritePin(m18StatePtr->activePin.port,m18StatePtr->activePin.pin,GPIO_PIN_RESET);
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <m18TaskTrigger+0x38>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6898      	ldr	r0, [r3, #8]
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <m18TaskTrigger+0x38>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	b29b      	uxth	r3, r3
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f001 f8e1 	bl	80019f8 <HAL_GPIO_WritePin>
	m18StatePtr->m18InProcess = true;
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <m18TaskTrigger+0x38>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
	m18StatePtr->m18StartTime = HAL_GetTick();
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <m18TaskTrigger+0x38>)
 8000840:	681c      	ldr	r4, [r3, #0]
 8000842:	f000 fd4d 	bl	80012e0 <HAL_GetTick>
 8000846:	4603      	mov	r3, r0
 8000848:	6023      	str	r3, [r4, #0]
}
 800084a:	bf00      	nop
 800084c:	bd98      	pop	{r3, r4, r7, pc}
 800084e:	bf00      	nop
 8000850:	24000010 	.word	0x24000010

08000854 <m18TaskCompletionCheck>:
/*m18TaskCompletionCheck: Called in a non idle state and will debounce if m18 task isnt in process.
 * After required delay the pin is set back to high ending m18 call and finish logic to complete m18 call process.
 *
 */
uint8_t m18TaskCompletionCheck(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if (!m18StatePtr->m18InProcess){
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <m18TaskCompletionCheck+0x54>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f083 0301 	eor.w	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <m18TaskCompletionCheck+0x1a>
		return M18_NO_TASK_IN_PROCESS;
 800086a:	2300      	movs	r3, #0
 800086c:	e019      	b.n	80008a2 <m18TaskCompletionCheck+0x4e>

	}
	if (HAL_GetTick()-M18_DELAY_MS){
 800086e:	f000 fd37 	bl	80012e0 <HAL_GetTick>
 8000872:	4603      	mov	r3, r0
 8000874:	2232      	movs	r2, #50	@ 0x32
 8000876:	4293      	cmp	r3, r2
 8000878:	d012      	beq.n	80008a0 <m18TaskCompletionCheck+0x4c>
		HAL_GPIO_WritePin(m18StatePtr->activePin.port, m18StatePtr->activePin.pin,GPIO_PIN_SET);
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <m18TaskCompletionCheck+0x54>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6898      	ldr	r0, [r3, #8]
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <m18TaskCompletionCheck+0x54>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	b29b      	uxth	r3, r3
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	f001 f8b4 	bl	80019f8 <HAL_GPIO_WritePin>
		InputOutputPinAssignment();
 8000890:	f7ff ff96 	bl	80007c0 <InputOutputPinAssignment>
		m18StatePtr->m18InProcess = false;
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <m18TaskCompletionCheck+0x54>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	711a      	strb	r2, [r3, #4]
		return M18_TASK_COMPLETE;
 800089c:	2300      	movs	r3, #0
 800089e:	e000      	b.n	80008a2 <m18TaskCompletionCheck+0x4e>
	}
	 return M18_TASK_INCOMPLETE;
 80008a0:	23ff      	movs	r3, #255	@ 0xff

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000010 	.word	0x24000010

080008ac <m18Call>:
/*
 * m18Call will either debounce if m18 process is active
 * or will start a m18 function call depending on passed state
 *
 */
uint8_t m18Call(inputState currentState){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	if (m18StatePtr->m18InProcess){
 80008b6:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <m18Call+0x94>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <m18Call+0x1a>
		return M18_CALL_DENIED;
 80008c2:	23ff      	movs	r3, #255	@ 0xff
 80008c4:	e037      	b.n	8000936 <m18Call+0x8a>
	}
	switch(currentState){
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d82e      	bhi.n	800092c <m18Call+0x80>
 80008ce:	a201      	add	r2, pc, #4	@ (adr r2, 80008d4 <m18Call+0x28>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	080008e5 	.word	0x080008e5
 80008d8:	080008f7 	.word	0x080008f7
 80008dc:	08000909 	.word	0x08000909
 80008e0:	0800091b 	.word	0x0800091b
		case STATE_PAUSE_PLAY:
			m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, PAUSE_PLAY_PIN};
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <m18Call+0x94>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <m18Call+0x98>)
 80008ea:	3308      	adds	r3, #8
 80008ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80008f4:	e01c      	b.n	8000930 <m18Call+0x84>
		case STATE_PREV_TRACK:
			m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, PREV_TRACK_PIN};
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <m18Call+0x94>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <m18Call+0x9c>)
 80008fc:	3308      	adds	r3, #8
 80008fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000902:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000906:	e013      	b.n	8000930 <m18Call+0x84>
		case STATE_NEXT_TRACK:
			m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, NEXT_TRACK_PIN};
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <m18Call+0x94>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <m18Call+0xa0>)
 800090e:	3308      	adds	r3, #8
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000918:	e00a      	b.n	8000930 <m18Call+0x84>
		case STATE_POWER_OFF_ON:
			m18StatePtr->activePin = (PinConfig){M18_POWER_PORT, M18_POWER_PIN};
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <m18Call+0x94>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a0c      	ldr	r2, [pc, #48]	@ (8000950 <m18Call+0xa4>)
 8000920:	3308      	adds	r3, #8
 8000922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000926:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 800092a:	e001      	b.n	8000930 <m18Call+0x84>
		default:
			return M18_CALL_INVALID;
 800092c:	23fe      	movs	r3, #254	@ 0xfe
 800092e:	e002      	b.n	8000936 <m18Call+0x8a>
	}
	m18TaskTrigger();
 8000930:	f7ff ff72 	bl	8000818 <m18TaskTrigger>
	return M18_CALL_SUCCESS;
 8000934:	2300      	movs	r3, #0

}
 8000936:	4618      	mov	r0, r3
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000010 	.word	0x24000010
 8000944:	08006bb4 	.word	0x08006bb4
 8000948:	08006bbc 	.word	0x08006bbc
 800094c:	08006bc4 	.word	0x08006bc4
 8000950:	08006bcc 	.word	0x08006bcc

08000954 <stateUpdate>:
/*
 * stateUpdate: Takes the previous state and determine if the active pin has changed.
 * Then will determine if there is an active m18 call and run required to communicate with
 * m18 receiver.
 */
void stateUpdate(inputState previousState){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	if (previousState!= activeStatePtr->currentState){
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <stateUpdate+0x5c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	429a      	cmp	r2, r3
 800096a:	d011      	beq.n	8000990 <stateUpdate+0x3c>
		uint8_t callResponse = m18Call(activeStatePtr->currentState);
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <stateUpdate+0x5c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff99 	bl	80008ac <m18Call>
 800097a:	4603      	mov	r3, r0
 800097c:	73bb      	strb	r3, [r7, #14]
		if (callResponse!= SUCCESSFUL_RESPONSE){
 800097e:	2200      	movs	r2, #0
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	4293      	cmp	r3, r2
 8000984:	d010      	beq.n	80009a8 <stateUpdate+0x54>
			activeStatePtr->currentState = previousState;
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <stateUpdate+0x5c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	701a      	strb	r2, [r3, #0]
		uint8_t taskCompleteResponse = m18TaskCompletionCheck();
		if (taskCompleteResponse==SUCCESSFUL_RESPONSE){
			activeStatePtr->currentState = STATE_IDLE;
		}
	}
}
 800098e:	e00b      	b.n	80009a8 <stateUpdate+0x54>
		uint8_t taskCompleteResponse = m18TaskCompletionCheck();
 8000990:	f7ff ff60 	bl	8000854 <m18TaskCompletionCheck>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
		if (taskCompleteResponse==SUCCESSFUL_RESPONSE){
 8000998:	2200      	movs	r2, #0
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4293      	cmp	r3, r2
 800099e:	d103      	bne.n	80009a8 <stateUpdate+0x54>
			activeStatePtr->currentState = STATE_IDLE;
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <stateUpdate+0x5c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000014 	.word	0x24000014

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ba:	f000 f89d 	bl	8000af8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 fc09 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f82d 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f7ff fe79 	bl	80006bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009ca:	f000 fa75 	bl	8000eb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009ce:	f000 fb29 	bl	8001024 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  const char startMsg[] = "mainStart\r\n";
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <main+0x5c>)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart3, &startMsg, sizeof(startMsg)-1,1000);
 80009dc:	1d39      	adds	r1, r7, #4
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	220b      	movs	r2, #11
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <main+0x60>)
 80009e6:	f004 f817 	bl	8004a18 <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (activeStatePtr->currentState!= STATE_IDLE){
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <main+0x64>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d004      	beq.n	8000a00 <main+0x4c>
		  stateUpdate(previousState);
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <main+0x68>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffaa 	bl	8000954 <stateUpdate>

	  }

	  previousState = activeStatePtr->currentState;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <main+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <main+0x68>)
 8000a0a:	701a      	strb	r2, [r3, #0]
	  if (activeStatePtr->currentState!= STATE_IDLE){
 8000a0c:	e7ed      	b.n	80009ea <main+0x36>
 8000a0e:	bf00      	nop
 8000a10:	08006bd4 	.word	0x08006bd4
 8000a14:	240000ac 	.word	0x240000ac
 8000a18:	24000014 	.word	0x24000014
 8000a1c:	240000a4 	.word	0x240000a4

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09c      	sub	sp, #112	@ 0x70
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 fc36 	bl	80062a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2220      	movs	r2, #32
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fc30 	bl	80062a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f001 f93d 	bl	8001cc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <SystemClock_Config+0xd0>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <SystemClock_Config+0xd0>)
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a56:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <SystemClock_Config+0xd0>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <SystemClock_Config+0xd4>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a68:	4a22      	ldr	r2, [pc, #136]	@ (8000af4 <SystemClock_Config+0xd4>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <SystemClock_Config+0xd4>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a7c:	bf00      	nop
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <SystemClock_Config+0xd4>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a8a:	d1f8      	bne.n	8000a7e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2322      	movs	r3, #34	@ 0x22
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2340      	movs	r3, #64	@ 0x40
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f955 	bl	8001d54 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab0:	f000 f84e 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	233f      	movs	r3, #63	@ 0x3f
 8000ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fd95 	bl	8002608 <HAL_RCC_ClockConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ae4:	f000 f834 	bl	8000b50 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3770      	adds	r7, #112	@ 0x70
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58000400 	.word	0x58000400
 8000af4:	58024800 	.word	0x58024800

08000af8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b0a:	f000 fd35 	bl	8001578 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b1a:	231f      	movs	r3, #31
 8000b1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b1e:	2387      	movs	r3, #135	@ 0x87
 8000b20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b26:	2300      	movs	r3, #0
 8000b28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fd53 	bl	80015e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b42:	2004      	movs	r0, #4
 8000b44:	f000 fd30 	bl	80015a8 <HAL_MPU_Enable>

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	58024400 	.word	0x58024400

08000b90 <updateState>:
/* USER CODE BEGIN PFP */
/*
 * updateState: will take duration tracked off user button becoming reset (button release) using overall press time to determine
 * what the current state should be.
 */
void updateState(uint32_t duration_ms){
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if(duration_ms < PAUSE_PLAY_LIMIT_MS){
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <updateState+0x60>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d204      	bcs.n	8000bae <updateState+0x1e>
		activeStatePtr->currentState = STATE_PAUSE_PLAY;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <updateState+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		}
	else{
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
		}

}
 8000bac:	e019      	b.n	8000be2 <updateState+0x52>
	else if (duration_ms < PREV_TRACK_LIMIT_MS){
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <updateState+0x68>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d204      	bcs.n	8000bc4 <updateState+0x34>
			activeStatePtr->currentState = STATE_PREV_TRACK;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <updateState+0x64>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
}
 8000bc2:	e00e      	b.n	8000be2 <updateState+0x52>
	else if(duration_ms < NEXT_TRACK_LIMIT_MS){
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <updateState+0x6c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d204      	bcs.n	8000bda <updateState+0x4a>
			activeStatePtr->currentState = STATE_NEXT_TRACK;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <updateState+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	e003      	b.n	8000be2 <updateState+0x52>
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <updateState+0x64>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2204      	movs	r2, #4
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	24000018 	.word	0x24000018
 8000bf4:	24000014 	.word	0x24000014
 8000bf8:	2400001a 	.word	0x2400001a
 8000bfc:	2400001c 	.word	0x2400001c

08000c00 <HAL_GPIO_EXTI_Callback>:
/*
 * HAL_GPIO_EXTI_Callback: checks to see if the user button triggered interrupt and then will either store
 * the last time the button was pressed or calculate amount of time pressed and change the state accordingly.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b09b      	sub	sp, #108	@ 0x6c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
	if (activeStatePtr->currentState!= STATE_IDLE){
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14a      	bne.n	8000cac <HAL_GPIO_EXTI_Callback+0xac>
		return;

	}
	uint8_t msg[] = "Interrupt\r\n";
 8000c16:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c18:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, &msg, strlen(msg),MAX_UART_DELAY);
 8000c22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fb5a 	bl	80002e0 <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000c38:	4821      	ldr	r0, [pc, #132]	@ (8000cc0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c3a:	f003 feed 	bl	8004a18 <HAL_UART_Transmit>
	if (GPIO_Pin == USER_BUTTON_PIN){
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c44:	d133      	bne.n	8000cae <HAL_GPIO_EXTI_Callback+0xae>
		if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_SET){
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	481e      	ldr	r0, [pc, #120]	@ (8000cc4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000c4c:	f000 febc 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d106      	bne.n	8000c64 <HAL_GPIO_EXTI_Callback+0x64>
			activeStatePtr->lastPress = HAL_GetTick();
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c58:	681c      	ldr	r4, [r3, #0]
 8000c5a:	f000 fb41 	bl	80012e0 <HAL_GetTick>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6063      	str	r3, [r4, #4]
 8000c62:	e024      	b.n	8000cae <HAL_GPIO_EXTI_Callback+0xae>

		}else{
			char buff2[80];
			uint32_t duration_ms = HAL_GetTick()-activeStatePtr->lastPress;
 8000c64:	f000 fb3c 	bl	80012e0 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	667b      	str	r3, [r7, #100]	@ 0x64
			updateState(duration_ms);
 8000c74:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c76:	f7ff ff8b 	bl	8000b90 <updateState>
			sprintf(buff2, "Duration: %d ms State: %d \r\n",duration_ms, activeStatePtr->currentState);
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f107 0008 	add.w	r0, r7, #8
 8000c86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c88:	490f      	ldr	r1, [pc, #60]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000c8a:	f005 fae7 	bl	800625c <siprintf>
			HAL_UART_Transmit(&huart3, buff2, strlen(buff2), MAX_UART_DELAY);
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fb24 	bl	80002e0 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	f107 0108 	add.w	r1, r7, #8
 8000ca4:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000ca6:	f003 feb7 	bl	8004a18 <HAL_UART_Transmit>
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_EXTI_Callback+0xae>
		return;
 8000cac:	bf00      	nop
			}
		}

	}
 8000cae:	376c      	adds	r7, #108	@ 0x6c
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	24000014 	.word	0x24000014
 8000cb8:	08006c00 	.word	0x08006c00
 8000cbc:	2400001e 	.word	0x2400001e
 8000cc0:	240000ac 	.word	0x240000ac
 8000cc4:	58020800 	.word	0x58020800
 8000cc8:	08006be0 	.word	0x08006be0

08000ccc <EXTI15_10_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Calls HAL EXTI handler for PC13
void EXTI15_10_IRQHandler(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cd4:	f000 fea9 	bl	8001a2a <HAL_GPIO_EXTI_IRQHandler>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 fac1 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f005 faa0 	bl	80062b0 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24080000 	.word	0x24080000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	240000a8 	.word	0x240000a8
 8000da4:	24000770 	.word	0x24000770

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dac:	4b37      	ldr	r3, [pc, #220]	@ (8000e8c <SystemInit+0xe4>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db2:	4a36      	ldr	r2, [pc, #216]	@ (8000e8c <SystemInit+0xe4>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dbc:	4b34      	ldr	r3, [pc, #208]	@ (8000e90 <SystemInit+0xe8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d807      	bhi.n	8000dd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dc8:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <SystemInit+0xe8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 030f 	bic.w	r3, r3, #15
 8000dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8000e90 <SystemInit+0xe8>)
 8000dd2:	f043 0307 	orr.w	r3, r3, #7
 8000dd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e94 <SystemInit+0xec>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <SystemInit+0xec>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <SystemInit+0xec>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <SystemInit+0xec>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4929      	ldr	r1, [pc, #164]	@ (8000e94 <SystemInit+0xec>)
 8000df0:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <SystemInit+0xf0>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <SystemInit+0xe8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <SystemInit+0xe8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 030f 	bic.w	r3, r3, #15
 8000e0a:	4a21      	ldr	r2, [pc, #132]	@ (8000e90 <SystemInit+0xe8>)
 8000e0c:	f043 0307 	orr.w	r3, r3, #7
 8000e10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e12:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <SystemInit+0xec>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <SystemInit+0xec>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <SystemInit+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <SystemInit+0xec>)
 8000e26:	4a1d      	ldr	r2, [pc, #116]	@ (8000e9c <SystemInit+0xf4>)
 8000e28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <SystemInit+0xec>)
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea0 <SystemInit+0xf8>)
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <SystemInit+0xec>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <SystemInit+0xfc>)
 8000e34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <SystemInit+0xec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <SystemInit+0xec>)
 8000e3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <SystemInit+0xfc>)
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <SystemInit+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <SystemInit+0xec>)
 8000e4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ea4 <SystemInit+0xfc>)
 8000e4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <SystemInit+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <SystemInit+0xec>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <SystemInit+0xec>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <SystemInit+0xec>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <SystemInit+0x100>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <SystemInit+0x104>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e72:	d202      	bcs.n	8000e7a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <SystemInit+0x108>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <SystemInit+0x10c>)
 8000e7c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00
 8000e90:	52002000 	.word	0x52002000
 8000e94:	58024400 	.word	0x58024400
 8000e98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e9c:	02020200 	.word	0x02020200
 8000ea0:	01ff0000 	.word	0x01ff0000
 8000ea4:	01010280 	.word	0x01010280
 8000ea8:	5c001000 	.word	0x5c001000
 8000eac:	ffff0000 	.word	0xffff0000
 8000eb0:	51008108 	.word	0x51008108
 8000eb4:	52004000 	.word	0x52004000

08000eb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <MX_USART3_UART_Init+0x94>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f00:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000f02:	f003 fd39 	bl	8004978 <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f0c:	f7ff fe20 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000f14:	f004 fdcf 	bl	8005ab6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f1e:	f7ff fe17 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000f26:	f004 fe04 	bl	8005b32 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f30:	f7ff fe0e 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_USART3_UART_Init+0x90>)
 8000f36:	f004 fd85 	bl	8005a44 <HAL_UARTEx_DisableFifoMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f7ff fe06 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	240000ac 	.word	0x240000ac
 8000f4c:	40004800 	.word	0x40004800

08000f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0ba      	sub	sp, #232	@ 0xe8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	22c0      	movs	r2, #192	@ 0xc0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 f995 	bl	80062a0 <memset>
  if(uartHandle->Instance==USART3)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <HAL_UART_MspInit+0xc8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d146      	bne.n	800100e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f80:	f04f 0202 	mov.w	r2, #2
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fec2 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fa2:	f7ff fdd5 	bl	8000b50 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001002:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <HAL_UART_MspInit+0xd0>)
 800100a:	f000 fb2d 	bl	8001668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	37e8      	adds	r7, #232	@ 0xe8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004800 	.word	0x40004800
 800101c:	58024400 	.word	0x58024400
 8001020:	58020c00 	.word	0x58020c00

08001024 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800102a:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800102c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001030:	2209      	movs	r2, #9
 8001032:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001036:	2202      	movs	r2, #2
 8001038:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001042:	2202      	movs	r2, #2
 8001044:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001048:	2201      	movs	r2, #1
 800104a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800104e:	2200      	movs	r2, #0
 8001050:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001054:	2200      	movs	r2, #0
 8001056:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800105a:	2201      	movs	r2, #1
 800105c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001060:	2201      	movs	r2, #1
 8001062:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800106c:	f000 fcf7 	bl	8001a5e <HAL_PCD_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001076:	f7ff fd6b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000140 	.word	0x24000140
 8001084:	40080000 	.word	0x40080000

08001088 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ba      	sub	sp, #232	@ 0xe8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	22c0      	movs	r2, #192	@ 0xc0
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 f8f9 	bl	80062a0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <HAL_PCD_MspInit+0xec>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d159      	bne.n	800116c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80010c4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80010c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fe25 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80010dc:	f7ff fd38 	bl	8000b50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010e0:	f000 fe28 	bl	8001d34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	4a23      	ldr	r2, [pc, #140]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f4:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001102:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001106:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800111c:	230a      	movs	r3, #10
 800111e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001126:	4619      	mov	r1, r3
 8001128:	4814      	ldr	r0, [pc, #80]	@ (800117c <HAL_PCD_MspInit+0xf4>)
 800112a:	f000 fa9d 	bl	8001668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <HAL_PCD_MspInit+0xf4>)
 800114a:	f000 fa8d 	bl	8001668 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 8001150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 8001156:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800115a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_PCD_MspInit+0xf0>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	37e8      	adds	r7, #232	@ 0xe8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40080000 	.word	0x40080000
 8001178:	58024400 	.word	0x58024400
 800117c:	58020000 	.word	0x58020000

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001184:	f7ff fe10 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f005 f885 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fbff 	bl	80009b4 <main>
  bx  lr
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c0:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80011c4:	08006c88 	.word	0x08006c88
  ldr r2, =_sbss
 80011c8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80011cc:	24000770 	.word	0x24000770

080011d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC3_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011da:	2003      	movs	r0, #3
 80011dc:	f000 f98c 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011e0:	f001 fbc8 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_Init+0x68>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	4913      	ldr	r1, [pc, #76]	@ (8001240 <HAL_Init+0x6c>)
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_Init+0x68>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <HAL_Init+0x6c>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <HAL_Init+0x70>)
 8001216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001218:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <HAL_Init+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f814 	bl	800124c <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e002      	b.n	8001234 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800122e:	f7ff fc95 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	58024400 	.word	0x58024400
 8001240:	08006c0c 	.word	0x08006c0c
 8001244:	24000024 	.word	0x24000024
 8001248:	24000020 	.word	0x24000020

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_InitTick+0x60>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e021      	b.n	80012a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <HAL_InitTick+0x64>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_InitTick+0x60>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f971 	bl	800155e <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 f93b 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	@ (80012b4 <HAL_InitTick+0x68>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2400002c 	.word	0x2400002c
 80012b0:	24000020 	.word	0x24000020
 80012b4:	24000028 	.word	0x24000028

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2400002c 	.word	0x2400002c
 80012dc:	24000624 	.word	0x24000624

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	24000624 	.word	0x24000624

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff ffee 	bl	80012e0 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffde 	bl	80012e0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2400002c 	.word	0x2400002c

08001340 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <HAL_GetREVID+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0c1b      	lsrs	r3, r3, #16
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	5c001000 	.word	0x5c001000

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <__NVIC_SetPriorityGrouping+0x40>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	4313      	orrs	r3, r2
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x40>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00
 800139c:	05fa0000 	.word	0x05fa0000

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db0b      	blt.n	80013e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	f003 021f 	and.w	r2, r3, #31
 80013d4:	4907      	ldr	r1, [pc, #28]	@ (80013f4 <__NVIC_EnableIRQ+0x38>)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	2001      	movs	r0, #1
 80013de:	fa00 f202 	lsl.w	r2, r0, r2
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff29 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff40 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff90 	bl	800144c <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5f 	bl	80013f8 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff33 	bl	80013bc <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa4 	bl	80014b4 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800157c:	f3bf 8f5f 	dmb	sy
}
 8001580:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <HAL_MPU_Disable+0x28>)
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <HAL_MPU_Disable+0x28>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_MPU_Disable+0x2c>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	e000ed90 	.word	0xe000ed90

080015a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015b0:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <HAL_MPU_Enable+0x38>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_MPU_Enable+0x3c>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_MPU_Enable+0x3c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015c6:	f3bf 8f4f 	dsb	sy
}
 80015ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015cc:	f3bf 8f6f 	isb	sy
}
 80015d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed90 	.word	0xe000ed90
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	785a      	ldrb	r2, [r3, #1]
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_MPU_ConfigRegion+0x7c>)
 80015f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_MPU_ConfigRegion+0x7c>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_MPU_ConfigRegion+0x7c>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001604:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <HAL_MPU_ConfigRegion+0x7c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7b1b      	ldrb	r3, [r3, #12]
 8001610:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7adb      	ldrb	r3, [r3, #11]
 8001616:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7a9b      	ldrb	r3, [r3, #10]
 800161e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7b5b      	ldrb	r3, [r3, #13]
 8001626:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7b9b      	ldrb	r3, [r3, #14]
 800162e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7bdb      	ldrb	r3, [r3, #15]
 8001636:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7a5b      	ldrb	r3, [r3, #9]
 800163e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a1b      	ldrb	r3, [r3, #8]
 8001646:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001648:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001652:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001654:	6113      	str	r3, [r2, #16]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed90 	.word	0xe000ed90

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001676:	4b89      	ldr	r3, [pc, #548]	@ (800189c <HAL_GPIO_Init+0x234>)
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800167a:	e194      	b.n	80019a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8186 	beq.w	80019a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x44>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b03      	cmp	r3, #3
 8001718:	d017      	beq.n	800174a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	69b9      	ldr	r1, [r7, #24]
 800179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0203 	and.w	r2, r3, #3
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80e0 	beq.w	80019a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e0:	4b2f      	ldr	r3, [pc, #188]	@ (80018a0 <HAL_GPIO_Init+0x238>)
 80017e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e6:	4a2e      	ldr	r2, [pc, #184]	@ (80018a0 <HAL_GPIO_Init+0x238>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_GPIO_Init+0x238>)
 80017f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fe:	4a29      	ldr	r2, [pc, #164]	@ (80018a4 <HAL_GPIO_Init+0x23c>)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a20      	ldr	r2, [pc, #128]	@ (80018a8 <HAL_GPIO_Init+0x240>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d052      	beq.n	80018d0 <HAL_GPIO_Init+0x268>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <HAL_GPIO_Init+0x244>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d031      	beq.n	8001896 <HAL_GPIO_Init+0x22e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a1e      	ldr	r2, [pc, #120]	@ (80018b0 <HAL_GPIO_Init+0x248>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d02b      	beq.n	8001892 <HAL_GPIO_Init+0x22a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_GPIO_Init+0x24c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d025      	beq.n	800188e <HAL_GPIO_Init+0x226>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1c      	ldr	r2, [pc, #112]	@ (80018b8 <HAL_GPIO_Init+0x250>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01f      	beq.n	800188a <HAL_GPIO_Init+0x222>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <HAL_GPIO_Init+0x254>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_GPIO_Init+0x21e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <HAL_GPIO_Init+0x258>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x21a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <HAL_GPIO_Init+0x25c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x216>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a18      	ldr	r2, [pc, #96]	@ (80018c8 <HAL_GPIO_Init+0x260>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x212>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <HAL_GPIO_Init+0x264>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x20e>
 8001872:	2309      	movs	r3, #9
 8001874:	e02d      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 8001876:	230a      	movs	r3, #10
 8001878:	e02b      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 800187a:	2308      	movs	r3, #8
 800187c:	e029      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 800187e:	2307      	movs	r3, #7
 8001880:	e027      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 8001882:	2306      	movs	r3, #6
 8001884:	e025      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 8001886:	2305      	movs	r3, #5
 8001888:	e023      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 800188a:	2304      	movs	r3, #4
 800188c:	e021      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 800188e:	2303      	movs	r3, #3
 8001890:	e01f      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 8001892:	2302      	movs	r3, #2
 8001894:	e01d      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 8001896:	2301      	movs	r3, #1
 8001898:	e01b      	b.n	80018d2 <HAL_GPIO_Init+0x26a>
 800189a:	bf00      	nop
 800189c:	58000080 	.word	0x58000080
 80018a0:	58024400 	.word	0x58024400
 80018a4:	58000400 	.word	0x58000400
 80018a8:	58020000 	.word	0x58020000
 80018ac:	58020400 	.word	0x58020400
 80018b0:	58020800 	.word	0x58020800
 80018b4:	58020c00 	.word	0x58020c00
 80018b8:	58021000 	.word	0x58021000
 80018bc:	58021400 	.word	0x58021400
 80018c0:	58021800 	.word	0x58021800
 80018c4:	58021c00 	.word	0x58021c00
 80018c8:	58022000 	.word	0x58022000
 80018cc:	58022400 	.word	0x58022400
 80018d0:	2300      	movs	r3, #0
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e2:	4938      	ldr	r1, [pc, #224]	@ (80019c4 <HAL_GPIO_Init+0x35c>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f ae63 	bne.w	800167c <HAL_GPIO_Init+0x14>
  }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	3724      	adds	r7, #36	@ 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	58000400 	.word	0x58000400

080019c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f8d5 	bl	8000c00 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af02      	add	r7, sp, #8
 8001a64:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0fe      	b.n	8001c6e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff faff 	bl	8001088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f94a 	bl	8005d30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7c1a      	ldrb	r2, [r3, #16]
 8001aa4:	f88d 2000 	strb.w	r2, [sp]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aac:	f004 f8ce 	bl	8005c4c <USB_CoreInit>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0d5      	b.n	8001c6e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f942 	bl	8005d52 <USB_SetCurrentMode>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0c6      	b.n	8001c6e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e04a      	b.n	8001b7c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	3315      	adds	r3, #21
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	3314      	adds	r3, #20
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	b298      	uxth	r0, r3
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	332e      	adds	r3, #46	@ 0x2e
 8001b22:	4602      	mov	r2, r0
 8001b24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3318      	adds	r3, #24
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	331c      	adds	r3, #28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3320      	adds	r3, #32
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3324      	adds	r3, #36	@ 0x24
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	791b      	ldrb	r3, [r3, #4]
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3af      	bcc.n	8001ae6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e044      	b.n	8001c16 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3301      	adds	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3b5      	bcc.n	8001b8c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7c1a      	ldrb	r2, [r3, #16]
 8001c28:	f88d 2000 	strb.w	r2, [sp]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c30:	f004 f8dc 	bl	8005dec <USB_DevInit>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e013      	b.n	8001c6e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7b1b      	ldrb	r3, [r3, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f80b 	bl	8001c78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fa97 	bl	800619a <USB_DevDisconnect>

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_PCDEx_ActivateLPM+0x44>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	10000003 	.word	0x10000003

08001cc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_PWREx_ConfigSupply+0x70>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00a      	beq.n	8001cea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cd4:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <HAL_PWREx_ConfigSupply+0x70>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e01f      	b.n	8001d26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e01d      	b.n	8001d26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_PWREx_ConfigSupply+0x70>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f023 0207 	bic.w	r2, r3, #7
 8001cf2:	490f      	ldr	r1, [pc, #60]	@ (8001d30 <HAL_PWREx_ConfigSupply+0x70>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cfa:	f7ff faf1 	bl	80012e0 <HAL_GetTick>
 8001cfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d00:	e009      	b.n	8001d16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d02:	f7ff faed 	bl	80012e0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d10:	d901      	bls.n	8001d16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e007      	b.n	8001d26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_PWREx_ConfigSupply+0x70>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d22:	d1ee      	bne.n	8001d02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	58024800 	.word	0x58024800

08001d34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	58024800 	.word	0x58024800

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f000 bc48 	b.w	80025f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8088 	beq.w	8001e86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b99      	ldr	r3, [pc, #612]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d80:	4b96      	ldr	r3, [pc, #600]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d007      	beq.n	8001d9c <HAL_RCC_OscConfig+0x48>
 8001d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	d111      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62>
 8001d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d06d      	beq.n	8001e84 <HAL_RCC_OscConfig+0x130>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d169      	bne.n	8001e84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f000 bc21 	b.w	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x7a>
 8001dc0:	4b86      	ldr	r3, [pc, #536]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a85      	ldr	r2, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e02e      	b.n	8001e2c <HAL_RCC_OscConfig+0xd8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x9c>
 8001dd6:	4b81      	ldr	r3, [pc, #516]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a80      	ldr	r2, [pc, #512]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xd8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xc0>
 8001dfa:	4b78      	ldr	r3, [pc, #480]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a77      	ldr	r2, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a74      	ldr	r2, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xd8>
 8001e14:	4b71      	ldr	r3, [pc, #452]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a70      	ldr	r2, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b6e      	ldr	r3, [pc, #440]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6d      	ldr	r2, [pc, #436]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fa54 	bl	80012e0 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fa50 	bl	80012e0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e3d4      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe8>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fa40 	bl	80012e0 <HAL_GetTick>
 8001e60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fa3c 	bl	80012e0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e3c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x110>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80ca 	beq.w	8002028 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e94:	4b51      	ldr	r3, [pc, #324]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_RCC_OscConfig+0x166>
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	2b18      	cmp	r3, #24
 8001eae:	d156      	bne.n	8001f5e <HAL_RCC_OscConfig+0x20a>
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d151      	bne.n	8001f5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eba:	4b48      	ldr	r3, [pc, #288]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x17e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e392      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0219 	bic.w	r2, r3, #25
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	493f      	ldr	r1, [pc, #252]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f9fc 	bl	80012e0 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff f9f8 	bl	80012e0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e37c      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efe:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	f7ff fa19 	bl	8001340 <HAL_GetREVID>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d817      	bhi.n	8001f48 <HAL_RCC_OscConfig+0x1f4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b40      	cmp	r3, #64	@ 0x40
 8001f1e:	d108      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1de>
 8001f20:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f28:	4a2c      	ldr	r2, [pc, #176]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	e07a      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	031b      	lsls	r3, r3, #12
 8001f40:	4926      	ldr	r1, [pc, #152]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f46:	e06f      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	4921      	ldr	r1, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	e064      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d047      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0219 	bic.w	r2, r3, #25
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	491a      	ldr	r1, [pc, #104]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f9b2 	bl	80012e0 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff f9ae 	bl	80012e0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e332      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	f7ff f9cf 	bl	8001340 <HAL_GetREVID>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d819      	bhi.n	8001fe0 <HAL_RCC_OscConfig+0x28c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x272>
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc2:	6053      	str	r3, [r2, #4]
 8001fc4:	e030      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	031b      	lsls	r3, r3, #12
 8001fd4:	4901      	ldr	r1, [pc, #4]	@ (8001fdc <HAL_RCC_OscConfig+0x288>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
 8001fda:	e025      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	4b9a      	ldr	r3, [pc, #616]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	4997      	ldr	r1, [pc, #604]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b95      	ldr	r3, [pc, #596]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a94      	ldr	r2, [pc, #592]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff f96d 	bl	80012e0 <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff f969 	bl	80012e0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e2ed      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800201c:	4b8b      	ldr	r3, [pc, #556]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a9 	beq.w	8002188 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800203e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002040:	4b82      	ldr	r3, [pc, #520]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d007      	beq.n	800205c <HAL_RCC_OscConfig+0x308>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b18      	cmp	r3, #24
 8002050:	d13a      	bne.n	80020c8 <HAL_RCC_OscConfig+0x374>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d135      	bne.n	80020c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800205c:	4b7b      	ldr	r3, [pc, #492]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x320>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b80      	cmp	r3, #128	@ 0x80
 800206e:	d001      	beq.n	8002074 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e2c1      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002074:	f7ff f964 	bl	8001340 <HAL_GetREVID>
 8002078:	4603      	mov	r3, r0
 800207a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800207e:	4293      	cmp	r3, r2
 8002080:	d817      	bhi.n	80020b2 <HAL_RCC_OscConfig+0x35e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x348>
 800208a:	4b70      	ldr	r3, [pc, #448]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002092:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002098:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800209a:	e075      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800209c:	4b6b      	ldr	r3, [pc, #428]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	069b      	lsls	r3, r3, #26
 80020aa:	4968      	ldr	r1, [pc, #416]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020b0:	e06a      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b2:	4b66      	ldr	r3, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	061b      	lsls	r3, r3, #24
 80020c0:	4962      	ldr	r1, [pc, #392]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020c6:	e05f      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d042      	beq.n	8002156 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f900 	bl	80012e0 <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020e4:	f7ff f8fc 	bl	80012e0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e280      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f6:	4b55      	ldr	r3, [pc, #340]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002102:	f7ff f91d 	bl	8001340 <HAL_GetREVID>
 8002106:	4603      	mov	r3, r0
 8002108:	f241 0203 	movw	r2, #4099	@ 0x1003
 800210c:	4293      	cmp	r3, r2
 800210e:	d817      	bhi.n	8002140 <HAL_RCC_OscConfig+0x3ec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2b20      	cmp	r3, #32
 8002116:	d108      	bne.n	800212a <HAL_RCC_OscConfig+0x3d6>
 8002118:	4b4c      	ldr	r3, [pc, #304]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002120:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002122:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002126:	6053      	str	r3, [r2, #4]
 8002128:	e02e      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
 800212a:	4b48      	ldr	r3, [pc, #288]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	4944      	ldr	r1, [pc, #272]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
 800213e:	e023      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
 8002140:	4b42      	ldr	r3, [pc, #264]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	493f      	ldr	r1, [pc, #252]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e018      	b.n	8002188 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002156:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3c      	ldr	r2, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800215c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff f8bd 	bl	80012e0 <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800216a:	f7ff f8b9 	bl	80012e0 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e23d      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800217c:	4b33      	ldr	r3, [pc, #204]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d036      	beq.n	8002202 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d019      	beq.n	80021d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219c:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a0:	4a2a      	ldr	r2, [pc, #168]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f89a 	bl	80012e0 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff f896 	bl	80012e0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e21a      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x45c>
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d4:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff f880 	bl	80012e0 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff f87c 	bl	80012e0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e200      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d039      	beq.n	8002282 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01c      	beq.n	8002250 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800221c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002220:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002222:	f7ff f85d 	bl	80012e0 <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222a:	f7ff f859 	bl	80012e0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1dd      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <HAL_RCC_OscConfig+0x4f8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x4d6>
 8002248:	e01b      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
 800224a:	bf00      	nop
 800224c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002250:	4b9b      	ldr	r3, [pc, #620]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a9a      	ldr	r2, [pc, #616]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800225a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800225c:	f7ff f840 	bl	80012e0 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002264:	f7ff f83c 	bl	80012e0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002276:	4b92      	ldr	r3, [pc, #584]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8081 	beq.w	8002392 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002290:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <HAL_RCC_OscConfig+0x770>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a8b      	ldr	r2, [pc, #556]	@ (80024c4 <HAL_RCC_OscConfig+0x770>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800229c:	f7ff f820 	bl	80012e0 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7ff f81c 	bl	80012e0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1a0      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b6:	4b83      	ldr	r3, [pc, #524]	@ (80024c4 <HAL_RCC_OscConfig+0x770>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x584>
 80022ca:	4b7d      	ldr	r3, [pc, #500]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a7c      	ldr	r2, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	e02d      	b.n	8002334 <HAL_RCC_OscConfig+0x5e0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x5a6>
 80022e0:	4b77      	ldr	r3, [pc, #476]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	4a76      	ldr	r2, [pc, #472]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ec:	4b74      	ldr	r3, [pc, #464]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a73      	ldr	r2, [pc, #460]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x5e0>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x5c8>
 8002302:	4b6f      	ldr	r3, [pc, #444]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	4a6e      	ldr	r2, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	@ 0x70
 800230e:	4b6c      	ldr	r3, [pc, #432]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	4a6b      	ldr	r2, [pc, #428]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	@ 0x70
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x5e0>
 800231c:	4b68      	ldr	r3, [pc, #416]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	4a67      	ldr	r2, [pc, #412]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	4a64      	ldr	r2, [pc, #400]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe ffd0 	bl	80012e0 <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe ffcc 	bl	80012e0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e14e      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800235a:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ee      	beq.n	8002344 <HAL_RCC_OscConfig+0x5f0>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe ffba 	bl	80012e0 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe ffb6 	bl	80012e0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e138      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 812d 	beq.w	80025f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800239c:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023a4:	2b18      	cmp	r3, #24
 80023a6:	f000 80bd 	beq.w	8002524 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 809e 	bne.w	80024f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b42      	ldr	r3, [pc, #264]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a41      	ldr	r2, [pc, #260]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe ff8e 	bl	80012e0 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe ff8a 	bl	80012e0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e10e      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023da:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ea:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_RCC_OscConfig+0x774>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	430a      	orrs	r2, r1
 80023fa:	4931      	ldr	r1, [pc, #196]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	3b01      	subs	r3, #1
 8002406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240e:	3b01      	subs	r3, #1
 8002410:	025b      	lsls	r3, r3, #9
 8002412:	b29b      	uxth	r3, r3
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	3b01      	subs	r3, #1
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	3b01      	subs	r3, #1
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002430:	4923      	ldr	r1, [pc, #140]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002436:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	4a21      	ldr	r2, [pc, #132]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCC_OscConfig+0x778>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800244e:	00d2      	lsls	r2, r2, #3
 8002450:	491b      	ldr	r1, [pc, #108]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002456:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	f023 020c 	bic.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4917      	ldr	r1, [pc, #92]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	f023 0202 	bic.w	r2, r3, #2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002474:	4912      	ldr	r1, [pc, #72]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	4a10      	ldr	r2, [pc, #64]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 800248c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800249e:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024aa:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_RCC_OscConfig+0x76c>)
 80024b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe ff13 	bl	80012e0 <HAL_GetTick>
 80024ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024bc:	e011      	b.n	80024e2 <HAL_RCC_OscConfig+0x78e>
 80024be:	bf00      	nop
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58024800 	.word	0x58024800
 80024c8:	fffffc0c 	.word	0xfffffc0c
 80024cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe ff06 	bl	80012e0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e08a      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024e2:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x77c>
 80024ee:	e082      	b.n	80025f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b43      	ldr	r3, [pc, #268]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fef0 	bl	80012e0 <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe feec 	bl	80012e0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e070      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002516:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x7b0>
 8002522:	e068      	b.n	80025f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800252a:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	d031      	beq.n	800259c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d12a      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d122      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d11a      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0a5b      	lsrs	r3, r3, #9
 800256a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002584:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0e1b      	lsrs	r3, r3, #24
 800258e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002596:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e02b      	b.n	80025f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a4:	08db      	lsrs	r3, r3, #3
 80025a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d01f      	beq.n	80025f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c2:	f7fe fe8d 	bl	80012e0 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025c8:	bf00      	nop
 80025ca:	f7fe fe89 	bl	80012e0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d0f9      	beq.n	80025ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_RCC_OscConfig+0x8b0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	4906      	ldr	r1, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_RCC_OscConfig+0x8ac>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3730      	adds	r7, #48	@ 0x30
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	58024400 	.word	0x58024400
 8002604:	ffff0007 	.word	0xffff0007

08002608 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e19c      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b8a      	ldr	r3, [pc, #552]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b87      	ldr	r3, [pc, #540]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 020f 	bic.w	r2, r3, #15
 8002632:	4985      	ldr	r1, [pc, #532]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b83      	ldr	r3, [pc, #524]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e184      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	4b7b      	ldr	r3, [pc, #492]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002664:	429a      	cmp	r2, r3
 8002666:	d908      	bls.n	800267a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002668:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4975      	ldr	r1, [pc, #468]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002676:	4313      	orrs	r3, r2
 8002678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002692:	429a      	cmp	r2, r3
 8002694:	d908      	bls.n	80026a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002696:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	496a      	ldr	r1, [pc, #424]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	4b64      	ldr	r3, [pc, #400]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d908      	bls.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026c4:	4b61      	ldr	r3, [pc, #388]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	495e      	ldr	r1, [pc, #376]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d010      	beq.n	8002704 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	4b59      	ldr	r3, [pc, #356]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d908      	bls.n	8002704 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026f2:	4b56      	ldr	r3, [pc, #344]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4953      	ldr	r1, [pc, #332]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002700:	4313      	orrs	r3, r2
 8002702:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	429a      	cmp	r2, r3
 800271e:	d908      	bls.n	8002732 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f023 020f 	bic.w	r2, r3, #15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4947      	ldr	r1, [pc, #284]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800272e:	4313      	orrs	r3, r2
 8002730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d055      	beq.n	80027ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4940      	ldr	r1, [pc, #256]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800274c:	4313      	orrs	r3, r2
 800274e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002758:	4b3c      	ldr	r3, [pc, #240]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d121      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0f6      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002770:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d115      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ea      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002788:	4b30      	ldr	r3, [pc, #192]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0de      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002798:	4b2c      	ldr	r3, [pc, #176]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d6      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4925      	ldr	r1, [pc, #148]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ba:	f7fe fd91 	bl	80012e0 <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f7fe fd8d 	bl	80012e0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0be      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d1eb      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	429a      	cmp	r2, r3
 8002804:	d208      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	490e      	ldr	r1, [pc, #56]	@ (800284c <HAL_RCC_ClockConfig+0x244>)
 8002814:	4313      	orrs	r3, r2
 8002816:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d214      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 020f 	bic.w	r2, r3, #15
 800282e:	4906      	ldr	r1, [pc, #24]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <HAL_RCC_ClockConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e086      	b.n	8002956 <HAL_RCC_ClockConfig+0x34e>
 8002848:	52002000 	.word	0x52002000
 800284c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002868:	429a      	cmp	r2, r3
 800286a:	d208      	bcs.n	800287e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800286c:	4b3c      	ldr	r3, [pc, #240]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4939      	ldr	r1, [pc, #228]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 800287a:	4313      	orrs	r3, r2
 800287c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	4b34      	ldr	r3, [pc, #208]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002896:	429a      	cmp	r2, r3
 8002898:	d208      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800289a:	4b31      	ldr	r3, [pc, #196]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	492e      	ldr	r1, [pc, #184]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d208      	bcs.n	80028da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4922      	ldr	r1, [pc, #136]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d208      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4917      	ldr	r1, [pc, #92]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002904:	4313      	orrs	r3, r2
 8002906:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002908:	f000 f834 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	4912      	ldr	r1, [pc, #72]	@ (8002964 <HAL_RCC_ClockConfig+0x35c>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <HAL_RCC_ClockConfig+0x358>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_RCC_ClockConfig+0x35c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x360>)
 800293e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002940:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x364>)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x368>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fc7e 	bl	800124c <HAL_InitTick>
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	58024400 	.word	0x58024400
 8002964:	08006c0c 	.word	0x08006c0c
 8002968:	24000024 	.word	0x24000024
 800296c:	24000020 	.word	0x24000020
 8002970:	24000028 	.word	0x24000028

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	@ 0x24
 8002978:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800297a:	4bb3      	ldr	r3, [pc, #716]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002982:	2b18      	cmp	r3, #24
 8002984:	f200 8155 	bhi.w	8002c32 <HAL_RCC_GetSysClockFreq+0x2be>
 8002988:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <HAL_RCC_GetSysClockFreq+0x1c>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029f5 	.word	0x080029f5
 8002994:	08002c33 	.word	0x08002c33
 8002998:	08002c33 	.word	0x08002c33
 800299c:	08002c33 	.word	0x08002c33
 80029a0:	08002c33 	.word	0x08002c33
 80029a4:	08002c33 	.word	0x08002c33
 80029a8:	08002c33 	.word	0x08002c33
 80029ac:	08002c33 	.word	0x08002c33
 80029b0:	08002a1b 	.word	0x08002a1b
 80029b4:	08002c33 	.word	0x08002c33
 80029b8:	08002c33 	.word	0x08002c33
 80029bc:	08002c33 	.word	0x08002c33
 80029c0:	08002c33 	.word	0x08002c33
 80029c4:	08002c33 	.word	0x08002c33
 80029c8:	08002c33 	.word	0x08002c33
 80029cc:	08002c33 	.word	0x08002c33
 80029d0:	08002a21 	.word	0x08002a21
 80029d4:	08002c33 	.word	0x08002c33
 80029d8:	08002c33 	.word	0x08002c33
 80029dc:	08002c33 	.word	0x08002c33
 80029e0:	08002c33 	.word	0x08002c33
 80029e4:	08002c33 	.word	0x08002c33
 80029e8:	08002c33 	.word	0x08002c33
 80029ec:	08002c33 	.word	0x08002c33
 80029f0:	08002a27 	.word	0x08002a27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029f4:	4b94      	ldr	r3, [pc, #592]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a00:	4b91      	ldr	r3, [pc, #580]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	4a90      	ldr	r2, [pc, #576]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a12:	e111      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a14:	4b8d      	ldr	r3, [pc, #564]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a16:	61bb      	str	r3, [r7, #24]
      break;
 8002a18:	e10e      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a1c:	61bb      	str	r3, [r7, #24]
      break;
 8002a1e:	e10b      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a20:	4b8c      	ldr	r3, [pc, #560]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a22:	61bb      	str	r3, [r7, #24]
      break;
 8002a24:	e108      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a26:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a30:	4b85      	ldr	r3, [pc, #532]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a3c:	4b82      	ldr	r3, [pc, #520]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a46:	4b80      	ldr	r3, [pc, #512]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80e1 	beq.w	8002c2c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f000 8083 	beq.w	8002b78 <HAL_RCC_GetSysClockFreq+0x204>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	f200 80a1 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x248>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x114>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d056      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a86:	e099      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a88:	4b6f      	ldr	r3, [pc, #444]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02d      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a94:	4b6c      	ldr	r3, [pc, #432]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002abe:	4b62      	ldr	r3, [pc, #392]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ad2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002aee:	e087      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b32:	e065      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b76:	e043      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bba:	e021      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002be2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	0a5b      	lsrs	r3, r3, #9
 8002c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c24:	ee17 3a90 	vmov	r3, s15
 8002c28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c2a:	e005      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
      break;
 8002c30:	e002      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c32:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c34:	61bb      	str	r3, [r7, #24]
      break;
 8002c36:	bf00      	nop
  }

  return sysclockfreq;
 8002c38:	69bb      	ldr	r3, [r7, #24]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3724      	adds	r7, #36	@ 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	03d09000 	.word	0x03d09000
 8002c50:	003d0900 	.word	0x003d0900
 8002c54:	017d7840 	.word	0x017d7840
 8002c58:	46000000 	.word	0x46000000
 8002c5c:	4c742400 	.word	0x4c742400
 8002c60:	4a742400 	.word	0x4a742400
 8002c64:	4bbebc20 	.word	0x4bbebc20

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c6e:	f7ff fe81 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490f      	ldr	r1, [pc, #60]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ca4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ca6:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	08006c0c 	.word	0x08006c0c
 8002cc0:	24000024 	.word	0x24000024
 8002cc4:	24000020 	.word	0x24000020

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ccc:	f7ff ffcc 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4904      	ldr	r1, [pc, #16]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	08006c0c 	.word	0x08006c0c

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002cf8:	f7ff ffb6 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4904      	ldr	r1, [pc, #16]	@ (8002d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	08006c0c 	.word	0x08006c0c

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b0ca      	sub	sp, #296	@ 0x128
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d44:	2500      	movs	r5, #0
 8002d46:	ea54 0305 	orrs.w	r3, r4, r5
 8002d4a:	d049      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d56:	d02f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d5c:	d828      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d62:	d01a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d68:	d822      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d72:	d007      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d74:	e01c      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d76:	4bb8      	ldr	r3, [pc, #736]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	4ab7      	ldr	r2, [pc, #732]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d82:	e01a      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	3308      	adds	r3, #8
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fc8f 	bl	80046b0 <RCCEx_PLL2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d98:	e00f      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9e:	3328      	adds	r3, #40	@ 0x28
 8002da0:	2102      	movs	r1, #2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 fd36 	bl	8004814 <RCCEx_PLL3_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dae:	e004      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dc2:	4ba5      	ldr	r3, [pc, #660]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd0:	4aa1      	ldr	r2, [pc, #644]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dd6:	e003      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002dec:	f04f 0900 	mov.w	r9, #0
 8002df0:	ea58 0309 	orrs.w	r3, r8, r9
 8002df4:	d047      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d82a      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e1d 	.word	0x08002e1d
 8002e0c:	08002e2b 	.word	0x08002e2b
 8002e10:	08002e41 	.word	0x08002e41
 8002e14:	08002e5f 	.word	0x08002e5f
 8002e18:	08002e5f 	.word	0x08002e5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	4a8d      	ldr	r2, [pc, #564]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e28:	e01a      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2e:	3308      	adds	r3, #8
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fc3c 	bl	80046b0 <RCCEx_PLL2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e3e:	e00f      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e44:	3328      	adds	r3, #40	@ 0x28
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fce3 	bl	8004814 <RCCEx_PLL3_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e54:	e004      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e68:	4b7b      	ldr	r3, [pc, #492]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6c:	f023 0107 	bic.w	r1, r3, #7
 8002e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e76:	4a78      	ldr	r2, [pc, #480]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e7c:	e003      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002e92:	f04f 0b00 	mov.w	fp, #0
 8002e96:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e9a:	d04c      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea6:	d030      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eac:	d829      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eb0:	d02d      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eb4:	d825      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002eb6:	2b80      	cmp	r3, #128	@ 0x80
 8002eb8:	d018      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002eba:	2b80      	cmp	r3, #128	@ 0x80
 8002ebc:	d821      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002ec2:	2b40      	cmp	r3, #64	@ 0x40
 8002ec4:	d007      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002ec6:	e01c      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec8:	4b63      	ldr	r3, [pc, #396]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	4a62      	ldr	r2, [pc, #392]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	3308      	adds	r3, #8
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fbe6 	bl	80046b0 <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef0:	3328      	adds	r3, #40	@ 0x28
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 fc8d 	bl	8004814 <RCCEx_PLL3_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f18:	4b4f      	ldr	r3, [pc, #316]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	4a4c      	ldr	r2, [pc, #304]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f2c:	e003      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002f42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002f50:	460b      	mov	r3, r1
 8002f52:	4313      	orrs	r3, r2
 8002f54:	d053      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f62:	d035      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f68:	d82e      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f6e:	d031      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f74:	d828      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f7a:	d01a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f80:	d822      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f8a:	d007      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8e:	4b32      	ldr	r3, [pc, #200]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	4a31      	ldr	r2, [pc, #196]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f9a:	e01c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fb83 	bl	80046b0 <RCCEx_PLL2_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fb0:	e011      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb6:	3328      	adds	r3, #40	@ 0x28
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 fc2a 	bl	8004814 <RCCEx_PLL3_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fc6:	e006      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fce:	e002      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fee:	4a1a      	ldr	r2, [pc, #104]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800300a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003014:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003018:	460b      	mov	r3, r1
 800301a:	4313      	orrs	r3, r2
 800301c:	d056      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003026:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800302a:	d038      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800302c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003030:	d831      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003032:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003036:	d034      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003038:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800303c:	d82b      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800303e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003042:	d01d      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003044:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003048:	d825      	bhi.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800304e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003054:	e01f      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305c:	4ba2      	ldr	r3, [pc, #648]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4aa1      	ldr	r2, [pc, #644]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003068:	e01c      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	3308      	adds	r3, #8
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fb1c 	bl	80046b0 <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800307e:	e011      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003084:	3328      	adds	r3, #40	@ 0x28
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f001 fbc3 	bl	8004814 <RCCEx_PLL3_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003094:	e006      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800309c:	e002      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030ac:	4b8e      	ldr	r3, [pc, #568]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030bc:	4a8a      	ldr	r2, [pc, #552]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030be:	430b      	orrs	r3, r1
 80030c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80030d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d03a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	2b30      	cmp	r3, #48	@ 0x30
 80030f4:	d01f      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80030f6:	2b30      	cmp	r3, #48	@ 0x30
 80030f8:	d819      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d00c      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d815      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d019      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003106:	2b10      	cmp	r3, #16
 8003108:	d111      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310a:	4b77      	ldr	r3, [pc, #476]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	4a76      	ldr	r2, [pc, #472]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003116:	e011      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311c:	3308      	adds	r3, #8
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f001 fac5 	bl	80046b0 <RCCEx_PLL2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003134:	e002      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003144:	4b68      	ldr	r3, [pc, #416]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003148:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	4a65      	ldr	r2, [pc, #404]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003154:	430b      	orrs	r3, r1
 8003156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800316e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003178:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800317c:	460b      	mov	r3, r1
 800317e:	4313      	orrs	r3, r2
 8003180:	d051      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800318c:	d035      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800318e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003192:	d82e      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003194:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003198:	d031      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800319a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800319e:	d828      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a4:	d01a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031aa:	d822      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b4:	d007      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80031b6:	e01c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b8:	4b4b      	ldr	r3, [pc, #300]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	4a4a      	ldr	r2, [pc, #296]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031c4:	e01c      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ca:	3308      	adds	r3, #8
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fa6e 	bl	80046b0 <RCCEx_PLL2_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031da:	e011      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e0:	3328      	adds	r3, #40	@ 0x28
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 fb15 	bl	8004814 <RCCEx_PLL3_Config>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031f0:	e006      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031f8:	e002      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003208:	4b37      	ldr	r3, [pc, #220]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800320a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	4a34      	ldr	r2, [pc, #208]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003218:	430b      	orrs	r3, r1
 800321a:	6513      	str	r3, [r2, #80]	@ 0x50
 800321c:	e003      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800323c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003240:	460b      	mov	r3, r1
 8003242:	4313      	orrs	r3, r2
 8003244:	d056      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003250:	d033      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003252:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003256:	d82c      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003258:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800325c:	d02f      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800325e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003262:	d826      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003264:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003268:	d02b      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800326a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800326e:	d820      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003274:	d012      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800327a:	d81a      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d022      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003284:	d115      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	3308      	adds	r3, #8
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fa0e 	bl	80046b0 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800329a:	e015      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	3328      	adds	r3, #40	@ 0x28
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fab5 	bl	8004814 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032b0:	e00a      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032de:	4a02      	ldr	r2, [pc, #8]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80032e4:	e006      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032e6:	bf00      	nop
 80032e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800330a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800330e:	460b      	mov	r3, r1
 8003310:	4313      	orrs	r3, r2
 8003312:	d055      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800331c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003320:	d033      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003322:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003326:	d82c      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332c:	d02f      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d826      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003334:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003338:	d02b      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800333a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800333e:	d820      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003344:	d012      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800334a:	d81a      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d022      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003354:	d115      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335a:	3308      	adds	r3, #8
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f001 f9a6 	bl	80046b0 <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800336a:	e015      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003370:	3328      	adds	r3, #40	@ 0x28
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f001 fa4d 	bl	8004814 <RCCEx_PLL3_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003380:	e00a      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003388:	e006      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800338a:	bf00      	nop
 800338c:	e004      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800338e:	bf00      	nop
 8003390:	e002      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033a0:	4ba3      	ldr	r3, [pc, #652]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b6:	e003      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80033cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80033d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033da:	460b      	mov	r3, r1
 80033dc:	4313      	orrs	r3, r2
 80033de:	d037      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ea:	d00e      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80033ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f0:	d816      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80033f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033fa:	d111      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	4a8b      	ldr	r2, [pc, #556]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003408:	e00f      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	3308      	adds	r3, #8
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f001 f94c 	bl	80046b0 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800341e:	e004      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003426:	e000      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003432:	4b7f      	ldr	r3, [pc, #508]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	4a7b      	ldr	r2, [pc, #492]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003442:	430b      	orrs	r3, r1
 8003444:	6513      	str	r3, [r2, #80]	@ 0x50
 8003446:	e003      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800345c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003466:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800346a:	460b      	mov	r3, r1
 800346c:	4313      	orrs	r3, r2
 800346e:	d039      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003476:	2b03      	cmp	r3, #3
 8003478:	d81c      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800347a:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034bd 	.word	0x080034bd
 8003484:	08003491 	.word	0x08003491
 8003488:	0800349f 	.word	0x0800349f
 800348c:	080034bd 	.word	0x080034bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b67      	ldr	r3, [pc, #412]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	4a66      	ldr	r2, [pc, #408]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800349c:	e00f      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	3308      	adds	r3, #8
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 f902 	bl	80046b0 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	f023 0103 	bic.w	r1, r3, #3
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d4:	4a56      	ldr	r2, [pc, #344]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034da:	e003      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80034f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80034fe:	460b      	mov	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	f000 809f 	beq.w	8003644 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003506:	4b4b      	ldr	r3, [pc, #300]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4a      	ldr	r2, [pc, #296]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003510:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003512:	f7fd fee5 	bl	80012e0 <HAL_GetTick>
 8003516:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800351a:	e00b      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351c:	f7fd fee0 	bl	80012e0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b64      	cmp	r3, #100	@ 0x64
 800352a:	d903      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003532:	e005      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003534:	4b3f      	ldr	r3, [pc, #252]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ed      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003544:	2b00      	cmp	r3, #0
 8003546:	d179      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003548:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800354a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003554:	4053      	eors	r3, r2
 8003556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800355e:	4b34      	ldr	r3, [pc, #208]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003566:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356e:	4a30      	ldr	r2, [pc, #192]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003576:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	4a2d      	ldr	r2, [pc, #180]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003580:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003582:	4a2b      	ldr	r2, [pc, #172]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003588:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003596:	d118      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd fea2 	bl	80012e0 <HAL_GetTick>
 800359c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035a0:	e00d      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fd fe9d 	bl	80012e0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d903      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80035bc:	e005      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035be:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0eb      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80035ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d129      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035e2:	d10e      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035f4:	091a      	lsrs	r2, r3, #4
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6113      	str	r3, [r2, #16]
 8003600:	e005      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003608:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800360c:	6113      	str	r3, [r2, #16]
 800360e:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003610:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	4a04      	ldr	r2, [pc, #16]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003620:	430b      	orrs	r3, r1
 8003622:	6713      	str	r3, [r2, #112]	@ 0x70
 8003624:	e00e      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003630:	58024400 	.word	0x58024400
 8003634:	58024800 	.word	0x58024800
 8003638:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f002 0301 	and.w	r3, r2, #1
 8003650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800365a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	f000 8089 	beq.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366c:	2b28      	cmp	r3, #40	@ 0x28
 800366e:	d86b      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003670:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	08003751 	.word	0x08003751
 800367c:	08003749 	.word	0x08003749
 8003680:	08003749 	.word	0x08003749
 8003684:	08003749 	.word	0x08003749
 8003688:	08003749 	.word	0x08003749
 800368c:	08003749 	.word	0x08003749
 8003690:	08003749 	.word	0x08003749
 8003694:	08003749 	.word	0x08003749
 8003698:	0800371d 	.word	0x0800371d
 800369c:	08003749 	.word	0x08003749
 80036a0:	08003749 	.word	0x08003749
 80036a4:	08003749 	.word	0x08003749
 80036a8:	08003749 	.word	0x08003749
 80036ac:	08003749 	.word	0x08003749
 80036b0:	08003749 	.word	0x08003749
 80036b4:	08003749 	.word	0x08003749
 80036b8:	08003733 	.word	0x08003733
 80036bc:	08003749 	.word	0x08003749
 80036c0:	08003749 	.word	0x08003749
 80036c4:	08003749 	.word	0x08003749
 80036c8:	08003749 	.word	0x08003749
 80036cc:	08003749 	.word	0x08003749
 80036d0:	08003749 	.word	0x08003749
 80036d4:	08003749 	.word	0x08003749
 80036d8:	08003751 	.word	0x08003751
 80036dc:	08003749 	.word	0x08003749
 80036e0:	08003749 	.word	0x08003749
 80036e4:	08003749 	.word	0x08003749
 80036e8:	08003749 	.word	0x08003749
 80036ec:	08003749 	.word	0x08003749
 80036f0:	08003749 	.word	0x08003749
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003751 	.word	0x08003751
 80036fc:	08003749 	.word	0x08003749
 8003700:	08003749 	.word	0x08003749
 8003704:	08003749 	.word	0x08003749
 8003708:	08003749 	.word	0x08003749
 800370c:	08003749 	.word	0x08003749
 8003710:	08003749 	.word	0x08003749
 8003714:	08003749 	.word	0x08003749
 8003718:	08003751 	.word	0x08003751
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	3308      	adds	r3, #8
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f000 ffc3 	bl	80046b0 <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003730:	e00f      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	3328      	adds	r3, #40	@ 0x28
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f86a 	bl	8004814 <RCCEx_PLL3_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003746:	e004      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800374e:	e000      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800375a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003768:	4abb      	ldr	r2, [pc, #748]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800376a:	430b      	orrs	r3, r1
 800376c:	6553      	str	r3, [r2, #84]	@ 0x54
 800376e:	e003      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003774:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f002 0302 	and.w	r3, r2, #2
 8003784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800378e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d041      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d824      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80037a2:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037f5 	.word	0x080037f5
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037d7 	.word	0x080037d7
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	080037f5 	.word	0x080037f5
 80037bc:	080037f5 	.word	0x080037f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	3308      	adds	r3, #8
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 ff71 	bl	80046b0 <RCCEx_PLL2_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037d4:	e00f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	3328      	adds	r3, #40	@ 0x28
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 f818 	bl	8004814 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037fe:	4b96      	ldr	r3, [pc, #600]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	f023 0107 	bic.w	r1, r3, #7
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800380c:	4a92      	ldr	r2, [pc, #584]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800380e:	430b      	orrs	r3, r1
 8003810:	6553      	str	r3, [r2, #84]	@ 0x54
 8003812:	e003      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f002 0304 	and.w	r3, r2, #4
 8003828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003832:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003836:	460b      	mov	r3, r1
 8003838:	4313      	orrs	r3, r2
 800383a:	d044      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003844:	2b05      	cmp	r3, #5
 8003846:	d825      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	0800389d 	.word	0x0800389d
 8003854:	08003869 	.word	0x08003869
 8003858:	0800387f 	.word	0x0800387f
 800385c:	0800389d 	.word	0x0800389d
 8003860:	0800389d 	.word	0x0800389d
 8003864:	0800389d 	.word	0x0800389d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386c:	3308      	adds	r3, #8
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ff1d 	bl	80046b0 <RCCEx_PLL2_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800387c:	e00f      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	3328      	adds	r3, #40	@ 0x28
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 ffc4 	bl	8004814 <RCCEx_PLL3_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003892:	e004      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389a:	e000      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800389c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	f023 0107 	bic.w	r1, r3, #7
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b6:	4a68      	ldr	r2, [pc, #416]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f002 0320 	and.w	r3, r2, #32
 80038d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d055      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f2:	d033      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d82c      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d02f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d826      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800390a:	d02b      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800390c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003910:	d820      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003916:	d012      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800391c:	d81a      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d022      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003926:	d115      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	3308      	adds	r3, #8
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 febd 	bl	80046b0 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800393c:	e015      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003942:	3328      	adds	r3, #40	@ 0x28
 8003944:	2102      	movs	r1, #2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 ff64 	bl	8004814 <RCCEx_PLL3_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003952:	e00a      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395a:	e006      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800395c:	bf00      	nop
 800395e:	e004      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003972:	4b39      	ldr	r3, [pc, #228]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	4a35      	ldr	r2, [pc, #212]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003984:	430b      	orrs	r3, r1
 8003986:	6553      	str	r3, [r2, #84]	@ 0x54
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800399e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4313      	orrs	r3, r2
 80039b0:	d058      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039be:	d033      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80039c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039c4:	d82c      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ca:	d02f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d0:	d826      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039d6:	d02b      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80039d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039dc:	d820      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e2:	d012      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e8:	d81a      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d022      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d115      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	3308      	adds	r3, #8
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fe57 	bl	80046b0 <RCCEx_PLL2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a08:	e015      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0e:	3328      	adds	r3, #40	@ 0x28
 8003a10:	2102      	movs	r1, #2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fefe 	bl	8004814 <RCCEx_PLL3_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a26:	e006      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e004      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a2c:	bf00      	nop
 8003a2e:	e002      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a4e:	4a02      	ldr	r2, [pc, #8]	@ (8003a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003a56:	bf00      	nop
 8003a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d055      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a90:	d033      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a96:	d82c      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a9c:	d02f      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa2:	d826      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003aa4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003aa8:	d02b      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003aaa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003aae:	d820      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab4:	d012      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003ab6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aba:	d81a      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	3308      	adds	r3, #8
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fdee 	bl	80046b0 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ada:	e015      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	3328      	adds	r3, #40	@ 0x28
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fe95 	bl	8004814 <RCCEx_PLL3_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b10:	4ba1      	ldr	r3, [pc, #644]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b20:	4a9d      	ldr	r2, [pc, #628]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b26:	e003      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f002 0308 	and.w	r3, r2, #8
 8003b3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	d01e      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	3328      	adds	r3, #40	@ 0x28
 8003b64:	2102      	movs	r1, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fe54 	bl	8004814 <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b78:	4b87      	ldr	r3, [pc, #540]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b88:	4a83      	ldr	r2, [pc, #524]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f002 0310 	and.w	r3, r2, #16
 8003b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ba4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	d01e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	3328      	adds	r3, #40	@ 0x28
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fe25 	bl	8004814 <RCCEx_PLL3_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bd6:	4b70      	ldr	r3, [pc, #448]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	d03e      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c18:	d022      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003c1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c1e:	d81b      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c28:	d00b      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003c2a:	e015      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	3308      	adds	r3, #8
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fd3b 	bl	80046b0 <RCCEx_PLL2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c40:	e00f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3328      	adds	r3, #40	@ 0x28
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fde2 	bl	8004814 <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c7a:	4a47      	ldr	r2, [pc, #284]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c98:	2300      	movs	r3, #0
 8003c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cb2:	d01f      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003cb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cb8:	d818      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cbe:	d003      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003cc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cc4:	d007      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003cc6:	e011      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc8:	4b33      	ldr	r3, [pc, #204]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	4a32      	ldr	r2, [pc, #200]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cd4:	e00f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	3328      	adds	r3, #40	@ 0x28
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fd98 	bl	8004814 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfe:	4b26      	ldr	r3, [pc, #152]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d034      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d48:	d007      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d4a:	e011      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4c:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d58:	e00e      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	3308      	adds	r3, #8
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fca4 	bl	80046b0 <RCCEx_PLL2_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d8e:	4a02      	ldr	r2, [pc, #8]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d90:	430b      	orrs	r3, r1
 8003d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d96:	bf00      	nop
 8003d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db2:	2300      	movs	r3, #0
 8003db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003db6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	d00c      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	3328      	adds	r3, #40	@ 0x28
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fd23 	bl	8004814 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003de8:	2300      	movs	r3, #0
 8003dea:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003df0:	460b      	mov	r3, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d038      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e02:	d018      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e08:	d811      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0e:	d014      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e14:	d80b      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d011      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4bc3      	ldr	r3, [pc, #780]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	4ac2      	ldr	r2, [pc, #776]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e2c:	e008      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e34:	e004      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e48:	4bb9      	ldr	r3, [pc, #740]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e58:	4ab5      	ldr	r2, [pc, #724]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e76:	2300      	movs	r3, #0
 8003e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e84:	4baa      	ldr	r3, [pc, #680]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e92:	4aa7      	ldr	r2, [pc, #668]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003eb4:	4b9e      	ldr	r3, [pc, #632]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ec4:	4a9a      	ldr	r2, [pc, #616]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ed8:	2300      	movs	r3, #0
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003edc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ee6:	4b92      	ldr	r3, [pc, #584]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ef4:	4a8e      	ldr	r2, [pc, #568]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f08:	2300      	movs	r3, #0
 8003f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f10:	460b      	mov	r3, r1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f16:	4b86      	ldr	r3, [pc, #536]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4a85      	ldr	r2, [pc, #532]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f20:	6113      	str	r3, [r2, #16]
 8003f22:	4b83      	ldr	r3, [pc, #524]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f24:	6919      	ldr	r1, [r3, #16]
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f2e:	4a80      	ldr	r2, [pc, #512]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f42:	2300      	movs	r3, #0
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f50:	4b77      	ldr	r3, [pc, #476]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	4a74      	ldr	r2, [pc, #464]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f72:	2300      	movs	r3, #0
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f80:	4b6b      	ldr	r3, [pc, #428]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f90:	4a67      	ldr	r2, [pc, #412]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d011      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb78 	bl	80046b0 <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	6239      	str	r1, [r7, #32]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d011      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fb58 	bl	80046b0 <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	2100      	movs	r1, #0
 8004020:	61b9      	str	r1, [r7, #24]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800402c:	460b      	mov	r3, r1
 800402e:	4313      	orrs	r3, r2
 8004030:	d011      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004036:	3308      	adds	r3, #8
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fb38 	bl	80046b0 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	2100      	movs	r1, #0
 8004060:	6139      	str	r1, [r7, #16]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800406c:	460b      	mov	r3, r1
 800406e:	4313      	orrs	r3, r2
 8004070:	d011      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	3328      	adds	r3, #40	@ 0x28
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fbca 	bl	8004814 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	2100      	movs	r1, #0
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040ac:	460b      	mov	r3, r1
 80040ae:	4313      	orrs	r3, r2
 80040b0:	d011      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	3328      	adds	r3, #40	@ 0x28
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fbaa 	bl	8004814 <RCCEx_PLL3_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	2100      	movs	r1, #0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d011      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3328      	adds	r3, #40	@ 0x28
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb8a 	bl	8004814 <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004116:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
}
 8004124:	4618      	mov	r0, r3
 8004126:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800412a:	46bd      	mov	sp, r7
 800412c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004130:	58024400 	.word	0x58024400

08004134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004138:	f7fe fd96 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	@ (800415c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	58024400 	.word	0x58024400
 800415c:	08006c0c 	.word	0x08006c0c

08004160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	@ 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004168:	4ba1      	ldr	r3, [pc, #644]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004172:	4b9f      	ldr	r3, [pc, #636]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	0b1b      	lsrs	r3, r3, #12
 8004178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800417c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800417e:	4b9c      	ldr	r3, [pc, #624]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800418a:	4b99      	ldr	r3, [pc, #612]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8111 	beq.w	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f000 8083 	beq.w	80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	f200 80a1 	bhi.w	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d056      	beq.n	8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80041ca:	e099      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041cc:	4b88      	ldr	r3, [pc, #544]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02d      	beq.n	8004234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041d8:	4b85      	ldr	r3, [pc, #532]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	08db      	lsrs	r3, r3, #3
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	4a84      	ldr	r2, [pc, #528]	@ (80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004202:	4b7b      	ldr	r3, [pc, #492]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004212:	ed97 6a03 	vldr	s12, [r7, #12]
 8004216:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800421a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004232:	e087      	b.n	8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80043fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004246:	4b6a      	ldr	r3, [pc, #424]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004256:	ed97 6a03 	vldr	s12, [r7, #12]
 800425a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800425e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800426a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004276:	e065      	b.n	8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428a:	4b59      	ldr	r3, [pc, #356]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429a:	ed97 6a03 	vldr	s12, [r7, #12]
 800429e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ba:	e043      	b.n	8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80042ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ce:	4b48      	ldr	r3, [pc, #288]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042de:	ed97 6a03 	vldr	s12, [r7, #12]
 80042e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042fe:	e021      	b.n	8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800430e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004312:	4b37      	ldr	r3, [pc, #220]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004322:	ed97 6a03 	vldr	s12, [r7, #12]
 8004326:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800432a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004344:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	0a5b      	lsrs	r3, r3, #9
 800434a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800435a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800435e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436a:	ee17 2a90 	vmov	r2, s15
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004372:	4b1f      	ldr	r3, [pc, #124]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800438c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004398:	ee17 2a90 	vmov	r2, s15
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80043be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c6:	ee17 2a90 	vmov	r2, s15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80043ce:	e008      	b.n	80043e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
}
 80043e2:	bf00      	nop
 80043e4:	3724      	adds	r7, #36	@ 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	03d09000 	.word	0x03d09000
 80043f8:	46000000 	.word	0x46000000
 80043fc:	4c742400 	.word	0x4c742400
 8004400:	4a742400 	.word	0x4a742400
 8004404:	4bbebc20 	.word	0x4bbebc20

08004408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	@ 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004410:	4ba1      	ldr	r3, [pc, #644]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800441a:	4b9f      	ldr	r3, [pc, #636]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800441c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441e:	0d1b      	lsrs	r3, r3, #20
 8004420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004426:	4b9c      	ldr	r3, [pc, #624]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004432:	4b99      	ldr	r3, [pc, #612]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	08db      	lsrs	r3, r3, #3
 8004438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8111 	beq.w	8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b02      	cmp	r3, #2
 800445a:	f000 8083 	beq.w	8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b02      	cmp	r3, #2
 8004462:	f200 80a1 	bhi.w	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d056      	beq.n	8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004472:	e099      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004474:	4b88      	ldr	r3, [pc, #544]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02d      	beq.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004480:	4b85      	ldr	r3, [pc, #532]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	08db      	lsrs	r3, r3, #3
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	4a84      	ldr	r2, [pc, #528]	@ (800469c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80044be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044da:	e087      	b.n	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80046a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004502:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800451e:	e065      	b.n	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b59      	ldr	r3, [pc, #356]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a03 	vldr	s12, [r7, #12]
 8004546:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004562:	e043      	b.n	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80046ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004576:	4b48      	ldr	r3, [pc, #288]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	ed97 6a03 	vldr	s12, [r7, #12]
 800458a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a6:	e021      	b.n	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ba:	4b37      	ldr	r3, [pc, #220]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80045ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	0a5b      	lsrs	r3, r3, #9
 80045f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004606:	edd7 6a07 	vldr	s13, [r7, #28]
 800460a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004612:	ee17 2a90 	vmov	r2, s15
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800461a:	4b1f      	ldr	r3, [pc, #124]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004634:	edd7 6a07 	vldr	s13, [r7, #28]
 8004638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004640:	ee17 2a90 	vmov	r2, s15
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004648:	4b13      	ldr	r3, [pc, #76]	@ (8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	0e1b      	lsrs	r3, r3, #24
 800464e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800465e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004662:	edd7 6a07 	vldr	s13, [r7, #28]
 8004666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466e:	ee17 2a90 	vmov	r2, s15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004676:	e008      	b.n	800468a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]
}
 800468a:	bf00      	nop
 800468c:	3724      	adds	r7, #36	@ 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	58024400 	.word	0x58024400
 800469c:	03d09000 	.word	0x03d09000
 80046a0:	46000000 	.word	0x46000000
 80046a4:	4c742400 	.word	0x4c742400
 80046a8:	4a742400 	.word	0x4a742400
 80046ac:	4bbebc20 	.word	0x4bbebc20

080046b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046be:	4b53      	ldr	r3, [pc, #332]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d101      	bne.n	80046ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e099      	b.n	8004802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046ce:	4b4f      	ldr	r3, [pc, #316]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4e      	ldr	r2, [pc, #312]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046da:	f7fc fe01 	bl	80012e0 <HAL_GetTick>
 80046de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046e2:	f7fc fdfd 	bl	80012e0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e086      	b.n	8004802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046f4:	4b45      	ldr	r3, [pc, #276]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004700:	4b42      	ldr	r3, [pc, #264]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	493f      	ldr	r1, [pc, #252]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004710:	4313      	orrs	r3, r2
 8004712:	628b      	str	r3, [r1, #40]	@ 0x28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	3b01      	subs	r3, #1
 800471a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	3b01      	subs	r3, #1
 8004724:	025b      	lsls	r3, r3, #9
 8004726:	b29b      	uxth	r3, r3
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	3b01      	subs	r3, #1
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	3b01      	subs	r3, #1
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004744:	4931      	ldr	r1, [pc, #196]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800474a:	4b30      	ldr	r3, [pc, #192]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	492d      	ldr	r1, [pc, #180]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800475c:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	f023 0220 	bic.w	r2, r3, #32
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4928      	ldr	r1, [pc, #160]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800476a:	4313      	orrs	r3, r2
 800476c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800476e:	4b27      	ldr	r3, [pc, #156]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	4a26      	ldr	r2, [pc, #152]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004774:	f023 0310 	bic.w	r3, r3, #16
 8004778:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800477a:	4b24      	ldr	r3, [pc, #144]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800477c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800477e:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <RCCEx_PLL2_Config+0x160>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	69d2      	ldr	r2, [r2, #28]
 8004786:	00d2      	lsls	r2, r2, #3
 8004788:	4920      	ldr	r1, [pc, #128]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800478e:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 8004794:	f043 0310 	orr.w	r3, r3, #16
 8004798:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047a0:	4b1a      	ldr	r3, [pc, #104]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	4a19      	ldr	r2, [pc, #100]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047ac:	e00f      	b.n	80047ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047b4:	4b15      	ldr	r3, [pc, #84]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047c0:	e005      	b.n	80047ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047c2:	4b12      	ldr	r3, [pc, #72]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	4a11      	ldr	r2, [pc, #68]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047ce:	4b0f      	ldr	r3, [pc, #60]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a0e      	ldr	r2, [pc, #56]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fc fd81 	bl	80012e0 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047e0:	e008      	b.n	80047f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047e2:	f7fc fd7d 	bl	80012e0 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <RCCEx_PLL2_Config+0x15c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
 8004810:	ffff0007 	.word	0xffff0007

08004814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004822:	4b53      	ldr	r3, [pc, #332]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b03      	cmp	r3, #3
 800482c:	d101      	bne.n	8004832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e099      	b.n	8004966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004832:	4b4f      	ldr	r3, [pc, #316]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a4e      	ldr	r2, [pc, #312]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483e:	f7fc fd4f 	bl	80012e0 <HAL_GetTick>
 8004842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004844:	e008      	b.n	8004858 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004846:	f7fc fd4b 	bl	80012e0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e086      	b.n	8004966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004858:	4b45      	ldr	r3, [pc, #276]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004864:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	051b      	lsls	r3, r3, #20
 8004872:	493f      	ldr	r1, [pc, #252]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	628b      	str	r3, [r1, #40]	@ 0x28
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	3b01      	subs	r3, #1
 800487e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	3b01      	subs	r3, #1
 8004888:	025b      	lsls	r3, r3, #9
 800488a:	b29b      	uxth	r3, r3
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	3b01      	subs	r3, #1
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048a8:	4931      	ldr	r1, [pc, #196]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048ae:	4b30      	ldr	r3, [pc, #192]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	492d      	ldr	r1, [pc, #180]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4928      	ldr	r1, [pc, #160]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048d2:	4b27      	ldr	r3, [pc, #156]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e2:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <RCCEx_PLL3_Config+0x160>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	69d2      	ldr	r2, [r2, #28]
 80048ea:	00d2      	lsls	r2, r2, #3
 80048ec:	4920      	ldr	r1, [pc, #128]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80048f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004904:	4b1a      	ldr	r3, [pc, #104]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	4a19      	ldr	r2, [pc, #100]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800490a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800490e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004910:	e00f      	b.n	8004932 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d106      	bne.n	8004926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800491e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004922:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004924:	e005      	b.n	8004932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	4a11      	ldr	r2, [pc, #68]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800492c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004930:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004932:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a0e      	ldr	r2, [pc, #56]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fc fccf 	bl	80012e0 <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004944:	e008      	b.n	8004958 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004946:	f7fc fccb 	bl	80012e0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e006      	b.n	8004966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <RCCEx_PLL3_Config+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	ffff0007 	.word	0xffff0007

08004978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e042      	b.n	8004a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fc fad7 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2224      	movs	r2, #36	@ 0x24
 80049a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fe1e 	bl	8005604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8b3 	bl	8004b34 <UART_SetConfig>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01b      	b.n	8004a10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fe9d 	bl	8005748 <UART_CheckIdleState>
 8004a0e:	4603      	mov	r3, r0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d17b      	bne.n	8004b2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_UART_Transmit+0x26>
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e074      	b.n	8004b2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2221      	movs	r2, #33	@ 0x21
 8004a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a52:	f7fc fc45 	bl	80012e0 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a70:	d108      	bne.n	8004a84 <HAL_UART_Transmit+0x6c>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	e003      	b.n	8004a8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a8c:	e030      	b.n	8004af0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	@ 0x80
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 feff 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e03d      	b.n	8004b2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	3302      	adds	r3, #2
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	e007      	b.n	8004ade <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3301      	adds	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1c8      	bne.n	8004a8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2200      	movs	r2, #0
 8004b04:	2140      	movs	r1, #64	@ 0x40
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fec8 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e006      	b.n	8004b2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e000      	b.n	8004b2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b38:	b092      	sub	sp, #72	@ 0x48
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4bbe      	ldr	r3, [pc, #760]	@ (8004e5c <UART_SetConfig+0x328>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4ab3      	ldr	r2, [pc, #716]	@ (8004e60 <UART_SetConfig+0x32c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	4baf      	ldr	r3, [pc, #700]	@ (8004e64 <UART_SetConfig+0x330>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	f023 010f 	bic.w	r1, r3, #15
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4aa6      	ldr	r2, [pc, #664]	@ (8004e68 <UART_SetConfig+0x334>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d177      	bne.n	8004cc4 <UART_SetConfig+0x190>
 8004bd4:	4ba5      	ldr	r3, [pc, #660]	@ (8004e6c <UART_SetConfig+0x338>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bdc:	2b28      	cmp	r3, #40	@ 0x28
 8004bde:	d86d      	bhi.n	8004cbc <UART_SetConfig+0x188>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0xb4>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004cbd 	.word	0x08004cbd
 8004bf0:	08004cbd 	.word	0x08004cbd
 8004bf4:	08004cbd 	.word	0x08004cbd
 8004bf8:	08004cbd 	.word	0x08004cbd
 8004bfc:	08004cbd 	.word	0x08004cbd
 8004c00:	08004cbd 	.word	0x08004cbd
 8004c04:	08004cbd 	.word	0x08004cbd
 8004c08:	08004c95 	.word	0x08004c95
 8004c0c:	08004cbd 	.word	0x08004cbd
 8004c10:	08004cbd 	.word	0x08004cbd
 8004c14:	08004cbd 	.word	0x08004cbd
 8004c18:	08004cbd 	.word	0x08004cbd
 8004c1c:	08004cbd 	.word	0x08004cbd
 8004c20:	08004cbd 	.word	0x08004cbd
 8004c24:	08004cbd 	.word	0x08004cbd
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004cbd 	.word	0x08004cbd
 8004c30:	08004cbd 	.word	0x08004cbd
 8004c34:	08004cbd 	.word	0x08004cbd
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004cbd 	.word	0x08004cbd
 8004c40:	08004cbd 	.word	0x08004cbd
 8004c44:	08004cbd 	.word	0x08004cbd
 8004c48:	08004ca5 	.word	0x08004ca5
 8004c4c:	08004cbd 	.word	0x08004cbd
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004cbd 	.word	0x08004cbd
 8004c58:	08004cbd 	.word	0x08004cbd
 8004c5c:	08004cbd 	.word	0x08004cbd
 8004c60:	08004cbd 	.word	0x08004cbd
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004cbd 	.word	0x08004cbd
 8004c74:	08004cbd 	.word	0x08004cbd
 8004c78:	08004cbd 	.word	0x08004cbd
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c92:	e222      	b.n	80050da <UART_SetConfig+0x5a6>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9a:	e21e      	b.n	80050da <UART_SetConfig+0x5a6>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca2:	e21a      	b.n	80050da <UART_SetConfig+0x5a6>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004caa:	e216      	b.n	80050da <UART_SetConfig+0x5a6>
 8004cac:	2320      	movs	r3, #32
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb2:	e212      	b.n	80050da <UART_SetConfig+0x5a6>
 8004cb4:	2340      	movs	r3, #64	@ 0x40
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cba:	e20e      	b.n	80050da <UART_SetConfig+0x5a6>
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e20a      	b.n	80050da <UART_SetConfig+0x5a6>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a69      	ldr	r2, [pc, #420]	@ (8004e70 <UART_SetConfig+0x33c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d130      	bne.n	8004d30 <UART_SetConfig+0x1fc>
 8004cce:	4b67      	ldr	r3, [pc, #412]	@ (8004e6c <UART_SetConfig+0x338>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d826      	bhi.n	8004d28 <UART_SetConfig+0x1f4>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <UART_SetConfig+0x1ac>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	08004d09 	.word	0x08004d09
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e1ec      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d06:	e1e8      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e1e4      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e1e0      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e1dc      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d20:	2340      	movs	r3, #64	@ 0x40
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e1d8      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e1d4      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a4f      	ldr	r2, [pc, #316]	@ (8004e74 <UART_SetConfig+0x340>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d130      	bne.n	8004d9c <UART_SetConfig+0x268>
 8004d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e6c <UART_SetConfig+0x338>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d826      	bhi.n	8004d94 <UART_SetConfig+0x260>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <UART_SetConfig+0x218>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	08004d75 	.word	0x08004d75
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6a:	e1b6      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d72:	e1b2      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e1ae      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e1aa      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d84:	2320      	movs	r3, #32
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8a:	e1a6      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d8c:	2340      	movs	r3, #64	@ 0x40
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e1a2      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e19e      	b.n	80050da <UART_SetConfig+0x5a6>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a35      	ldr	r2, [pc, #212]	@ (8004e78 <UART_SetConfig+0x344>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d130      	bne.n	8004e08 <UART_SetConfig+0x2d4>
 8004da6:	4b31      	ldr	r3, [pc, #196]	@ (8004e6c <UART_SetConfig+0x338>)
 8004da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d826      	bhi.n	8004e00 <UART_SetConfig+0x2cc>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0x284>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004dd1 	.word	0x08004dd1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd6:	e180      	b.n	80050da <UART_SetConfig+0x5a6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dde:	e17c      	b.n	80050da <UART_SetConfig+0x5a6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e178      	b.n	80050da <UART_SetConfig+0x5a6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e174      	b.n	80050da <UART_SetConfig+0x5a6>
 8004df0:	2320      	movs	r3, #32
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df6:	e170      	b.n	80050da <UART_SetConfig+0x5a6>
 8004df8:	2340      	movs	r3, #64	@ 0x40
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e16c      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e168      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e7c <UART_SetConfig+0x348>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d142      	bne.n	8004e98 <UART_SetConfig+0x364>
 8004e12:	4b16      	ldr	r3, [pc, #88]	@ (8004e6c <UART_SetConfig+0x338>)
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d838      	bhi.n	8004e90 <UART_SetConfig+0x35c>
 8004e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e24 <UART_SetConfig+0x2f0>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e3d 	.word	0x08004e3d
 8004e28:	08004e45 	.word	0x08004e45
 8004e2c:	08004e4d 	.word	0x08004e4d
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e81 	.word	0x08004e81
 8004e38:	08004e89 	.word	0x08004e89
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e42:	e14a      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4a:	e146      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e52:	e142      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5a:	e13e      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e5c:	cfff69f3 	.word	0xcfff69f3
 8004e60:	58000c00 	.word	0x58000c00
 8004e64:	11fff4ff 	.word	0x11fff4ff
 8004e68:	40011000 	.word	0x40011000
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	40004400 	.word	0x40004400
 8004e74:	40004800 	.word	0x40004800
 8004e78:	40004c00 	.word	0x40004c00
 8004e7c:	40005000 	.word	0x40005000
 8004e80:	2320      	movs	r3, #32
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e86:	e128      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e88:	2340      	movs	r3, #64	@ 0x40
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8e:	e124      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e90:	2380      	movs	r3, #128	@ 0x80
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e96:	e120      	b.n	80050da <UART_SetConfig+0x5a6>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4acb      	ldr	r2, [pc, #812]	@ (80051cc <UART_SetConfig+0x698>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d176      	bne.n	8004f90 <UART_SetConfig+0x45c>
 8004ea2:	4bcb      	ldr	r3, [pc, #812]	@ (80051d0 <UART_SetConfig+0x69c>)
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eaa:	2b28      	cmp	r3, #40	@ 0x28
 8004eac:	d86c      	bhi.n	8004f88 <UART_SetConfig+0x454>
 8004eae:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <UART_SetConfig+0x380>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004f59 	.word	0x08004f59
 8004eb8:	08004f89 	.word	0x08004f89
 8004ebc:	08004f89 	.word	0x08004f89
 8004ec0:	08004f89 	.word	0x08004f89
 8004ec4:	08004f89 	.word	0x08004f89
 8004ec8:	08004f89 	.word	0x08004f89
 8004ecc:	08004f89 	.word	0x08004f89
 8004ed0:	08004f89 	.word	0x08004f89
 8004ed4:	08004f61 	.word	0x08004f61
 8004ed8:	08004f89 	.word	0x08004f89
 8004edc:	08004f89 	.word	0x08004f89
 8004ee0:	08004f89 	.word	0x08004f89
 8004ee4:	08004f89 	.word	0x08004f89
 8004ee8:	08004f89 	.word	0x08004f89
 8004eec:	08004f89 	.word	0x08004f89
 8004ef0:	08004f89 	.word	0x08004f89
 8004ef4:	08004f69 	.word	0x08004f69
 8004ef8:	08004f89 	.word	0x08004f89
 8004efc:	08004f89 	.word	0x08004f89
 8004f00:	08004f89 	.word	0x08004f89
 8004f04:	08004f89 	.word	0x08004f89
 8004f08:	08004f89 	.word	0x08004f89
 8004f0c:	08004f89 	.word	0x08004f89
 8004f10:	08004f89 	.word	0x08004f89
 8004f14:	08004f71 	.word	0x08004f71
 8004f18:	08004f89 	.word	0x08004f89
 8004f1c:	08004f89 	.word	0x08004f89
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	08004f89 	.word	0x08004f89
 8004f28:	08004f89 	.word	0x08004f89
 8004f2c:	08004f89 	.word	0x08004f89
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f79 	.word	0x08004f79
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f89 	.word	0x08004f89
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f89 	.word	0x08004f89
 8004f48:	08004f89 	.word	0x08004f89
 8004f4c:	08004f89 	.word	0x08004f89
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5e:	e0bc      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f66:	e0b8      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6e:	e0b4      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f76:	e0b0      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f78:	2320      	movs	r3, #32
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7e:	e0ac      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f80:	2340      	movs	r3, #64	@ 0x40
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e0a8      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f88:	2380      	movs	r3, #128	@ 0x80
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e0a4      	b.n	80050da <UART_SetConfig+0x5a6>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a8f      	ldr	r2, [pc, #572]	@ (80051d4 <UART_SetConfig+0x6a0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d130      	bne.n	8004ffc <UART_SetConfig+0x4c8>
 8004f9a:	4b8d      	ldr	r3, [pc, #564]	@ (80051d0 <UART_SetConfig+0x69c>)
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d826      	bhi.n	8004ff4 <UART_SetConfig+0x4c0>
 8004fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fac <UART_SetConfig+0x478>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fc5 	.word	0x08004fc5
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	08004fd5 	.word	0x08004fd5
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e086      	b.n	80050da <UART_SetConfig+0x5a6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	e082      	b.n	80050da <UART_SetConfig+0x5a6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e07e      	b.n	80050da <UART_SetConfig+0x5a6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e07a      	b.n	80050da <UART_SetConfig+0x5a6>
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e076      	b.n	80050da <UART_SetConfig+0x5a6>
 8004fec:	2340      	movs	r3, #64	@ 0x40
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e072      	b.n	80050da <UART_SetConfig+0x5a6>
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e06e      	b.n	80050da <UART_SetConfig+0x5a6>
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a75      	ldr	r2, [pc, #468]	@ (80051d8 <UART_SetConfig+0x6a4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d130      	bne.n	8005068 <UART_SetConfig+0x534>
 8005006:	4b72      	ldr	r3, [pc, #456]	@ (80051d0 <UART_SetConfig+0x69c>)
 8005008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	2b05      	cmp	r3, #5
 8005010:	d826      	bhi.n	8005060 <UART_SetConfig+0x52c>
 8005012:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <UART_SetConfig+0x4e4>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005031 	.word	0x08005031
 800501c:	08005039 	.word	0x08005039
 8005020:	08005041 	.word	0x08005041
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e050      	b.n	80050da <UART_SetConfig+0x5a6>
 8005038:	2304      	movs	r3, #4
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e04c      	b.n	80050da <UART_SetConfig+0x5a6>
 8005040:	2308      	movs	r3, #8
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e048      	b.n	80050da <UART_SetConfig+0x5a6>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e044      	b.n	80050da <UART_SetConfig+0x5a6>
 8005050:	2320      	movs	r3, #32
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e040      	b.n	80050da <UART_SetConfig+0x5a6>
 8005058:	2340      	movs	r3, #64	@ 0x40
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e03c      	b.n	80050da <UART_SetConfig+0x5a6>
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e038      	b.n	80050da <UART_SetConfig+0x5a6>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5b      	ldr	r2, [pc, #364]	@ (80051dc <UART_SetConfig+0x6a8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d130      	bne.n	80050d4 <UART_SetConfig+0x5a0>
 8005072:	4b57      	ldr	r3, [pc, #348]	@ (80051d0 <UART_SetConfig+0x69c>)
 8005074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b05      	cmp	r3, #5
 800507c:	d826      	bhi.n	80050cc <UART_SetConfig+0x598>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0x550>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	0800509d 	.word	0x0800509d
 8005088:	080050a5 	.word	0x080050a5
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050c5 	.word	0x080050c5
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e01a      	b.n	80050da <UART_SetConfig+0x5a6>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e016      	b.n	80050da <UART_SetConfig+0x5a6>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e012      	b.n	80050da <UART_SetConfig+0x5a6>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e00e      	b.n	80050da <UART_SetConfig+0x5a6>
 80050bc:	2320      	movs	r3, #32
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e00a      	b.n	80050da <UART_SetConfig+0x5a6>
 80050c4:	2340      	movs	r3, #64	@ 0x40
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e006      	b.n	80050da <UART_SetConfig+0x5a6>
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e002      	b.n	80050da <UART_SetConfig+0x5a6>
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a3f      	ldr	r2, [pc, #252]	@ (80051dc <UART_SetConfig+0x6a8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	f040 80f8 	bne.w	80052d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	dc46      	bgt.n	800517c <UART_SetConfig+0x648>
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	f2c0 8082 	blt.w	80051f8 <UART_SetConfig+0x6c4>
 80050f4:	3b02      	subs	r3, #2
 80050f6:	2b1e      	cmp	r3, #30
 80050f8:	d87e      	bhi.n	80051f8 <UART_SetConfig+0x6c4>
 80050fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <UART_SetConfig+0x5cc>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005183 	.word	0x08005183
 8005104:	080051f9 	.word	0x080051f9
 8005108:	0800518b 	.word	0x0800518b
 800510c:	080051f9 	.word	0x080051f9
 8005110:	080051f9 	.word	0x080051f9
 8005114:	080051f9 	.word	0x080051f9
 8005118:	0800519b 	.word	0x0800519b
 800511c:	080051f9 	.word	0x080051f9
 8005120:	080051f9 	.word	0x080051f9
 8005124:	080051f9 	.word	0x080051f9
 8005128:	080051f9 	.word	0x080051f9
 800512c:	080051f9 	.word	0x080051f9
 8005130:	080051f9 	.word	0x080051f9
 8005134:	080051f9 	.word	0x080051f9
 8005138:	080051ab 	.word	0x080051ab
 800513c:	080051f9 	.word	0x080051f9
 8005140:	080051f9 	.word	0x080051f9
 8005144:	080051f9 	.word	0x080051f9
 8005148:	080051f9 	.word	0x080051f9
 800514c:	080051f9 	.word	0x080051f9
 8005150:	080051f9 	.word	0x080051f9
 8005154:	080051f9 	.word	0x080051f9
 8005158:	080051f9 	.word	0x080051f9
 800515c:	080051f9 	.word	0x080051f9
 8005160:	080051f9 	.word	0x080051f9
 8005164:	080051f9 	.word	0x080051f9
 8005168:	080051f9 	.word	0x080051f9
 800516c:	080051f9 	.word	0x080051f9
 8005170:	080051f9 	.word	0x080051f9
 8005174:	080051f9 	.word	0x080051f9
 8005178:	080051eb 	.word	0x080051eb
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d037      	beq.n	80051f0 <UART_SetConfig+0x6bc>
 8005180:	e03a      	b.n	80051f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005182:	f7fe ffd7 	bl	8004134 <HAL_RCCEx_GetD3PCLK1Freq>
 8005186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005188:	e03c      	b.n	8005204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800518a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe ffe6 	bl	8004160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005198:	e034      	b.n	8005204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800519a:	f107 0318 	add.w	r3, r7, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff f932 	bl	8004408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051a8:	e02c      	b.n	8005204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <UART_SetConfig+0x69c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <UART_SetConfig+0x69c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	08db      	lsrs	r3, r3, #3
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	4a07      	ldr	r2, [pc, #28]	@ (80051e0 <UART_SetConfig+0x6ac>)
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051c8:	e01c      	b.n	8005204 <UART_SetConfig+0x6d0>
 80051ca:	bf00      	nop
 80051cc:	40011400 	.word	0x40011400
 80051d0:	58024400 	.word	0x58024400
 80051d4:	40007800 	.word	0x40007800
 80051d8:	40007c00 	.word	0x40007c00
 80051dc:	58000c00 	.word	0x58000c00
 80051e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80051e4:	4b9d      	ldr	r3, [pc, #628]	@ (800545c <UART_SetConfig+0x928>)
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e8:	e00c      	b.n	8005204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051ea:	4b9d      	ldr	r3, [pc, #628]	@ (8005460 <UART_SetConfig+0x92c>)
 80051ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051ee:	e009      	b.n	8005204 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f6:	e005      	b.n	8005204 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005202:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 81de 	beq.w	80055c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	4a94      	ldr	r2, [pc, #592]	@ (8005464 <UART_SetConfig+0x930>)
 8005212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005216:	461a      	mov	r2, r3
 8005218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521a:	fbb3 f3f2 	udiv	r3, r3, r2
 800521e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	4413      	add	r3, r2
 800522a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522c:	429a      	cmp	r2, r3
 800522e:	d305      	bcc.n	800523c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005238:	429a      	cmp	r2, r3
 800523a:	d903      	bls.n	8005244 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005242:	e1c1      	b.n	80055c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005246:	2200      	movs	r2, #0
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	60fa      	str	r2, [r7, #12]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	4a84      	ldr	r2, [pc, #528]	@ (8005464 <UART_SetConfig+0x930>)
 8005252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005256:	b29b      	uxth	r3, r3
 8005258:	2200      	movs	r2, #0
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005266:	f7fb f893 	bl	8000390 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4610      	mov	r0, r2
 8005270:	4619      	mov	r1, r3
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	020b      	lsls	r3, r1, #8
 800527c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005280:	0202      	lsls	r2, r0, #8
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	6849      	ldr	r1, [r1, #4]
 8005286:	0849      	lsrs	r1, r1, #1
 8005288:	2000      	movs	r0, #0
 800528a:	460c      	mov	r4, r1
 800528c:	4605      	mov	r5, r0
 800528e:	eb12 0804 	adds.w	r8, r2, r4
 8005292:	eb43 0905 	adc.w	r9, r3, r5
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	469a      	mov	sl, r3
 800529e:	4693      	mov	fp, r2
 80052a0:	4652      	mov	r2, sl
 80052a2:	465b      	mov	r3, fp
 80052a4:	4640      	mov	r0, r8
 80052a6:	4649      	mov	r1, r9
 80052a8:	f7fb f872 	bl	8000390 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4613      	mov	r3, r2
 80052b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ba:	d308      	bcc.n	80052ce <UART_SetConfig+0x79a>
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c2:	d204      	bcs.n	80052ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052ca:	60da      	str	r2, [r3, #12]
 80052cc:	e17c      	b.n	80055c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80052d4:	e178      	b.n	80055c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052de:	f040 80c5 	bne.w	800546c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80052e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	dc48      	bgt.n	800537c <UART_SetConfig+0x848>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db7b      	blt.n	80053e6 <UART_SetConfig+0x8b2>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d879      	bhi.n	80053e6 <UART_SetConfig+0x8b2>
 80052f2:	a201      	add	r2, pc, #4	@ (adr r2, 80052f8 <UART_SetConfig+0x7c4>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	08005383 	.word	0x08005383
 80052fc:	0800538b 	.word	0x0800538b
 8005300:	080053e7 	.word	0x080053e7
 8005304:	080053e7 	.word	0x080053e7
 8005308:	08005393 	.word	0x08005393
 800530c:	080053e7 	.word	0x080053e7
 8005310:	080053e7 	.word	0x080053e7
 8005314:	080053e7 	.word	0x080053e7
 8005318:	080053a3 	.word	0x080053a3
 800531c:	080053e7 	.word	0x080053e7
 8005320:	080053e7 	.word	0x080053e7
 8005324:	080053e7 	.word	0x080053e7
 8005328:	080053e7 	.word	0x080053e7
 800532c:	080053e7 	.word	0x080053e7
 8005330:	080053e7 	.word	0x080053e7
 8005334:	080053e7 	.word	0x080053e7
 8005338:	080053b3 	.word	0x080053b3
 800533c:	080053e7 	.word	0x080053e7
 8005340:	080053e7 	.word	0x080053e7
 8005344:	080053e7 	.word	0x080053e7
 8005348:	080053e7 	.word	0x080053e7
 800534c:	080053e7 	.word	0x080053e7
 8005350:	080053e7 	.word	0x080053e7
 8005354:	080053e7 	.word	0x080053e7
 8005358:	080053e7 	.word	0x080053e7
 800535c:	080053e7 	.word	0x080053e7
 8005360:	080053e7 	.word	0x080053e7
 8005364:	080053e7 	.word	0x080053e7
 8005368:	080053e7 	.word	0x080053e7
 800536c:	080053e7 	.word	0x080053e7
 8005370:	080053e7 	.word	0x080053e7
 8005374:	080053e7 	.word	0x080053e7
 8005378:	080053d9 	.word	0x080053d9
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d02e      	beq.n	80053de <UART_SetConfig+0x8aa>
 8005380:	e031      	b.n	80053e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005382:	f7fd fca1 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8005386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005388:	e033      	b.n	80053f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800538a:	f7fd fcb3 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 800538e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005390:	e02f      	b.n	80053f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fee2 	bl	8004160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053a0:	e027      	b.n	80053f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053a2:	f107 0318 	add.w	r3, r7, #24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff f82e 	bl	8004408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053b0:	e01f      	b.n	80053f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005468 <UART_SetConfig+0x934>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053be:	4b2a      	ldr	r3, [pc, #168]	@ (8005468 <UART_SetConfig+0x934>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	4a24      	ldr	r2, [pc, #144]	@ (800545c <UART_SetConfig+0x928>)
 80053ca:	fa22 f303 	lsr.w	r3, r2, r3
 80053ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053d0:	e00f      	b.n	80053f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80053d2:	4b22      	ldr	r3, [pc, #136]	@ (800545c <UART_SetConfig+0x928>)
 80053d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053d6:	e00c      	b.n	80053f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053d8:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <UART_SetConfig+0x92c>)
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053dc:	e009      	b.n	80053f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053e4:	e005      	b.n	80053f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80053f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80e7 	beq.w	80055c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	4a19      	ldr	r2, [pc, #100]	@ (8005464 <UART_SetConfig+0x930>)
 8005400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005404:	461a      	mov	r2, r3
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	fbb3 f3f2 	udiv	r3, r3, r2
 800540c:	005a      	lsls	r2, r3, #1
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	441a      	add	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	fbb2 f3f3 	udiv	r3, r2, r3
 800541e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005422:	2b0f      	cmp	r3, #15
 8005424:	d916      	bls.n	8005454 <UART_SetConfig+0x920>
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800542c:	d212      	bcs.n	8005454 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800542e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005430:	b29b      	uxth	r3, r3
 8005432:	f023 030f 	bic.w	r3, r3, #15
 8005436:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	b29a      	uxth	r2, r3
 8005444:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005446:	4313      	orrs	r3, r2
 8005448:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	e0b9      	b.n	80055c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800545a:	e0b5      	b.n	80055c8 <UART_SetConfig+0xa94>
 800545c:	03d09000 	.word	0x03d09000
 8005460:	003d0900 	.word	0x003d0900
 8005464:	08006c1c 	.word	0x08006c1c
 8005468:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800546c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005470:	2b20      	cmp	r3, #32
 8005472:	dc49      	bgt.n	8005508 <UART_SetConfig+0x9d4>
 8005474:	2b00      	cmp	r3, #0
 8005476:	db7c      	blt.n	8005572 <UART_SetConfig+0xa3e>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d87a      	bhi.n	8005572 <UART_SetConfig+0xa3e>
 800547c:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <UART_SetConfig+0x950>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	0800550f 	.word	0x0800550f
 8005488:	08005517 	.word	0x08005517
 800548c:	08005573 	.word	0x08005573
 8005490:	08005573 	.word	0x08005573
 8005494:	0800551f 	.word	0x0800551f
 8005498:	08005573 	.word	0x08005573
 800549c:	08005573 	.word	0x08005573
 80054a0:	08005573 	.word	0x08005573
 80054a4:	0800552f 	.word	0x0800552f
 80054a8:	08005573 	.word	0x08005573
 80054ac:	08005573 	.word	0x08005573
 80054b0:	08005573 	.word	0x08005573
 80054b4:	08005573 	.word	0x08005573
 80054b8:	08005573 	.word	0x08005573
 80054bc:	08005573 	.word	0x08005573
 80054c0:	08005573 	.word	0x08005573
 80054c4:	0800553f 	.word	0x0800553f
 80054c8:	08005573 	.word	0x08005573
 80054cc:	08005573 	.word	0x08005573
 80054d0:	08005573 	.word	0x08005573
 80054d4:	08005573 	.word	0x08005573
 80054d8:	08005573 	.word	0x08005573
 80054dc:	08005573 	.word	0x08005573
 80054e0:	08005573 	.word	0x08005573
 80054e4:	08005573 	.word	0x08005573
 80054e8:	08005573 	.word	0x08005573
 80054ec:	08005573 	.word	0x08005573
 80054f0:	08005573 	.word	0x08005573
 80054f4:	08005573 	.word	0x08005573
 80054f8:	08005573 	.word	0x08005573
 80054fc:	08005573 	.word	0x08005573
 8005500:	08005573 	.word	0x08005573
 8005504:	08005565 	.word	0x08005565
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d02e      	beq.n	800556a <UART_SetConfig+0xa36>
 800550c:	e031      	b.n	8005572 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800550e:	f7fd fbdb 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8005512:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005514:	e033      	b.n	800557e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005516:	f7fd fbed 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 800551a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800551c:	e02f      	b.n	800557e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800551e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fe1c 	bl	8004160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800552c:	e027      	b.n	800557e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552e:	f107 0318 	add.w	r3, r7, #24
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe ff68 	bl	8004408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800553c:	e01f      	b.n	800557e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553e:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <UART_SetConfig+0xac0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800554a:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <UART_SetConfig+0xac0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	08db      	lsrs	r3, r3, #3
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	4a28      	ldr	r2, [pc, #160]	@ (80055f8 <UART_SetConfig+0xac4>)
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800555c:	e00f      	b.n	800557e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800555e:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <UART_SetConfig+0xac4>)
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005562:	e00c      	b.n	800557e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005564:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <UART_SetConfig+0xac8>)
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005568:	e009      	b.n	800557e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005570:	e005      	b.n	800557e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800557c:	bf00      	nop
    }

    if (pclk != 0U)
 800557e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d021      	beq.n	80055c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	4a1d      	ldr	r2, [pc, #116]	@ (8005600 <UART_SetConfig+0xacc>)
 800558a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800558e:	461a      	mov	r2, r3
 8005590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005592:	fbb3 f2f2 	udiv	r2, r3, r2
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	441a      	add	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d909      	bls.n	80055c2 <UART_SetConfig+0xa8e>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b4:	d205      	bcs.n	80055c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
 80055c0:	e002      	b.n	80055c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2200      	movs	r2, #0
 80055dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3748      	adds	r7, #72	@ 0x48
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	03d09000 	.word	0x03d09000
 80055fc:	003d0900 	.word	0x003d0900
 8005600:	08006c1c 	.word	0x08006c1c

08005604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01a      	beq.n	800571a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005702:	d10a      	bne.n	800571a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b098      	sub	sp, #96	@ 0x60
 800574c:	af02      	add	r7, sp, #8
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005758:	f7fb fdc2 	bl	80012e0 <HAL_GetTick>
 800575c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b08      	cmp	r3, #8
 800576a:	d12f      	bne.n	80057cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005774:	2200      	movs	r2, #0
 8005776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f88e 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d022      	beq.n	80057cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800579a:	653b      	str	r3, [r7, #80]	@ 0x50
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e063      	b.n	8005894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d149      	bne.n	800586e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e2:	2200      	movs	r2, #0
 80057e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f857 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d03c      	beq.n	800586e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	623b      	str	r3, [r7, #32]
   return(result);
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005812:	633b      	str	r3, [r7, #48]	@ 0x30
 8005814:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e6      	bne.n	80057f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	60fb      	str	r3, [r7, #12]
   return(result);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005846:	61fa      	str	r2, [r7, #28]
 8005848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	69b9      	ldr	r1, [r7, #24]
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	617b      	str	r3, [r7, #20]
   return(result);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e012      	b.n	8005894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3758      	adds	r7, #88	@ 0x58
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4613      	mov	r3, r2
 80058aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ac:	e04f      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d04b      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fb fd13 	bl	80012e0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <UART_WaitOnFlagUntilTimeout+0x30>
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e04e      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d037      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b80      	cmp	r3, #128	@ 0x80
 80058e2:	d034      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b40      	cmp	r3, #64	@ 0x40
 80058e8:	d031      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d110      	bne.n	800591a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f839 	bl	8005978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2208      	movs	r2, #8
 800590a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e029      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005928:	d111      	bne.n	800594e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f81f 	bl	8005978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e00f      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d0a0      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b095      	sub	sp, #84	@ 0x54
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599e:	643b      	str	r3, [r7, #64]	@ 0x40
 80059a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e6      	bne.n	8005980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a40 <UART_EndRxTransfer+0xc8>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d118      	bne.n	8005a20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f023 0310 	bic.w	r3, r3, #16
 8005a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6979      	ldr	r1, [r7, #20]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e6      	bne.n	80059ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a34:	bf00      	nop
 8005a36:	3754      	adds	r7, #84	@ 0x54
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	effffffe 	.word	0xeffffffe

08005a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e027      	b.n	8005aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2224      	movs	r2, #36	@ 0x24
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e02d      	b.n	8005b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2224      	movs	r2, #36	@ 0x24
 8005ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f850 	bl	8005bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e02d      	b.n	8005ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2224      	movs	r2, #36	@ 0x24
 8005b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f812 	bl	8005bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d108      	bne.n	8005bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bd0:	e031      	b.n	8005c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bd6:	2310      	movs	r3, #16
 8005bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	0e5b      	lsrs	r3, r3, #25
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	0f5b      	lsrs	r3, r3, #29
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	7b3a      	ldrb	r2, [r7, #12]
 8005bfe:	4911      	ldr	r1, [pc, #68]	@ (8005c44 <UARTEx_SetNbDataToProcess+0x94>)
 8005c00:	5c8a      	ldrb	r2, [r1, r2]
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c06:	7b3a      	ldrb	r2, [r7, #12]
 8005c08:	490f      	ldr	r1, [pc, #60]	@ (8005c48 <UARTEx_SetNbDataToProcess+0x98>)
 8005c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	7b7a      	ldrb	r2, [r7, #13]
 8005c1c:	4909      	ldr	r1, [pc, #36]	@ (8005c44 <UARTEx_SetNbDataToProcess+0x94>)
 8005c1e:	5c8a      	ldrb	r2, [r1, r2]
 8005c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c24:	7b7a      	ldrb	r2, [r7, #13]
 8005c26:	4908      	ldr	r1, [pc, #32]	@ (8005c48 <UARTEx_SetNbDataToProcess+0x98>)
 8005c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	08006c34 	.word	0x08006c34
 8005c48:	08006c3c 	.word	0x08006c3c

08005c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	f107 001c 	add.w	r0, r7, #28
 8005c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d121      	bne.n	8005caa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	4b2c      	ldr	r3, [pc, #176]	@ (8005d28 <USB_CoreInit+0xdc>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d105      	bne.n	8005c9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 faaa 	bl	80061f8 <USB_CoreReset>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e01b      	b.n	8005ce2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa9e 	bl	80061f8 <USB_CoreReset>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cd4:	e005      	b.n	8005ce2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ce2:	7fbb      	ldrb	r3, [r7, #30]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d116      	bne.n	8005d16 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <USB_CoreInit+0xe0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f043 0206 	orr.w	r2, r3, #6
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f043 0220 	orr.w	r2, r3, #32
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d22:	b004      	add	sp, #16
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	ffbdffbf 	.word	0xffbdffbf
 8005d2c:	03ee0000 	.word	0x03ee0000

08005d30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 0201 	bic.w	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d115      	bne.n	8005da0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d80:	200a      	movs	r0, #10
 8005d82:	f7fb fab9 	bl	80012f8 <HAL_Delay>
      ms += 10U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	330a      	adds	r3, #10
 8005d8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa25 	bl	80061dc <USB_GetMode>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d01e      	beq.n	8005dd6 <USB_SetCurrentMode+0x84>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d9c:	d9f0      	bls.n	8005d80 <USB_SetCurrentMode+0x2e>
 8005d9e:	e01a      	b.n	8005dd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d115      	bne.n	8005dd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005db2:	200a      	movs	r0, #10
 8005db4:	f7fb faa0 	bl	80012f8 <HAL_Delay>
      ms += 10U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	330a      	adds	r3, #10
 8005dbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fa0c 	bl	80061dc <USB_GetMode>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <USB_SetCurrentMode+0x84>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dce:	d9f0      	bls.n	8005db2 <USB_SetCurrentMode+0x60>
 8005dd0:	e001      	b.n	8005dd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e005      	b.n	8005de2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005dda:	d101      	bne.n	8005de0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dec:	b084      	sub	sp, #16
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e009      	b.n	8005e20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3340      	adds	r3, #64	@ 0x40
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b0e      	cmp	r3, #14
 8005e24:	d9f2      	bls.n	8005e0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d11c      	bne.n	8005e68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e3c:	f043 0302 	orr.w	r3, r3, #2
 8005e40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e005      	b.n	8005e74 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10d      	bne.n	8005ea4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f968 	bl	8006168 <USB_SetDevSpeed>
 8005e98:	e008      	b.n	8005eac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f963 	bl	8006168 <USB_SetDevSpeed>
 8005ea2:	e003      	b.n	8005eac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ea4:	2103      	movs	r1, #3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f95e 	bl	8006168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005eac:	2110      	movs	r1, #16
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8fa 	bl	80060a8 <USB_FlushTxFifo>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f924 	bl	800610c <USB_FlushRxFifo>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eec:	461a      	mov	r2, r3
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	e043      	b.n	8005f80 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f0e:	d118      	bne.n	8005f42 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f22:	461a      	mov	r2, r3
 8005f24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e013      	b.n	8005f54 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e008      	b.n	8005f54 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2300      	movs	r3, #0
 8005f52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	461a      	mov	r2, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f72:	461a      	mov	r2, r3
 8005f74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f84:	461a      	mov	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d3b5      	bcc.n	8005ef8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	e043      	b.n	800601a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa8:	d118      	bne.n	8005fdc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	e013      	b.n	8005fee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e008      	b.n	8005fee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006012:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3301      	adds	r3, #1
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800601e:	461a      	mov	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4293      	cmp	r3, r2
 8006024:	d3b5      	bcc.n	8005f92 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006038:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006046:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f043 0210 	orr.w	r2, r3, #16
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <USB_DevInit+0x2b4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006068:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f043 0208 	orr.w	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800607c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006080:	2b01      	cmp	r3, #1
 8006082:	d105      	bne.n	8006090 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	4b06      	ldr	r3, [pc, #24]	@ (80060a4 <USB_DevInit+0x2b8>)
 800608a:	4313      	orrs	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800609c:	b004      	add	sp, #16
 800609e:	4770      	bx	lr
 80060a0:	803c3800 	.word	0x803c3800
 80060a4:	40000004 	.word	0x40000004

080060a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c2:	d901      	bls.n	80060c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01b      	b.n	8006100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	daf2      	bge.n	80060b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	019b      	lsls	r3, r3, #6
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ec:	d901      	bls.n	80060f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e006      	b.n	8006100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d0f0      	beq.n	80060e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006124:	d901      	bls.n	800612a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e018      	b.n	800615c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	daf2      	bge.n	8006118 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2210      	movs	r2, #16
 800613a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006148:	d901      	bls.n	800614e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e006      	b.n	800615c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b10      	cmp	r3, #16
 8006158:	d0f0      	beq.n	800613c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061b4:	f023 0303 	bic.w	r3, r3, #3
 80061b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f003 0301 	and.w	r3, r3, #1
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006210:	d901      	bls.n	8006216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e01b      	b.n	800624e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	daf2      	bge.n	8006204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800623a:	d901      	bls.n	8006240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e006      	b.n	800624e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d0f0      	beq.n	800622e <USB_CoreReset+0x36>

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <siprintf>:
 800625c:	b40e      	push	{r1, r2, r3}
 800625e:	b510      	push	{r4, lr}
 8006260:	b09d      	sub	sp, #116	@ 0x74
 8006262:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006264:	9002      	str	r0, [sp, #8]
 8006266:	9006      	str	r0, [sp, #24]
 8006268:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800626c:	480a      	ldr	r0, [pc, #40]	@ (8006298 <siprintf+0x3c>)
 800626e:	9107      	str	r1, [sp, #28]
 8006270:	9104      	str	r1, [sp, #16]
 8006272:	490a      	ldr	r1, [pc, #40]	@ (800629c <siprintf+0x40>)
 8006274:	f853 2b04 	ldr.w	r2, [r3], #4
 8006278:	9105      	str	r1, [sp, #20]
 800627a:	2400      	movs	r4, #0
 800627c:	a902      	add	r1, sp, #8
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006284:	f000 f994 	bl	80065b0 <_svfiprintf_r>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	701c      	strb	r4, [r3, #0]
 800628c:	b01d      	add	sp, #116	@ 0x74
 800628e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006292:	b003      	add	sp, #12
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	24000030 	.word	0x24000030
 800629c:	ffff0208 	.word	0xffff0208

080062a0 <memset>:
 80062a0:	4402      	add	r2, r0
 80062a2:	4603      	mov	r3, r0
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d100      	bne.n	80062aa <memset+0xa>
 80062a8:	4770      	bx	lr
 80062aa:	f803 1b01 	strb.w	r1, [r3], #1
 80062ae:	e7f9      	b.n	80062a4 <memset+0x4>

080062b0 <__errno>:
 80062b0:	4b01      	ldr	r3, [pc, #4]	@ (80062b8 <__errno+0x8>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	24000030 	.word	0x24000030

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	4d0d      	ldr	r5, [pc, #52]	@ (80062f4 <__libc_init_array+0x38>)
 80062c0:	4c0d      	ldr	r4, [pc, #52]	@ (80062f8 <__libc_init_array+0x3c>)
 80062c2:	1b64      	subs	r4, r4, r5
 80062c4:	10a4      	asrs	r4, r4, #2
 80062c6:	2600      	movs	r6, #0
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	4d0b      	ldr	r5, [pc, #44]	@ (80062fc <__libc_init_array+0x40>)
 80062ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006300 <__libc_init_array+0x44>)
 80062d0:	f000 fc64 	bl	8006b9c <_init>
 80062d4:	1b64      	subs	r4, r4, r5
 80062d6:	10a4      	asrs	r4, r4, #2
 80062d8:	2600      	movs	r6, #0
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	08006c80 	.word	0x08006c80
 80062f8:	08006c80 	.word	0x08006c80
 80062fc:	08006c80 	.word	0x08006c80
 8006300:	08006c84 	.word	0x08006c84

08006304 <__retarget_lock_acquire_recursive>:
 8006304:	4770      	bx	lr

08006306 <__retarget_lock_release_recursive>:
 8006306:	4770      	bx	lr

08006308 <_free_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4605      	mov	r5, r0
 800630c:	2900      	cmp	r1, #0
 800630e:	d041      	beq.n	8006394 <_free_r+0x8c>
 8006310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006314:	1f0c      	subs	r4, r1, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	bfb8      	it	lt
 800631a:	18e4      	addlt	r4, r4, r3
 800631c:	f000 f8e0 	bl	80064e0 <__malloc_lock>
 8006320:	4a1d      	ldr	r2, [pc, #116]	@ (8006398 <_free_r+0x90>)
 8006322:	6813      	ldr	r3, [r2, #0]
 8006324:	b933      	cbnz	r3, 8006334 <_free_r+0x2c>
 8006326:	6063      	str	r3, [r4, #4]
 8006328:	6014      	str	r4, [r2, #0]
 800632a:	4628      	mov	r0, r5
 800632c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006330:	f000 b8dc 	b.w	80064ec <__malloc_unlock>
 8006334:	42a3      	cmp	r3, r4
 8006336:	d908      	bls.n	800634a <_free_r+0x42>
 8006338:	6820      	ldr	r0, [r4, #0]
 800633a:	1821      	adds	r1, r4, r0
 800633c:	428b      	cmp	r3, r1
 800633e:	bf01      	itttt	eq
 8006340:	6819      	ldreq	r1, [r3, #0]
 8006342:	685b      	ldreq	r3, [r3, #4]
 8006344:	1809      	addeq	r1, r1, r0
 8006346:	6021      	streq	r1, [r4, #0]
 8006348:	e7ed      	b.n	8006326 <_free_r+0x1e>
 800634a:	461a      	mov	r2, r3
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b10b      	cbz	r3, 8006354 <_free_r+0x4c>
 8006350:	42a3      	cmp	r3, r4
 8006352:	d9fa      	bls.n	800634a <_free_r+0x42>
 8006354:	6811      	ldr	r1, [r2, #0]
 8006356:	1850      	adds	r0, r2, r1
 8006358:	42a0      	cmp	r0, r4
 800635a:	d10b      	bne.n	8006374 <_free_r+0x6c>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	4401      	add	r1, r0
 8006360:	1850      	adds	r0, r2, r1
 8006362:	4283      	cmp	r3, r0
 8006364:	6011      	str	r1, [r2, #0]
 8006366:	d1e0      	bne.n	800632a <_free_r+0x22>
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	6053      	str	r3, [r2, #4]
 800636e:	4408      	add	r0, r1
 8006370:	6010      	str	r0, [r2, #0]
 8006372:	e7da      	b.n	800632a <_free_r+0x22>
 8006374:	d902      	bls.n	800637c <_free_r+0x74>
 8006376:	230c      	movs	r3, #12
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	e7d6      	b.n	800632a <_free_r+0x22>
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	1821      	adds	r1, r4, r0
 8006380:	428b      	cmp	r3, r1
 8006382:	bf04      	itt	eq
 8006384:	6819      	ldreq	r1, [r3, #0]
 8006386:	685b      	ldreq	r3, [r3, #4]
 8006388:	6063      	str	r3, [r4, #4]
 800638a:	bf04      	itt	eq
 800638c:	1809      	addeq	r1, r1, r0
 800638e:	6021      	streq	r1, [r4, #0]
 8006390:	6054      	str	r4, [r2, #4]
 8006392:	e7ca      	b.n	800632a <_free_r+0x22>
 8006394:	bd38      	pop	{r3, r4, r5, pc}
 8006396:	bf00      	nop
 8006398:	2400076c 	.word	0x2400076c

0800639c <sbrk_aligned>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4e0f      	ldr	r6, [pc, #60]	@ (80063dc <sbrk_aligned+0x40>)
 80063a0:	460c      	mov	r4, r1
 80063a2:	6831      	ldr	r1, [r6, #0]
 80063a4:	4605      	mov	r5, r0
 80063a6:	b911      	cbnz	r1, 80063ae <sbrk_aligned+0x12>
 80063a8:	f000 fba4 	bl	8006af4 <_sbrk_r>
 80063ac:	6030      	str	r0, [r6, #0]
 80063ae:	4621      	mov	r1, r4
 80063b0:	4628      	mov	r0, r5
 80063b2:	f000 fb9f 	bl	8006af4 <_sbrk_r>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	d103      	bne.n	80063c2 <sbrk_aligned+0x26>
 80063ba:	f04f 34ff 	mov.w	r4, #4294967295
 80063be:	4620      	mov	r0, r4
 80063c0:	bd70      	pop	{r4, r5, r6, pc}
 80063c2:	1cc4      	adds	r4, r0, #3
 80063c4:	f024 0403 	bic.w	r4, r4, #3
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d0f8      	beq.n	80063be <sbrk_aligned+0x22>
 80063cc:	1a21      	subs	r1, r4, r0
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 fb90 	bl	8006af4 <_sbrk_r>
 80063d4:	3001      	adds	r0, #1
 80063d6:	d1f2      	bne.n	80063be <sbrk_aligned+0x22>
 80063d8:	e7ef      	b.n	80063ba <sbrk_aligned+0x1e>
 80063da:	bf00      	nop
 80063dc:	24000768 	.word	0x24000768

080063e0 <_malloc_r>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	1ccd      	adds	r5, r1, #3
 80063e6:	f025 0503 	bic.w	r5, r5, #3
 80063ea:	3508      	adds	r5, #8
 80063ec:	2d0c      	cmp	r5, #12
 80063ee:	bf38      	it	cc
 80063f0:	250c      	movcc	r5, #12
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	4606      	mov	r6, r0
 80063f6:	db01      	blt.n	80063fc <_malloc_r+0x1c>
 80063f8:	42a9      	cmp	r1, r5
 80063fa:	d904      	bls.n	8006406 <_malloc_r+0x26>
 80063fc:	230c      	movs	r3, #12
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	2000      	movs	r0, #0
 8006402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064dc <_malloc_r+0xfc>
 800640a:	f000 f869 	bl	80064e0 <__malloc_lock>
 800640e:	f8d8 3000 	ldr.w	r3, [r8]
 8006412:	461c      	mov	r4, r3
 8006414:	bb44      	cbnz	r4, 8006468 <_malloc_r+0x88>
 8006416:	4629      	mov	r1, r5
 8006418:	4630      	mov	r0, r6
 800641a:	f7ff ffbf 	bl	800639c <sbrk_aligned>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	4604      	mov	r4, r0
 8006422:	d158      	bne.n	80064d6 <_malloc_r+0xf6>
 8006424:	f8d8 4000 	ldr.w	r4, [r8]
 8006428:	4627      	mov	r7, r4
 800642a:	2f00      	cmp	r7, #0
 800642c:	d143      	bne.n	80064b6 <_malloc_r+0xd6>
 800642e:	2c00      	cmp	r4, #0
 8006430:	d04b      	beq.n	80064ca <_malloc_r+0xea>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	4639      	mov	r1, r7
 8006436:	4630      	mov	r0, r6
 8006438:	eb04 0903 	add.w	r9, r4, r3
 800643c:	f000 fb5a 	bl	8006af4 <_sbrk_r>
 8006440:	4581      	cmp	r9, r0
 8006442:	d142      	bne.n	80064ca <_malloc_r+0xea>
 8006444:	6821      	ldr	r1, [r4, #0]
 8006446:	1a6d      	subs	r5, r5, r1
 8006448:	4629      	mov	r1, r5
 800644a:	4630      	mov	r0, r6
 800644c:	f7ff ffa6 	bl	800639c <sbrk_aligned>
 8006450:	3001      	adds	r0, #1
 8006452:	d03a      	beq.n	80064ca <_malloc_r+0xea>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	442b      	add	r3, r5
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	f8d8 3000 	ldr.w	r3, [r8]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	bb62      	cbnz	r2, 80064bc <_malloc_r+0xdc>
 8006462:	f8c8 7000 	str.w	r7, [r8]
 8006466:	e00f      	b.n	8006488 <_malloc_r+0xa8>
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	1b52      	subs	r2, r2, r5
 800646c:	d420      	bmi.n	80064b0 <_malloc_r+0xd0>
 800646e:	2a0b      	cmp	r2, #11
 8006470:	d917      	bls.n	80064a2 <_malloc_r+0xc2>
 8006472:	1961      	adds	r1, r4, r5
 8006474:	42a3      	cmp	r3, r4
 8006476:	6025      	str	r5, [r4, #0]
 8006478:	bf18      	it	ne
 800647a:	6059      	strne	r1, [r3, #4]
 800647c:	6863      	ldr	r3, [r4, #4]
 800647e:	bf08      	it	eq
 8006480:	f8c8 1000 	streq.w	r1, [r8]
 8006484:	5162      	str	r2, [r4, r5]
 8006486:	604b      	str	r3, [r1, #4]
 8006488:	4630      	mov	r0, r6
 800648a:	f000 f82f 	bl	80064ec <__malloc_unlock>
 800648e:	f104 000b 	add.w	r0, r4, #11
 8006492:	1d23      	adds	r3, r4, #4
 8006494:	f020 0007 	bic.w	r0, r0, #7
 8006498:	1ac2      	subs	r2, r0, r3
 800649a:	bf1c      	itt	ne
 800649c:	1a1b      	subne	r3, r3, r0
 800649e:	50a3      	strne	r3, [r4, r2]
 80064a0:	e7af      	b.n	8006402 <_malloc_r+0x22>
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	bf0c      	ite	eq
 80064a8:	f8c8 2000 	streq.w	r2, [r8]
 80064ac:	605a      	strne	r2, [r3, #4]
 80064ae:	e7eb      	b.n	8006488 <_malloc_r+0xa8>
 80064b0:	4623      	mov	r3, r4
 80064b2:	6864      	ldr	r4, [r4, #4]
 80064b4:	e7ae      	b.n	8006414 <_malloc_r+0x34>
 80064b6:	463c      	mov	r4, r7
 80064b8:	687f      	ldr	r7, [r7, #4]
 80064ba:	e7b6      	b.n	800642a <_malloc_r+0x4a>
 80064bc:	461a      	mov	r2, r3
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d1fb      	bne.n	80064bc <_malloc_r+0xdc>
 80064c4:	2300      	movs	r3, #0
 80064c6:	6053      	str	r3, [r2, #4]
 80064c8:	e7de      	b.n	8006488 <_malloc_r+0xa8>
 80064ca:	230c      	movs	r3, #12
 80064cc:	6033      	str	r3, [r6, #0]
 80064ce:	4630      	mov	r0, r6
 80064d0:	f000 f80c 	bl	80064ec <__malloc_unlock>
 80064d4:	e794      	b.n	8006400 <_malloc_r+0x20>
 80064d6:	6005      	str	r5, [r0, #0]
 80064d8:	e7d6      	b.n	8006488 <_malloc_r+0xa8>
 80064da:	bf00      	nop
 80064dc:	2400076c 	.word	0x2400076c

080064e0 <__malloc_lock>:
 80064e0:	4801      	ldr	r0, [pc, #4]	@ (80064e8 <__malloc_lock+0x8>)
 80064e2:	f7ff bf0f 	b.w	8006304 <__retarget_lock_acquire_recursive>
 80064e6:	bf00      	nop
 80064e8:	24000764 	.word	0x24000764

080064ec <__malloc_unlock>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__malloc_unlock+0x8>)
 80064ee:	f7ff bf0a 	b.w	8006306 <__retarget_lock_release_recursive>
 80064f2:	bf00      	nop
 80064f4:	24000764 	.word	0x24000764

080064f8 <__ssputs_r>:
 80064f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	688e      	ldr	r6, [r1, #8]
 80064fe:	461f      	mov	r7, r3
 8006500:	42be      	cmp	r6, r7
 8006502:	680b      	ldr	r3, [r1, #0]
 8006504:	4682      	mov	sl, r0
 8006506:	460c      	mov	r4, r1
 8006508:	4690      	mov	r8, r2
 800650a:	d82d      	bhi.n	8006568 <__ssputs_r+0x70>
 800650c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006510:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006514:	d026      	beq.n	8006564 <__ssputs_r+0x6c>
 8006516:	6965      	ldr	r5, [r4, #20]
 8006518:	6909      	ldr	r1, [r1, #16]
 800651a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800651e:	eba3 0901 	sub.w	r9, r3, r1
 8006522:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006526:	1c7b      	adds	r3, r7, #1
 8006528:	444b      	add	r3, r9
 800652a:	106d      	asrs	r5, r5, #1
 800652c:	429d      	cmp	r5, r3
 800652e:	bf38      	it	cc
 8006530:	461d      	movcc	r5, r3
 8006532:	0553      	lsls	r3, r2, #21
 8006534:	d527      	bpl.n	8006586 <__ssputs_r+0x8e>
 8006536:	4629      	mov	r1, r5
 8006538:	f7ff ff52 	bl	80063e0 <_malloc_r>
 800653c:	4606      	mov	r6, r0
 800653e:	b360      	cbz	r0, 800659a <__ssputs_r+0xa2>
 8006540:	6921      	ldr	r1, [r4, #16]
 8006542:	464a      	mov	r2, r9
 8006544:	f000 fae6 	bl	8006b14 <memcpy>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800654e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	6126      	str	r6, [r4, #16]
 8006556:	6165      	str	r5, [r4, #20]
 8006558:	444e      	add	r6, r9
 800655a:	eba5 0509 	sub.w	r5, r5, r9
 800655e:	6026      	str	r6, [r4, #0]
 8006560:	60a5      	str	r5, [r4, #8]
 8006562:	463e      	mov	r6, r7
 8006564:	42be      	cmp	r6, r7
 8006566:	d900      	bls.n	800656a <__ssputs_r+0x72>
 8006568:	463e      	mov	r6, r7
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	4632      	mov	r2, r6
 800656e:	4641      	mov	r1, r8
 8006570:	f000 faa6 	bl	8006ac0 <memmove>
 8006574:	68a3      	ldr	r3, [r4, #8]
 8006576:	1b9b      	subs	r3, r3, r6
 8006578:	60a3      	str	r3, [r4, #8]
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	4433      	add	r3, r6
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	2000      	movs	r0, #0
 8006582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006586:	462a      	mov	r2, r5
 8006588:	f000 fad2 	bl	8006b30 <_realloc_r>
 800658c:	4606      	mov	r6, r0
 800658e:	2800      	cmp	r0, #0
 8006590:	d1e0      	bne.n	8006554 <__ssputs_r+0x5c>
 8006592:	6921      	ldr	r1, [r4, #16]
 8006594:	4650      	mov	r0, sl
 8006596:	f7ff feb7 	bl	8006308 <_free_r>
 800659a:	230c      	movs	r3, #12
 800659c:	f8ca 3000 	str.w	r3, [sl]
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e7e9      	b.n	8006582 <__ssputs_r+0x8a>
	...

080065b0 <_svfiprintf_r>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	4698      	mov	r8, r3
 80065b6:	898b      	ldrh	r3, [r1, #12]
 80065b8:	061b      	lsls	r3, r3, #24
 80065ba:	b09d      	sub	sp, #116	@ 0x74
 80065bc:	4607      	mov	r7, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	d510      	bpl.n	80065e6 <_svfiprintf_r+0x36>
 80065c4:	690b      	ldr	r3, [r1, #16]
 80065c6:	b973      	cbnz	r3, 80065e6 <_svfiprintf_r+0x36>
 80065c8:	2140      	movs	r1, #64	@ 0x40
 80065ca:	f7ff ff09 	bl	80063e0 <_malloc_r>
 80065ce:	6028      	str	r0, [r5, #0]
 80065d0:	6128      	str	r0, [r5, #16]
 80065d2:	b930      	cbnz	r0, 80065e2 <_svfiprintf_r+0x32>
 80065d4:	230c      	movs	r3, #12
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	b01d      	add	sp, #116	@ 0x74
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	2340      	movs	r3, #64	@ 0x40
 80065e4:	616b      	str	r3, [r5, #20]
 80065e6:	2300      	movs	r3, #0
 80065e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ea:	2320      	movs	r3, #32
 80065ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065f4:	2330      	movs	r3, #48	@ 0x30
 80065f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006794 <_svfiprintf_r+0x1e4>
 80065fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065fe:	f04f 0901 	mov.w	r9, #1
 8006602:	4623      	mov	r3, r4
 8006604:	469a      	mov	sl, r3
 8006606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800660a:	b10a      	cbz	r2, 8006610 <_svfiprintf_r+0x60>
 800660c:	2a25      	cmp	r2, #37	@ 0x25
 800660e:	d1f9      	bne.n	8006604 <_svfiprintf_r+0x54>
 8006610:	ebba 0b04 	subs.w	fp, sl, r4
 8006614:	d00b      	beq.n	800662e <_svfiprintf_r+0x7e>
 8006616:	465b      	mov	r3, fp
 8006618:	4622      	mov	r2, r4
 800661a:	4629      	mov	r1, r5
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff ff6b 	bl	80064f8 <__ssputs_r>
 8006622:	3001      	adds	r0, #1
 8006624:	f000 80a7 	beq.w	8006776 <_svfiprintf_r+0x1c6>
 8006628:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800662a:	445a      	add	r2, fp
 800662c:	9209      	str	r2, [sp, #36]	@ 0x24
 800662e:	f89a 3000 	ldrb.w	r3, [sl]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 809f 	beq.w	8006776 <_svfiprintf_r+0x1c6>
 8006638:	2300      	movs	r3, #0
 800663a:	f04f 32ff 	mov.w	r2, #4294967295
 800663e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006642:	f10a 0a01 	add.w	sl, sl, #1
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800664e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006650:	4654      	mov	r4, sl
 8006652:	2205      	movs	r2, #5
 8006654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006658:	484e      	ldr	r0, [pc, #312]	@ (8006794 <_svfiprintf_r+0x1e4>)
 800665a:	f7f9 fe49 	bl	80002f0 <memchr>
 800665e:	9a04      	ldr	r2, [sp, #16]
 8006660:	b9d8      	cbnz	r0, 800669a <_svfiprintf_r+0xea>
 8006662:	06d0      	lsls	r0, r2, #27
 8006664:	bf44      	itt	mi
 8006666:	2320      	movmi	r3, #32
 8006668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800666c:	0711      	lsls	r1, r2, #28
 800666e:	bf44      	itt	mi
 8006670:	232b      	movmi	r3, #43	@ 0x2b
 8006672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006676:	f89a 3000 	ldrb.w	r3, [sl]
 800667a:	2b2a      	cmp	r3, #42	@ 0x2a
 800667c:	d015      	beq.n	80066aa <_svfiprintf_r+0xfa>
 800667e:	9a07      	ldr	r2, [sp, #28]
 8006680:	4654      	mov	r4, sl
 8006682:	2000      	movs	r0, #0
 8006684:	f04f 0c0a 	mov.w	ip, #10
 8006688:	4621      	mov	r1, r4
 800668a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800668e:	3b30      	subs	r3, #48	@ 0x30
 8006690:	2b09      	cmp	r3, #9
 8006692:	d94b      	bls.n	800672c <_svfiprintf_r+0x17c>
 8006694:	b1b0      	cbz	r0, 80066c4 <_svfiprintf_r+0x114>
 8006696:	9207      	str	r2, [sp, #28]
 8006698:	e014      	b.n	80066c4 <_svfiprintf_r+0x114>
 800669a:	eba0 0308 	sub.w	r3, r0, r8
 800669e:	fa09 f303 	lsl.w	r3, r9, r3
 80066a2:	4313      	orrs	r3, r2
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	46a2      	mov	sl, r4
 80066a8:	e7d2      	b.n	8006650 <_svfiprintf_r+0xa0>
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	1d19      	adds	r1, r3, #4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	9103      	str	r1, [sp, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bfbb      	ittet	lt
 80066b6:	425b      	neglt	r3, r3
 80066b8:	f042 0202 	orrlt.w	r2, r2, #2
 80066bc:	9307      	strge	r3, [sp, #28]
 80066be:	9307      	strlt	r3, [sp, #28]
 80066c0:	bfb8      	it	lt
 80066c2:	9204      	strlt	r2, [sp, #16]
 80066c4:	7823      	ldrb	r3, [r4, #0]
 80066c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80066c8:	d10a      	bne.n	80066e0 <_svfiprintf_r+0x130>
 80066ca:	7863      	ldrb	r3, [r4, #1]
 80066cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ce:	d132      	bne.n	8006736 <_svfiprintf_r+0x186>
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	1d1a      	adds	r2, r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	9203      	str	r2, [sp, #12]
 80066d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066dc:	3402      	adds	r4, #2
 80066de:	9305      	str	r3, [sp, #20]
 80066e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067a4 <_svfiprintf_r+0x1f4>
 80066e4:	7821      	ldrb	r1, [r4, #0]
 80066e6:	2203      	movs	r2, #3
 80066e8:	4650      	mov	r0, sl
 80066ea:	f7f9 fe01 	bl	80002f0 <memchr>
 80066ee:	b138      	cbz	r0, 8006700 <_svfiprintf_r+0x150>
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	eba0 000a 	sub.w	r0, r0, sl
 80066f6:	2240      	movs	r2, #64	@ 0x40
 80066f8:	4082      	lsls	r2, r0
 80066fa:	4313      	orrs	r3, r2
 80066fc:	3401      	adds	r4, #1
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006704:	4824      	ldr	r0, [pc, #144]	@ (8006798 <_svfiprintf_r+0x1e8>)
 8006706:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800670a:	2206      	movs	r2, #6
 800670c:	f7f9 fdf0 	bl	80002f0 <memchr>
 8006710:	2800      	cmp	r0, #0
 8006712:	d036      	beq.n	8006782 <_svfiprintf_r+0x1d2>
 8006714:	4b21      	ldr	r3, [pc, #132]	@ (800679c <_svfiprintf_r+0x1ec>)
 8006716:	bb1b      	cbnz	r3, 8006760 <_svfiprintf_r+0x1b0>
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	3307      	adds	r3, #7
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	3308      	adds	r3, #8
 8006722:	9303      	str	r3, [sp, #12]
 8006724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006726:	4433      	add	r3, r6
 8006728:	9309      	str	r3, [sp, #36]	@ 0x24
 800672a:	e76a      	b.n	8006602 <_svfiprintf_r+0x52>
 800672c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006730:	460c      	mov	r4, r1
 8006732:	2001      	movs	r0, #1
 8006734:	e7a8      	b.n	8006688 <_svfiprintf_r+0xd8>
 8006736:	2300      	movs	r3, #0
 8006738:	3401      	adds	r4, #1
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	4619      	mov	r1, r3
 800673e:	f04f 0c0a 	mov.w	ip, #10
 8006742:	4620      	mov	r0, r4
 8006744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006748:	3a30      	subs	r2, #48	@ 0x30
 800674a:	2a09      	cmp	r2, #9
 800674c:	d903      	bls.n	8006756 <_svfiprintf_r+0x1a6>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0c6      	beq.n	80066e0 <_svfiprintf_r+0x130>
 8006752:	9105      	str	r1, [sp, #20]
 8006754:	e7c4      	b.n	80066e0 <_svfiprintf_r+0x130>
 8006756:	fb0c 2101 	mla	r1, ip, r1, r2
 800675a:	4604      	mov	r4, r0
 800675c:	2301      	movs	r3, #1
 800675e:	e7f0      	b.n	8006742 <_svfiprintf_r+0x192>
 8006760:	ab03      	add	r3, sp, #12
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	462a      	mov	r2, r5
 8006766:	4b0e      	ldr	r3, [pc, #56]	@ (80067a0 <_svfiprintf_r+0x1f0>)
 8006768:	a904      	add	r1, sp, #16
 800676a:	4638      	mov	r0, r7
 800676c:	f3af 8000 	nop.w
 8006770:	1c42      	adds	r2, r0, #1
 8006772:	4606      	mov	r6, r0
 8006774:	d1d6      	bne.n	8006724 <_svfiprintf_r+0x174>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	065b      	lsls	r3, r3, #25
 800677a:	f53f af2d 	bmi.w	80065d8 <_svfiprintf_r+0x28>
 800677e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006780:	e72c      	b.n	80065dc <_svfiprintf_r+0x2c>
 8006782:	ab03      	add	r3, sp, #12
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	462a      	mov	r2, r5
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <_svfiprintf_r+0x1f0>)
 800678a:	a904      	add	r1, sp, #16
 800678c:	4638      	mov	r0, r7
 800678e:	f000 f879 	bl	8006884 <_printf_i>
 8006792:	e7ed      	b.n	8006770 <_svfiprintf_r+0x1c0>
 8006794:	08006c44 	.word	0x08006c44
 8006798:	08006c4e 	.word	0x08006c4e
 800679c:	00000000 	.word	0x00000000
 80067a0:	080064f9 	.word	0x080064f9
 80067a4:	08006c4a 	.word	0x08006c4a

080067a8 <_printf_common>:
 80067a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	4616      	mov	r6, r2
 80067ae:	4698      	mov	r8, r3
 80067b0:	688a      	ldr	r2, [r1, #8]
 80067b2:	690b      	ldr	r3, [r1, #16]
 80067b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bfb8      	it	lt
 80067bc:	4613      	movlt	r3, r2
 80067be:	6033      	str	r3, [r6, #0]
 80067c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067c4:	4607      	mov	r7, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	b10a      	cbz	r2, 80067ce <_printf_common+0x26>
 80067ca:	3301      	adds	r3, #1
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	0699      	lsls	r1, r3, #26
 80067d2:	bf42      	ittt	mi
 80067d4:	6833      	ldrmi	r3, [r6, #0]
 80067d6:	3302      	addmi	r3, #2
 80067d8:	6033      	strmi	r3, [r6, #0]
 80067da:	6825      	ldr	r5, [r4, #0]
 80067dc:	f015 0506 	ands.w	r5, r5, #6
 80067e0:	d106      	bne.n	80067f0 <_printf_common+0x48>
 80067e2:	f104 0a19 	add.w	sl, r4, #25
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	6832      	ldr	r2, [r6, #0]
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	dc26      	bgt.n	800683e <_printf_common+0x96>
 80067f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	3b00      	subs	r3, #0
 80067f8:	bf18      	it	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	0692      	lsls	r2, r2, #26
 80067fe:	d42b      	bmi.n	8006858 <_printf_common+0xb0>
 8006800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006804:	4641      	mov	r1, r8
 8006806:	4638      	mov	r0, r7
 8006808:	47c8      	blx	r9
 800680a:	3001      	adds	r0, #1
 800680c:	d01e      	beq.n	800684c <_printf_common+0xa4>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	6922      	ldr	r2, [r4, #16]
 8006812:	f003 0306 	and.w	r3, r3, #6
 8006816:	2b04      	cmp	r3, #4
 8006818:	bf02      	ittt	eq
 800681a:	68e5      	ldreq	r5, [r4, #12]
 800681c:	6833      	ldreq	r3, [r6, #0]
 800681e:	1aed      	subeq	r5, r5, r3
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	bf0c      	ite	eq
 8006824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006828:	2500      	movne	r5, #0
 800682a:	4293      	cmp	r3, r2
 800682c:	bfc4      	itt	gt
 800682e:	1a9b      	subgt	r3, r3, r2
 8006830:	18ed      	addgt	r5, r5, r3
 8006832:	2600      	movs	r6, #0
 8006834:	341a      	adds	r4, #26
 8006836:	42b5      	cmp	r5, r6
 8006838:	d11a      	bne.n	8006870 <_printf_common+0xc8>
 800683a:	2000      	movs	r0, #0
 800683c:	e008      	b.n	8006850 <_printf_common+0xa8>
 800683e:	2301      	movs	r3, #1
 8006840:	4652      	mov	r2, sl
 8006842:	4641      	mov	r1, r8
 8006844:	4638      	mov	r0, r7
 8006846:	47c8      	blx	r9
 8006848:	3001      	adds	r0, #1
 800684a:	d103      	bne.n	8006854 <_printf_common+0xac>
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006854:	3501      	adds	r5, #1
 8006856:	e7c6      	b.n	80067e6 <_printf_common+0x3e>
 8006858:	18e1      	adds	r1, r4, r3
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	2030      	movs	r0, #48	@ 0x30
 800685e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006862:	4422      	add	r2, r4
 8006864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800686c:	3302      	adds	r3, #2
 800686e:	e7c7      	b.n	8006800 <_printf_common+0x58>
 8006870:	2301      	movs	r3, #1
 8006872:	4622      	mov	r2, r4
 8006874:	4641      	mov	r1, r8
 8006876:	4638      	mov	r0, r7
 8006878:	47c8      	blx	r9
 800687a:	3001      	adds	r0, #1
 800687c:	d0e6      	beq.n	800684c <_printf_common+0xa4>
 800687e:	3601      	adds	r6, #1
 8006880:	e7d9      	b.n	8006836 <_printf_common+0x8e>
	...

08006884 <_printf_i>:
 8006884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	7e0f      	ldrb	r7, [r1, #24]
 800688a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800688c:	2f78      	cmp	r7, #120	@ 0x78
 800688e:	4691      	mov	r9, r2
 8006890:	4680      	mov	r8, r0
 8006892:	460c      	mov	r4, r1
 8006894:	469a      	mov	sl, r3
 8006896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800689a:	d807      	bhi.n	80068ac <_printf_i+0x28>
 800689c:	2f62      	cmp	r7, #98	@ 0x62
 800689e:	d80a      	bhi.n	80068b6 <_printf_i+0x32>
 80068a0:	2f00      	cmp	r7, #0
 80068a2:	f000 80d1 	beq.w	8006a48 <_printf_i+0x1c4>
 80068a6:	2f58      	cmp	r7, #88	@ 0x58
 80068a8:	f000 80b8 	beq.w	8006a1c <_printf_i+0x198>
 80068ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068b4:	e03a      	b.n	800692c <_printf_i+0xa8>
 80068b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ba:	2b15      	cmp	r3, #21
 80068bc:	d8f6      	bhi.n	80068ac <_printf_i+0x28>
 80068be:	a101      	add	r1, pc, #4	@ (adr r1, 80068c4 <_printf_i+0x40>)
 80068c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068c4:	0800691d 	.word	0x0800691d
 80068c8:	08006931 	.word	0x08006931
 80068cc:	080068ad 	.word	0x080068ad
 80068d0:	080068ad 	.word	0x080068ad
 80068d4:	080068ad 	.word	0x080068ad
 80068d8:	080068ad 	.word	0x080068ad
 80068dc:	08006931 	.word	0x08006931
 80068e0:	080068ad 	.word	0x080068ad
 80068e4:	080068ad 	.word	0x080068ad
 80068e8:	080068ad 	.word	0x080068ad
 80068ec:	080068ad 	.word	0x080068ad
 80068f0:	08006a2f 	.word	0x08006a2f
 80068f4:	0800695b 	.word	0x0800695b
 80068f8:	080069e9 	.word	0x080069e9
 80068fc:	080068ad 	.word	0x080068ad
 8006900:	080068ad 	.word	0x080068ad
 8006904:	08006a51 	.word	0x08006a51
 8006908:	080068ad 	.word	0x080068ad
 800690c:	0800695b 	.word	0x0800695b
 8006910:	080068ad 	.word	0x080068ad
 8006914:	080068ad 	.word	0x080068ad
 8006918:	080069f1 	.word	0x080069f1
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6032      	str	r2, [r6, #0]
 8006924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800692c:	2301      	movs	r3, #1
 800692e:	e09c      	b.n	8006a6a <_printf_i+0x1e6>
 8006930:	6833      	ldr	r3, [r6, #0]
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	1d19      	adds	r1, r3, #4
 8006936:	6031      	str	r1, [r6, #0]
 8006938:	0606      	lsls	r6, r0, #24
 800693a:	d501      	bpl.n	8006940 <_printf_i+0xbc>
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	e003      	b.n	8006948 <_printf_i+0xc4>
 8006940:	0645      	lsls	r5, r0, #25
 8006942:	d5fb      	bpl.n	800693c <_printf_i+0xb8>
 8006944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006948:	2d00      	cmp	r5, #0
 800694a:	da03      	bge.n	8006954 <_printf_i+0xd0>
 800694c:	232d      	movs	r3, #45	@ 0x2d
 800694e:	426d      	negs	r5, r5
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006954:	4858      	ldr	r0, [pc, #352]	@ (8006ab8 <_printf_i+0x234>)
 8006956:	230a      	movs	r3, #10
 8006958:	e011      	b.n	800697e <_printf_i+0xfa>
 800695a:	6821      	ldr	r1, [r4, #0]
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	0608      	lsls	r0, r1, #24
 8006960:	f853 5b04 	ldr.w	r5, [r3], #4
 8006964:	d402      	bmi.n	800696c <_printf_i+0xe8>
 8006966:	0649      	lsls	r1, r1, #25
 8006968:	bf48      	it	mi
 800696a:	b2ad      	uxthmi	r5, r5
 800696c:	2f6f      	cmp	r7, #111	@ 0x6f
 800696e:	4852      	ldr	r0, [pc, #328]	@ (8006ab8 <_printf_i+0x234>)
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	bf14      	ite	ne
 8006974:	230a      	movne	r3, #10
 8006976:	2308      	moveq	r3, #8
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800697e:	6866      	ldr	r6, [r4, #4]
 8006980:	60a6      	str	r6, [r4, #8]
 8006982:	2e00      	cmp	r6, #0
 8006984:	db05      	blt.n	8006992 <_printf_i+0x10e>
 8006986:	6821      	ldr	r1, [r4, #0]
 8006988:	432e      	orrs	r6, r5
 800698a:	f021 0104 	bic.w	r1, r1, #4
 800698e:	6021      	str	r1, [r4, #0]
 8006990:	d04b      	beq.n	8006a2a <_printf_i+0x1a6>
 8006992:	4616      	mov	r6, r2
 8006994:	fbb5 f1f3 	udiv	r1, r5, r3
 8006998:	fb03 5711 	mls	r7, r3, r1, r5
 800699c:	5dc7      	ldrb	r7, [r0, r7]
 800699e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069a2:	462f      	mov	r7, r5
 80069a4:	42bb      	cmp	r3, r7
 80069a6:	460d      	mov	r5, r1
 80069a8:	d9f4      	bls.n	8006994 <_printf_i+0x110>
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d10b      	bne.n	80069c6 <_printf_i+0x142>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	07df      	lsls	r7, r3, #31
 80069b2:	d508      	bpl.n	80069c6 <_printf_i+0x142>
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	6861      	ldr	r1, [r4, #4]
 80069b8:	4299      	cmp	r1, r3
 80069ba:	bfde      	ittt	le
 80069bc:	2330      	movle	r3, #48	@ 0x30
 80069be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069c6:	1b92      	subs	r2, r2, r6
 80069c8:	6122      	str	r2, [r4, #16]
 80069ca:	f8cd a000 	str.w	sl, [sp]
 80069ce:	464b      	mov	r3, r9
 80069d0:	aa03      	add	r2, sp, #12
 80069d2:	4621      	mov	r1, r4
 80069d4:	4640      	mov	r0, r8
 80069d6:	f7ff fee7 	bl	80067a8 <_printf_common>
 80069da:	3001      	adds	r0, #1
 80069dc:	d14a      	bne.n	8006a74 <_printf_i+0x1f0>
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	b004      	add	sp, #16
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	f043 0320 	orr.w	r3, r3, #32
 80069ee:	6023      	str	r3, [r4, #0]
 80069f0:	4832      	ldr	r0, [pc, #200]	@ (8006abc <_printf_i+0x238>)
 80069f2:	2778      	movs	r7, #120	@ 0x78
 80069f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	6831      	ldr	r1, [r6, #0]
 80069fc:	061f      	lsls	r7, r3, #24
 80069fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a02:	d402      	bmi.n	8006a0a <_printf_i+0x186>
 8006a04:	065f      	lsls	r7, r3, #25
 8006a06:	bf48      	it	mi
 8006a08:	b2ad      	uxthmi	r5, r5
 8006a0a:	6031      	str	r1, [r6, #0]
 8006a0c:	07d9      	lsls	r1, r3, #31
 8006a0e:	bf44      	itt	mi
 8006a10:	f043 0320 	orrmi.w	r3, r3, #32
 8006a14:	6023      	strmi	r3, [r4, #0]
 8006a16:	b11d      	cbz	r5, 8006a20 <_printf_i+0x19c>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	e7ad      	b.n	8006978 <_printf_i+0xf4>
 8006a1c:	4826      	ldr	r0, [pc, #152]	@ (8006ab8 <_printf_i+0x234>)
 8006a1e:	e7e9      	b.n	80069f4 <_printf_i+0x170>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	f023 0320 	bic.w	r3, r3, #32
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	e7f6      	b.n	8006a18 <_printf_i+0x194>
 8006a2a:	4616      	mov	r6, r2
 8006a2c:	e7bd      	b.n	80069aa <_printf_i+0x126>
 8006a2e:	6833      	ldr	r3, [r6, #0]
 8006a30:	6825      	ldr	r5, [r4, #0]
 8006a32:	6961      	ldr	r1, [r4, #20]
 8006a34:	1d18      	adds	r0, r3, #4
 8006a36:	6030      	str	r0, [r6, #0]
 8006a38:	062e      	lsls	r6, r5, #24
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	d501      	bpl.n	8006a42 <_printf_i+0x1be>
 8006a3e:	6019      	str	r1, [r3, #0]
 8006a40:	e002      	b.n	8006a48 <_printf_i+0x1c4>
 8006a42:	0668      	lsls	r0, r5, #25
 8006a44:	d5fb      	bpl.n	8006a3e <_printf_i+0x1ba>
 8006a46:	8019      	strh	r1, [r3, #0]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	e7bc      	b.n	80069ca <_printf_i+0x146>
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	1d1a      	adds	r2, r3, #4
 8006a54:	6032      	str	r2, [r6, #0]
 8006a56:	681e      	ldr	r6, [r3, #0]
 8006a58:	6862      	ldr	r2, [r4, #4]
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f7f9 fc47 	bl	80002f0 <memchr>
 8006a62:	b108      	cbz	r0, 8006a68 <_printf_i+0x1e4>
 8006a64:	1b80      	subs	r0, r0, r6
 8006a66:	6060      	str	r0, [r4, #4]
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a72:	e7aa      	b.n	80069ca <_printf_i+0x146>
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	4632      	mov	r2, r6
 8006a78:	4649      	mov	r1, r9
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	47d0      	blx	sl
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0ad      	beq.n	80069de <_printf_i+0x15a>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	079b      	lsls	r3, r3, #30
 8006a86:	d413      	bmi.n	8006ab0 <_printf_i+0x22c>
 8006a88:	68e0      	ldr	r0, [r4, #12]
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	4298      	cmp	r0, r3
 8006a8e:	bfb8      	it	lt
 8006a90:	4618      	movlt	r0, r3
 8006a92:	e7a6      	b.n	80069e2 <_printf_i+0x15e>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4632      	mov	r2, r6
 8006a98:	4649      	mov	r1, r9
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	47d0      	blx	sl
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d09d      	beq.n	80069de <_printf_i+0x15a>
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	68e3      	ldr	r3, [r4, #12]
 8006aa6:	9903      	ldr	r1, [sp, #12]
 8006aa8:	1a5b      	subs	r3, r3, r1
 8006aaa:	42ab      	cmp	r3, r5
 8006aac:	dcf2      	bgt.n	8006a94 <_printf_i+0x210>
 8006aae:	e7eb      	b.n	8006a88 <_printf_i+0x204>
 8006ab0:	2500      	movs	r5, #0
 8006ab2:	f104 0619 	add.w	r6, r4, #25
 8006ab6:	e7f5      	b.n	8006aa4 <_printf_i+0x220>
 8006ab8:	08006c55 	.word	0x08006c55
 8006abc:	08006c66 	.word	0x08006c66

08006ac0 <memmove>:
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	eb01 0402 	add.w	r4, r1, r2
 8006ac8:	d902      	bls.n	8006ad0 <memmove+0x10>
 8006aca:	4284      	cmp	r4, r0
 8006acc:	4623      	mov	r3, r4
 8006ace:	d807      	bhi.n	8006ae0 <memmove+0x20>
 8006ad0:	1e43      	subs	r3, r0, #1
 8006ad2:	42a1      	cmp	r1, r4
 8006ad4:	d008      	beq.n	8006ae8 <memmove+0x28>
 8006ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ade:	e7f8      	b.n	8006ad2 <memmove+0x12>
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	d100      	bne.n	8006aea <memmove+0x2a>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006af2:	e7f7      	b.n	8006ae4 <memmove+0x24>

08006af4 <_sbrk_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d06      	ldr	r5, [pc, #24]	@ (8006b10 <_sbrk_r+0x1c>)
 8006af8:	2300      	movs	r3, #0
 8006afa:	4604      	mov	r4, r0
 8006afc:	4608      	mov	r0, r1
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	f7fa f91c 	bl	8000d3c <_sbrk>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_sbrk_r+0x1a>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_sbrk_r+0x1a>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	24000760 	.word	0x24000760

08006b14 <memcpy>:
 8006b14:	440a      	add	r2, r1
 8006b16:	4291      	cmp	r1, r2
 8006b18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b1c:	d100      	bne.n	8006b20 <memcpy+0xc>
 8006b1e:	4770      	bx	lr
 8006b20:	b510      	push	{r4, lr}
 8006b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b2a:	4291      	cmp	r1, r2
 8006b2c:	d1f9      	bne.n	8006b22 <memcpy+0xe>
 8006b2e:	bd10      	pop	{r4, pc}

08006b30 <_realloc_r>:
 8006b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b34:	4607      	mov	r7, r0
 8006b36:	4614      	mov	r4, r2
 8006b38:	460d      	mov	r5, r1
 8006b3a:	b921      	cbnz	r1, 8006b46 <_realloc_r+0x16>
 8006b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b40:	4611      	mov	r1, r2
 8006b42:	f7ff bc4d 	b.w	80063e0 <_malloc_r>
 8006b46:	b92a      	cbnz	r2, 8006b54 <_realloc_r+0x24>
 8006b48:	f7ff fbde 	bl	8006308 <_free_r>
 8006b4c:	4625      	mov	r5, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	f000 f81a 	bl	8006b8c <_malloc_usable_size_r>
 8006b58:	4284      	cmp	r4, r0
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	d802      	bhi.n	8006b64 <_realloc_r+0x34>
 8006b5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b62:	d8f4      	bhi.n	8006b4e <_realloc_r+0x1e>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4638      	mov	r0, r7
 8006b68:	f7ff fc3a 	bl	80063e0 <_malloc_r>
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	b908      	cbnz	r0, 8006b74 <_realloc_r+0x44>
 8006b70:	4645      	mov	r5, r8
 8006b72:	e7ec      	b.n	8006b4e <_realloc_r+0x1e>
 8006b74:	42b4      	cmp	r4, r6
 8006b76:	4622      	mov	r2, r4
 8006b78:	4629      	mov	r1, r5
 8006b7a:	bf28      	it	cs
 8006b7c:	4632      	movcs	r2, r6
 8006b7e:	f7ff ffc9 	bl	8006b14 <memcpy>
 8006b82:	4629      	mov	r1, r5
 8006b84:	4638      	mov	r0, r7
 8006b86:	f7ff fbbf 	bl	8006308 <_free_r>
 8006b8a:	e7f1      	b.n	8006b70 <_realloc_r+0x40>

08006b8c <_malloc_usable_size_r>:
 8006b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b90:	1f18      	subs	r0, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfbc      	itt	lt
 8006b96:	580b      	ldrlt	r3, [r1, r0]
 8006b98:	18c0      	addlt	r0, r0, r3
 8006b9a:	4770      	bx	lr

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
