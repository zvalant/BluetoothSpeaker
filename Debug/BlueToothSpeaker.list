
BlueToothSpeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c34  08006c34  00007c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c3c  08006c3c  00007c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  24000000  08006c44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ec  24000080  08006cc4  00008080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400076c  08006cc4  0000876c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000150c5  00000000  00000000  000080ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dd0  00000000  00000000  0001d173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e28  00000000  00000000  0001ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000acc  00000000  00000000  00020d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000377b6  00000000  00000000  0002183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000151dc  00000000  00000000  00058ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a71b  00000000  00000000  0006e1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c88e9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f0c  00000000  00000000  001c892c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001cc838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006b58 	.word	0x08006b58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08006b58 	.word	0x08006b58

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <MX_GPIO_Init+0xf4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <MX_GPIO_Init+0xf4>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a26      	ldr	r2, [pc, #152]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_GPIO_Init+0xf4>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000714:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_GPIO_Init+0xf8>)
 8000726:	f000 ff7d 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 800072a:	f248 0360 	movw	r3, #32864	@ 0x8060
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480f      	ldr	r0, [pc, #60]	@ (800077c <MX_GPIO_Init+0xfc>)
 8000740:	f000 ff70 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_GPIO_Init+0x100>)
 8000758:	f000 ff64 	bl	8001624 <HAL_GPIO_Init>



/* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	2028      	movs	r0, #40	@ 0x28
 8000762:	f000 feb2 	bl	80014ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	@ 0x28
 8000768:	f000 fec9 	bl	80014fe <HAL_NVIC_EnableIRQ>
/* USER CODE END 2 */
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58024400 	.word	0x58024400
 8000778:	58020800 	.word	0x58020800
 800077c:	58020000 	.word	0x58020000
 8000780:	58020400 	.word	0x58020400

08000784 <InputOutputPinAssignment>:

/*InputOutputPinAssignment: Will change target pin to either an input if the m18 task is complete
 * or an output to properly execute m18 task.
 *
 */
void InputOutputPinAssignment(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = m18StatePtr->activePin.pin;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <InputOutputPinAssignment+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
	if (m18StatePtr->m18InProcess){
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <InputOutputPinAssignment+0x80>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <InputOutputPinAssignment+0x32>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e003      	b.n	80007be <InputOutputPinAssignment+0x3a>

	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
	}
	HAL_GPIO_Init(m18StatePtr->activePin.port, &GPIO_InitStruct);
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <InputOutputPinAssignment+0x80>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	1d3a      	adds	r2, r7, #4
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 ff2b 	bl	8001624 <HAL_GPIO_Init>
	if (!m18StatePtr->m18InProcess){
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <InputOutputPinAssignment+0x80>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f083 0301 	eor.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00a      	beq.n	80007f6 <InputOutputPinAssignment+0x72>
		HAL_GPIO_WritePin(m18StatePtr->activePin.port, m18StatePtr->activePin.pin, GPIO_PIN_SET);
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <InputOutputPinAssignment+0x80>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6898      	ldr	r0, [r3, #8]
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <InputOutputPinAssignment+0x80>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f001 f8df 	bl	80019b4 <HAL_GPIO_WritePin>
	}
	HAL_Delay(10);
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 fd5c 	bl	80012b4 <HAL_Delay>


}/*m18TaskTrigger: Changes the GPIO pin to an output then set pin to low to start the m18 function call process
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	24000010 	.word	0x24000010

08000808 <m18TaskTrigger>:
and track the time of the trigger to be used to bring the pin high after a delay.
*
*/
void m18TaskTrigger(void){
 8000808:	b598      	push	{r3, r4, r7, lr}
 800080a:	af00      	add	r7, sp, #0
	InputOutputPinAssignment();
 800080c:	f7ff ffba 	bl	8000784 <InputOutputPinAssignment>
	HAL_GPIO_WritePin(m18StatePtr->activePin.port,m18StatePtr->activePin.pin,GPIO_PIN_RESET);
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <m18TaskTrigger+0x38>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6898      	ldr	r0, [r3, #8]
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <m18TaskTrigger+0x38>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	b29b      	uxth	r3, r3
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f001 f8c7 	bl	80019b4 <HAL_GPIO_WritePin>
	m18StatePtr->m18InProcess = true;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <m18TaskTrigger+0x38>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2201      	movs	r2, #1
 800082c:	711a      	strb	r2, [r3, #4]
	m18StatePtr->m18StartTime = HAL_GetTick();
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <m18TaskTrigger+0x38>)
 8000830:	681c      	ldr	r4, [r3, #0]
 8000832:	f000 fd33 	bl	800129c <HAL_GetTick>
 8000836:	4603      	mov	r3, r0
 8000838:	6023      	str	r3, [r4, #0]
}
 800083a:	bf00      	nop
 800083c:	bd98      	pop	{r3, r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	24000010 	.word	0x24000010

08000844 <m18TaskCompletionCheck>:
/*m18TaskCompletionCheck: Called in a non idle state and will debounce if m18 task isnt in process.
 * After required delay the pin is set back to high ending m18 call and finish logic to complete m18 call process.
 *
 */
uint8_t m18TaskCompletionCheck(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if (!m18StatePtr->m18InProcess){
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <m18TaskCompletionCheck+0x5c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <m18TaskCompletionCheck+0x1a>
		return M18_NO_TASK_IN_PROCESS;
 800085a:	2300      	movs	r3, #0
 800085c:	e01d      	b.n	800089a <m18TaskCompletionCheck+0x56>

	}
	if (HAL_GetTick()>m18StatePtr->m18StartTime+M18_DELAY_MS){
 800085e:	f000 fd1d 	bl	800129c <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <m18TaskCompletionCheck+0x5c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2132      	movs	r1, #50	@ 0x32
 800086c:	440b      	add	r3, r1
 800086e:	429a      	cmp	r2, r3
 8000870:	d912      	bls.n	8000898 <m18TaskCompletionCheck+0x54>
		HAL_GPIO_WritePin(m18StatePtr->activePin.port, m18StatePtr->activePin.pin,GPIO_PIN_SET);
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <m18TaskCompletionCheck+0x5c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6898      	ldr	r0, [r3, #8]
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <m18TaskCompletionCheck+0x5c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	b29b      	uxth	r3, r3
 8000880:	2201      	movs	r2, #1
 8000882:	4619      	mov	r1, r3
 8000884:	f001 f896 	bl	80019b4 <HAL_GPIO_WritePin>
		InputOutputPinAssignment();
 8000888:	f7ff ff7c 	bl	8000784 <InputOutputPinAssignment>
		m18StatePtr->m18InProcess = false;
 800088c:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <m18TaskCompletionCheck+0x5c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2200      	movs	r2, #0
 8000892:	711a      	strb	r2, [r3, #4]
		return M18_TASK_COMPLETE;
 8000894:	2300      	movs	r3, #0
 8000896:	e000      	b.n	800089a <m18TaskCompletionCheck+0x56>
	}
	 return M18_TASK_INCOMPLETE;
 8000898:	23ff      	movs	r3, #255	@ 0xff

}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000010 	.word	0x24000010

080008a4 <m18Call>:
/*
 * m18Call will either debounce if m18 process is active
 * or will start a m18 function call depending on passed state
 *
 */
uint8_t m18Call(inputState currentState){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	if (m18StatePtr->m18InProcess){
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <m18Call+0x94>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <m18Call+0x1a>
		return M18_CALL_DENIED;
 80008ba:	23ff      	movs	r3, #255	@ 0xff
 80008bc:	e037      	b.n	800092e <m18Call+0x8a>
	}
	switch(currentState){
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d82e      	bhi.n	8000924 <m18Call+0x80>
 80008c6:	a201      	add	r2, pc, #4	@ (adr r2, 80008cc <m18Call+0x28>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008dd 	.word	0x080008dd
 80008d0:	080008ef 	.word	0x080008ef
 80008d4:	08000901 	.word	0x08000901
 80008d8:	08000913 	.word	0x08000913
		case STATE_PAUSE_PLAY:
			m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, PAUSE_PLAY_PIN};
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <m18Call+0x94>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a16      	ldr	r2, [pc, #88]	@ (800093c <m18Call+0x98>)
 80008e2:	3308      	adds	r3, #8
 80008e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e8:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80008ec:	e01c      	b.n	8000928 <m18Call+0x84>
		case STATE_PREV_TRACK:
			m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, PREV_TRACK_PIN};
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <m18Call+0x94>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <m18Call+0x9c>)
 80008f4:	3308      	adds	r3, #8
 80008f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fa:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80008fe:	e013      	b.n	8000928 <m18Call+0x84>
		case STATE_NEXT_TRACK:
			m18StatePtr->activePin = (PinConfig){TRACK_OPTIONS_PORT, NEXT_TRACK_PIN};
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <m18Call+0x94>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <m18Call+0xa0>)
 8000906:	3308      	adds	r3, #8
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000910:	e00a      	b.n	8000928 <m18Call+0x84>
		case STATE_POWER_OFF_ON:
			m18StatePtr->activePin = (PinConfig){M18_POWER_PORT, M18_POWER_PIN};
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <m18Call+0x94>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <m18Call+0xa4>)
 8000918:	3308      	adds	r3, #8
 800091a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091e:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8000922:	e001      	b.n	8000928 <m18Call+0x84>
		default:
			return M18_CALL_INVALID;
 8000924:	23fe      	movs	r3, #254	@ 0xfe
 8000926:	e002      	b.n	800092e <m18Call+0x8a>
	}
	m18TaskTrigger();
 8000928:	f7ff ff6e 	bl	8000808 <m18TaskTrigger>
	return M18_CALL_SUCCESS;
 800092c:	2300      	movs	r3, #0

}
 800092e:	4618      	mov	r0, r3
 8000930:	3728      	adds	r7, #40	@ 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000010 	.word	0x24000010
 800093c:	08006b70 	.word	0x08006b70
 8000940:	08006b78 	.word	0x08006b78
 8000944:	08006b80 	.word	0x08006b80
 8000948:	08006b88 	.word	0x08006b88

0800094c <stateUpdate>:

/*
 * stateUpdate: When current state is not idle state update will run m18 call
 * and check if there is a current m18 call that needs to be completed.
 */
void stateUpdate(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	uint8_t callResponse = m18Call(activeStatePtr->currentState);
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <stateUpdate+0x38>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffa2 	bl	80008a4 <m18Call>
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
	if (callResponse!= SUCCESSFUL_RESPONSE){
	}
	uint8_t taskCompleteResponse = m18TaskCompletionCheck();
 8000964:	f7ff ff6e 	bl	8000844 <m18TaskCompletionCheck>
 8000968:	4603      	mov	r3, r0
 800096a:	71bb      	strb	r3, [r7, #6]
	if (taskCompleteResponse==SUCCESSFUL_RESPONSE){
 800096c:	2200      	movs	r2, #0
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	4293      	cmp	r3, r2
 8000972:	d103      	bne.n	800097c <stateUpdate+0x30>
		activeStatePtr->currentState = STATE_IDLE;
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <stateUpdate+0x38>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
	}

}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000014 	.word	0x24000014

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800098e:	f000 f891 	bl	8000ab4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fbfd 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f821 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f7ff fe71 	bl	8000680 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800099e:	f000 fa69 	bl	8000e74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a2:	f000 fb1d 	bl	8000fe0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  const char startMsg[] = "mainStart\r\n";
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <main+0x48>)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart3, &startMsg, sizeof(startMsg)-1,1000);
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	220b      	movs	r2, #11
 80009b8:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <main+0x4c>)
 80009ba:	f004 f80b 	bl	80049d4 <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (activeStatePtr->currentState!= STATE_IDLE){
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <main+0x50>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f9      	beq.n	80009be <main+0x36>
		  stateUpdate();
 80009ca:	f7ff ffbf 	bl	800094c <stateUpdate>
	if (activeStatePtr->currentState!= STATE_IDLE){
 80009ce:	e7f6      	b.n	80009be <main+0x36>
 80009d0:	08006b90 	.word	0x08006b90
 80009d4:	240000a8 	.word	0x240000a8
 80009d8:	24000014 	.word	0x24000014

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	@ 0x70
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	224c      	movs	r2, #76	@ 0x4c
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fc34 	bl	8006258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2220      	movs	r2, #32
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fc2e 	bl	8006258 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009fc:	2002      	movs	r0, #2
 80009fe:	f001 f93d 	bl	8001c7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <SystemClock_Config+0xd0>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	4a28      	ldr	r2, [pc, #160]	@ (8000aac <SystemClock_Config+0xd0>)
 8000a0c:	f023 0301 	bic.w	r3, r3, #1
 8000a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <SystemClock_Config+0xd0>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	@ (8000ab0 <SystemClock_Config+0xd4>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a24:	4a22      	ldr	r2, [pc, #136]	@ (8000ab0 <SystemClock_Config+0xd4>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <SystemClock_Config+0xd4>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a38:	bf00      	nop
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <SystemClock_Config+0xd4>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a46:	d1f8      	bne.n	8000a3a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a48:	2322      	movs	r3, #34	@ 0x22
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a50:	2340      	movs	r3, #64	@ 0x40
 8000a52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f955 	bl	8001d10 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a6c:	f000 f84e 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	233f      	movs	r3, #63	@ 0x3f
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a84:	2340      	movs	r3, #64	@ 0x40
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fd95 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aa0:	f000 f834 	bl	8000b0c <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3770      	adds	r7, #112	@ 0x70
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	58000400 	.word	0x58000400
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ac6:	f000 fd35 	bl	8001534 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ad6:	231f      	movs	r3, #31
 8000ad8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ada:	2387      	movs	r3, #135	@ 0x87
 8000adc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fd53 	bl	80015a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000afe:	2004      	movs	r0, #4
 8000b00:	f000 fd30 	bl	8001564 <HAL_MPU_Enable>

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b24:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	58024400 	.word	0x58024400

08000b4c <updateState>:
/* USER CODE BEGIN PFP */
/*
 * updateState: will take duration tracked off user button becoming reset (button release) using overall press time to determine
 * what the current state should be.
 */
void updateState(uint32_t duration_ms){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if(duration_ms < PAUSE_PLAY_LIMIT_MS){
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <updateState+0x60>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d204      	bcs.n	8000b6a <updateState+0x1e>
		activeStatePtr->currentState = STATE_PAUSE_PLAY;
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <updateState+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
		}
	else{
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
		}

}
 8000b68:	e019      	b.n	8000b9e <updateState+0x52>
	else if (duration_ms < PREV_TRACK_LIMIT_MS){
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <updateState+0x68>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d204      	bcs.n	8000b80 <updateState+0x34>
			activeStatePtr->currentState = STATE_PREV_TRACK;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <updateState+0x64>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	e00e      	b.n	8000b9e <updateState+0x52>
	else if(duration_ms < NEXT_TRACK_LIMIT_MS){
 8000b80:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <updateState+0x6c>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d204      	bcs.n	8000b96 <updateState+0x4a>
			activeStatePtr->currentState = STATE_NEXT_TRACK;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <updateState+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2203      	movs	r2, #3
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	e003      	b.n	8000b9e <updateState+0x52>
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <updateState+0x64>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	701a      	strb	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	24000018 	.word	0x24000018
 8000bb0:	24000014 	.word	0x24000014
 8000bb4:	2400001a 	.word	0x2400001a
 8000bb8:	2400001c 	.word	0x2400001c

08000bbc <HAL_GPIO_EXTI_Callback>:
/*
 * HAL_GPIO_EXTI_Callback: checks to see if the user button triggered interrupt and then will either store
 * the last time the button was pressed or calculate amount of time pressed and change the state accordingly.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b09b      	sub	sp, #108	@ 0x6c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	if (activeStatePtr->currentState!= STATE_IDLE){
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d14a      	bne.n	8000c68 <HAL_GPIO_EXTI_Callback+0xac>
		return;

	}
	uint8_t msg[] = "Interrupt\r\n";
 8000bd2:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bd4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, &msg, strlen(msg),MAX_UART_DELAY);
 8000bde:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fb7c 	bl	80002e0 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000bf4:	4821      	ldr	r0, [pc, #132]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000bf6:	f003 feed 	bl	80049d4 <HAL_UART_Transmit>
	if (GPIO_Pin == USER_BUTTON_PIN){
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c00:	d133      	bne.n	8000c6a <HAL_GPIO_EXTI_Callback+0xae>
		if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_SET){
 8000c02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c06:	481e      	ldr	r0, [pc, #120]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000c08:	f000 febc 	bl	8001984 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d106      	bne.n	8000c20 <HAL_GPIO_EXTI_Callback+0x64>
			activeStatePtr->lastPress = HAL_GetTick();
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c14:	681c      	ldr	r4, [r3, #0]
 8000c16:	f000 fb41 	bl	800129c <HAL_GetTick>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6063      	str	r3, [r4, #4]
 8000c1e:	e024      	b.n	8000c6a <HAL_GPIO_EXTI_Callback+0xae>

		}else{
			char buff2[80];
			uint32_t duration_ms = HAL_GetTick()-activeStatePtr->lastPress;
 8000c20:	f000 fb3c 	bl	800129c <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	667b      	str	r3, [r7, #100]	@ 0x64
			updateState(duration_ms);
 8000c30:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c32:	f7ff ff8b 	bl	8000b4c <updateState>
			sprintf(buff2, "Duration: %d ms State: %d \r\n",duration_ms, activeStatePtr->currentState);
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f107 0008 	add.w	r0, r7, #8
 8000c42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c44:	490f      	ldr	r1, [pc, #60]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000c46:	f005 fae7 	bl	8006218 <siprintf>
			HAL_UART_Transmit(&huart3, buff2, strlen(buff2), MAX_UART_DELAY);
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb46 	bl	80002e0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	f107 0108 	add.w	r1, r7, #8
 8000c60:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c62:	f003 feb7 	bl	80049d4 <HAL_UART_Transmit>
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_EXTI_Callback+0xae>
		return;
 8000c68:	bf00      	nop
			}
		}

	}
 8000c6a:	376c      	adds	r7, #108	@ 0x6c
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	24000014 	.word	0x24000014
 8000c74:	08006bbc 	.word	0x08006bbc
 8000c78:	2400001e 	.word	0x2400001e
 8000c7c:	240000a8 	.word	0x240000a8
 8000c80:	58020800 	.word	0x58020800
 8000c84:	08006b9c 	.word	0x08006b9c

08000c88 <EXTI15_10_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Calls HAL EXTI handler for PC13
void EXTI15_10_IRQHandler(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c90:	f000 fea9 	bl	80019e6 <HAL_GPIO_EXTI_IRQHandler>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <MemManage_Handler+0x4>

08000cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cee:	f000 fac1 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f005 fa9e 	bl	8006268 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	24080000 	.word	0x24080000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	240000a4 	.word	0x240000a4
 8000d60:	24000770 	.word	0x24000770

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d68:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <SystemInit+0xe4>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a36      	ldr	r2, [pc, #216]	@ (8000e48 <SystemInit+0xe4>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d78:	4b34      	ldr	r3, [pc, #208]	@ (8000e4c <SystemInit+0xe8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d807      	bhi.n	8000d94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d84:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <SystemInit+0xe8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 030f 	bic.w	r3, r3, #15
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000e4c <SystemInit+0xe8>)
 8000d8e:	f043 0307 	orr.w	r3, r3, #7
 8000d92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d94:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <SystemInit+0xec>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2d      	ldr	r2, [pc, #180]	@ (8000e50 <SystemInit+0xec>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <SystemInit+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <SystemInit+0xec>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4929      	ldr	r1, [pc, #164]	@ (8000e50 <SystemInit+0xec>)
 8000dac:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <SystemInit+0xf0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <SystemInit+0xe8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <SystemInit+0xe8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 030f 	bic.w	r3, r3, #15
 8000dc6:	4a21      	ldr	r2, [pc, #132]	@ (8000e4c <SystemInit+0xe8>)
 8000dc8:	f043 0307 	orr.w	r3, r3, #7
 8000dcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <SystemInit+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <SystemInit+0xec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <SystemInit+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <SystemInit+0xec>)
 8000de2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <SystemInit+0xf4>)
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <SystemInit+0xec>)
 8000de8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <SystemInit+0xf8>)
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dec:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <SystemInit+0xec>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <SystemInit+0xfc>)
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <SystemInit+0xec>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <SystemInit+0xec>)
 8000dfa:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <SystemInit+0xfc>)
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <SystemInit+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0xec>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	@ (8000e60 <SystemInit+0xfc>)
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <SystemInit+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SystemInit+0xec>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <SystemInit+0xec>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <SystemInit+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <SystemInit+0x100>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <SystemInit+0x104>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e2e:	d202      	bcs.n	8000e36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <SystemInit+0x108>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <SystemInit+0x10c>)
 8000e38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	52002000 	.word	0x52002000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e58:	02020200 	.word	0x02020200
 8000e5c:	01ff0000 	.word	0x01ff0000
 8000e60:	01010280 	.word	0x01010280
 8000e64:	5c001000 	.word	0x5c001000
 8000e68:	ffff0000 	.word	0xffff0000
 8000e6c:	51008108 	.word	0x51008108
 8000e70:	52004000 	.word	0x52004000

08000e74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e7a:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <MX_USART3_UART_Init+0x94>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ebc:	4811      	ldr	r0, [pc, #68]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ebe:	f003 fd39 	bl	8004934 <HAL_UART_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f7ff fe20 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480d      	ldr	r0, [pc, #52]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ed0:	f004 fdcf 	bl	8005a72 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eda:	f7ff fe17 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ee2:	f004 fe04 	bl	8005aee <HAL_UARTEx_SetRxFifoThreshold>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eec:	f7ff fe0e 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ef2:	f004 fd85 	bl	8005a00 <HAL_UARTEx_DisableFifoMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000efc:	f7ff fe06 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	240000a8 	.word	0x240000a8
 8000f08:	40004800 	.word	0x40004800

08000f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	22c0      	movs	r2, #192	@ 0xc0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 f993 	bl	8006258 <memset>
  if(uartHandle->Instance==USART3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a27      	ldr	r2, [pc, #156]	@ (8000fd4 <HAL_UART_MspInit+0xc8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d146      	bne.n	8000fca <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f3c:	f04f 0202 	mov.w	r2, #2
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fec2 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f5e:	f7ff fdd5 	bl	8000b0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <HAL_UART_MspInit+0xcc>)
 8000f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f68:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <HAL_UART_MspInit+0xcc>)
 8000f6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_UART_MspInit+0xcc>)
 8000f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_UART_MspInit+0xcc>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f86:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <HAL_UART_MspInit+0xcc>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_UART_MspInit+0xcc>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <HAL_UART_MspInit+0xd0>)
 8000fc6:	f000 fb2d 	bl	8001624 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	37e8      	adds	r7, #232	@ 0xe8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004800 	.word	0x40004800
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020c00 	.word	0x58020c00

08000fe0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe6:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fec:	2209      	movs	r2, #9
 8000fee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001004:	2201      	movs	r2, #1
 8001006:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800100a:	2200      	movs	r2, #0
 800100c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001010:	2200      	movs	r2, #0
 8001012:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001016:	2201      	movs	r2, #1
 8001018:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800101c:	2201      	movs	r2, #1
 800101e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001028:	f000 fcf7 	bl	8001a1a <HAL_PCD_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001032:	f7ff fd6b 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2400013c 	.word	0x2400013c
 8001040:	40080000 	.word	0x40080000

08001044 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0ba      	sub	sp, #232	@ 0xe8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	22c0      	movs	r2, #192	@ 0xc0
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f005 f8f7 	bl	8006258 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a30      	ldr	r2, [pc, #192]	@ (8001130 <HAL_PCD_MspInit+0xec>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d159      	bne.n	8001128 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001074:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001080:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe25 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001098:	f7ff fd38 	bl	8000b0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800109c:	f000 fe28 	bl	8001cf0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	4a23      	ldr	r2, [pc, #140]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b0:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010be:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80010c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010d8:	230a      	movs	r3, #10
 80010da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4814      	ldr	r0, [pc, #80]	@ (8001138 <HAL_PCD_MspInit+0xf4>)
 80010e6:	f000 fa9d 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <HAL_PCD_MspInit+0xf4>)
 8001106:	f000 fa8d 	bl	8001624 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 800110c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 8001112:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001116:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_PCD_MspInit+0xf0>)
 800111c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	37e8      	adds	r7, #232	@ 0xe8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40080000 	.word	0x40080000
 8001134:	58024400 	.word	0x58024400
 8001138:	58020000 	.word	0x58020000

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001140:	f7ff fe10 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f005 f883 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fc0b 	bl	8000988 <main>
  bx  lr
 8001172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001178:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800117c:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8001180:	08006c44 	.word	0x08006c44
  ldr r2, =_sbss
 8001184:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001188:	2400076c 	.word	0x2400076c

0800118c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC3_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f98c 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800119c:	f001 fbc8 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_Init+0x68>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	4913      	ldr	r1, [pc, #76]	@ (80011fc <HAL_Init+0x6c>)
 80011ae:	5ccb      	ldrb	r3, [r1, r3]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_Init+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_Init+0x6c>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_Init+0x70>)
 80011d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_Init+0x74>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f814 	bl	8001208 <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e002      	b.n	80011f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fc95 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	08006bc8 	.word	0x08006bc8
 8001200:	24000024 	.word	0x24000024
 8001204:	24000020 	.word	0x24000020

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e021      	b.n	8001260 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_InitTick+0x64>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <HAL_InitTick+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f971 	bl	800151a <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f93b 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x68>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2400002c 	.word	0x2400002c
 800126c:	24000020 	.word	0x24000020
 8001270:	24000028 	.word	0x24000028

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2400002c 	.word	0x2400002c
 8001298:	24000620 	.word	0x24000620

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	24000620 	.word	0x24000620

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400002c 	.word	0x2400002c

080012fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_GetREVID+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0c1b      	lsrs	r3, r3, #16
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	5c001000 	.word	0x5c001000

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	@ (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	@ (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff40 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff33 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa4 	bl	8001470 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001538:	f3bf 8f5f 	dmb	sy
}
 800153c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_MPU_Disable+0x28>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	4a06      	ldr	r2, [pc, #24]	@ (800155c <HAL_MPU_Disable+0x28>)
 8001544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001548:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_MPU_Disable+0x2c>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	e000ed90 	.word	0xe000ed90

08001564 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_MPU_Enable+0x38>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_MPU_Enable+0x3c>)
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <HAL_MPU_Enable+0x3c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001580:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001582:	f3bf 8f4f 	dsb	sy
}
 8001586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001588:	f3bf 8f6f 	isb	sy
}
 800158c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed90 	.word	0xe000ed90
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	785a      	ldrb	r2, [r3, #1]
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_MPU_ConfigRegion+0x7c>)
 80015b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <HAL_MPU_ConfigRegion+0x7c>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_MPU_ConfigRegion+0x7c>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015c0:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <HAL_MPU_ConfigRegion+0x7c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7b1b      	ldrb	r3, [r3, #12]
 80015cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7adb      	ldrb	r3, [r3, #11]
 80015d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7a9b      	ldrb	r3, [r3, #10]
 80015da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7b5b      	ldrb	r3, [r3, #13]
 80015e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7b9b      	ldrb	r3, [r3, #14]
 80015ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7bdb      	ldrb	r3, [r3, #15]
 80015f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7a5b      	ldrb	r3, [r3, #9]
 80015fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7a1b      	ldrb	r3, [r3, #8]
 8001602:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001604:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800160e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001610:	6113      	str	r3, [r2, #16]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed90 	.word	0xe000ed90

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001632:	4b89      	ldr	r3, [pc, #548]	@ (8001858 <HAL_GPIO_Init+0x234>)
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001636:	e194      	b.n	8001962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8186 	beq.w	800195c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x44>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d123      	bne.n	800175a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	69b9      	ldr	r1, [r7, #24]
 8001756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0203 	and.w	r2, r3, #3
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80e0 	beq.w	800195c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179c:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <HAL_GPIO_Init+0x238>)
 800179e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017a2:	4a2e      	ldr	r2, [pc, #184]	@ (800185c <HAL_GPIO_Init+0x238>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_GPIO_Init+0x238>)
 80017ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <HAL_GPIO_Init+0x23c>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a20      	ldr	r2, [pc, #128]	@ (8001864 <HAL_GPIO_Init+0x240>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d052      	beq.n	800188c <HAL_GPIO_Init+0x268>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <HAL_GPIO_Init+0x244>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_GPIO_Init+0x22e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a1e      	ldr	r2, [pc, #120]	@ (800186c <HAL_GPIO_Init+0x248>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <HAL_GPIO_Init+0x22a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_GPIO_Init+0x24c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x226>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <HAL_GPIO_Init+0x250>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1b      	ldr	r2, [pc, #108]	@ (8001878 <HAL_GPIO_Init+0x254>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1a      	ldr	r2, [pc, #104]	@ (800187c <HAL_GPIO_Init+0x258>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x21a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <HAL_GPIO_Init+0x25c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x216>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_GPIO_Init+0x260>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x212>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_GPIO_Init+0x264>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x20e>
 800182e:	2309      	movs	r3, #9
 8001830:	e02d      	b.n	800188e <HAL_GPIO_Init+0x26a>
 8001832:	230a      	movs	r3, #10
 8001834:	e02b      	b.n	800188e <HAL_GPIO_Init+0x26a>
 8001836:	2308      	movs	r3, #8
 8001838:	e029      	b.n	800188e <HAL_GPIO_Init+0x26a>
 800183a:	2307      	movs	r3, #7
 800183c:	e027      	b.n	800188e <HAL_GPIO_Init+0x26a>
 800183e:	2306      	movs	r3, #6
 8001840:	e025      	b.n	800188e <HAL_GPIO_Init+0x26a>
 8001842:	2305      	movs	r3, #5
 8001844:	e023      	b.n	800188e <HAL_GPIO_Init+0x26a>
 8001846:	2304      	movs	r3, #4
 8001848:	e021      	b.n	800188e <HAL_GPIO_Init+0x26a>
 800184a:	2303      	movs	r3, #3
 800184c:	e01f      	b.n	800188e <HAL_GPIO_Init+0x26a>
 800184e:	2302      	movs	r3, #2
 8001850:	e01d      	b.n	800188e <HAL_GPIO_Init+0x26a>
 8001852:	2301      	movs	r3, #1
 8001854:	e01b      	b.n	800188e <HAL_GPIO_Init+0x26a>
 8001856:	bf00      	nop
 8001858:	58000080 	.word	0x58000080
 800185c:	58024400 	.word	0x58024400
 8001860:	58000400 	.word	0x58000400
 8001864:	58020000 	.word	0x58020000
 8001868:	58020400 	.word	0x58020400
 800186c:	58020800 	.word	0x58020800
 8001870:	58020c00 	.word	0x58020c00
 8001874:	58021000 	.word	0x58021000
 8001878:	58021400 	.word	0x58021400
 800187c:	58021800 	.word	0x58021800
 8001880:	58021c00 	.word	0x58021c00
 8001884:	58022000 	.word	0x58022000
 8001888:	58022400 	.word	0x58022400
 800188c:	2300      	movs	r3, #0
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	f002 0203 	and.w	r2, r2, #3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4093      	lsls	r3, r2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189e:	4938      	ldr	r1, [pc, #224]	@ (8001980 <HAL_GPIO_Init+0x35c>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f ae63 	bne.w	8001638 <HAL_GPIO_Init+0x14>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	3724      	adds	r7, #36	@ 0x24
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	58000400 	.word	0x58000400

08001984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	619a      	str	r2, [r3, #24]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f8d5 	bl	8000bbc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af02      	add	r7, sp, #8
 8001a20:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0fe      	b.n	8001c2a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff faff 	bl	8001044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 f94a 	bl	8005cec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7c1a      	ldrb	r2, [r3, #16]
 8001a60:	f88d 2000 	strb.w	r2, [sp]
 8001a64:	3304      	adds	r3, #4
 8001a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a68:	f004 f8ce 	bl	8005c08 <USB_CoreInit>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0d5      	b.n	8001c2a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 f942 	bl	8005d0e <USB_SetCurrentMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0c6      	b.n	8001c2a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e04a      	b.n	8001b38 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3315      	adds	r3, #21
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3314      	adds	r3, #20
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	332e      	adds	r3, #46	@ 0x2e
 8001ade:	4602      	mov	r2, r0
 8001ae0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3318      	adds	r3, #24
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	331c      	adds	r3, #28
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	3320      	adds	r3, #32
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3324      	adds	r3, #36	@ 0x24
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	3301      	adds	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3af      	bcc.n	8001aa2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e044      	b.n	8001bd2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	791b      	ldrb	r3, [r3, #4]
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3b5      	bcc.n	8001b48 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7c1a      	ldrb	r2, [r3, #16]
 8001be4:	f88d 2000 	strb.w	r2, [sp]
 8001be8:	3304      	adds	r3, #4
 8001bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bec:	f004 f8dc 	bl	8005da8 <USB_DevInit>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e013      	b.n	8001c2a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7b1b      	ldrb	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f80b 	bl	8001c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fa97 	bl	8006156 <USB_DevDisconnect>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	10000003 	.word	0x10000003

08001c7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_PWREx_ConfigSupply+0x70>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d00a      	beq.n	8001ca6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_PWREx_ConfigSupply+0x70>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e01f      	b.n	8001ce2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e01d      	b.n	8001ce2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_PWREx_ConfigSupply+0x70>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	490f      	ldr	r1, [pc, #60]	@ (8001cec <HAL_PWREx_ConfigSupply+0x70>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cb6:	f7ff faf1 	bl	800129c <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cbc:	e009      	b.n	8001cd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cbe:	f7ff faed 	bl	800129c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ccc:	d901      	bls.n	8001cd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e007      	b.n	8001ce2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_PWREx_ConfigSupply+0x70>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cde:	d1ee      	bne.n	8001cbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	58024800 	.word	0x58024800

08001cf0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	58024800 	.word	0x58024800

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	@ 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f000 bc48 	b.w	80025b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8088 	beq.w	8001e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	4b99      	ldr	r3, [pc, #612]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d3c:	4b96      	ldr	r3, [pc, #600]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d007      	beq.n	8001d58 <HAL_RCC_OscConfig+0x48>
 8001d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4a:	2b18      	cmp	r3, #24
 8001d4c:	d111      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
 8001d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b8f      	ldr	r3, [pc, #572]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d06d      	beq.n	8001e40 <HAL_RCC_OscConfig+0x130>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d169      	bne.n	8001e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f000 bc21 	b.w	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x7a>
 8001d7c:	4b86      	ldr	r3, [pc, #536]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a85      	ldr	r2, [pc, #532]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e02e      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x9c>
 8001d92:	4b81      	ldr	r3, [pc, #516]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a80      	ldr	r2, [pc, #512]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7d      	ldr	r2, [pc, #500]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001db6:	4b78      	ldr	r3, [pc, #480]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a77      	ldr	r2, [pc, #476]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b75      	ldr	r3, [pc, #468]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a74      	ldr	r2, [pc, #464]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xd8>
 8001dd0:	4b71      	ldr	r3, [pc, #452]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a70      	ldr	r2, [pc, #448]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6d      	ldr	r2, [pc, #436]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa54 	bl	800129c <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fa50 	bl	800129c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e3d4      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fa40 	bl	800129c <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fa3c 	bl	800129c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e3c0      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e32:	4b59      	ldr	r3, [pc, #356]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x110>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ca 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e50:	4b51      	ldr	r3, [pc, #324]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_RCC_OscConfig+0x166>
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b18      	cmp	r3, #24
 8001e6a:	d156      	bne.n	8001f1a <HAL_RCC_OscConfig+0x20a>
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d151      	bne.n	8001f1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e76:	4b48      	ldr	r3, [pc, #288]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e392      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e8e:	4b42      	ldr	r3, [pc, #264]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0219 	bic.w	r2, r3, #25
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	493f      	ldr	r1, [pc, #252]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f9fc 	bl	800129c <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f9f8 	bl	800129c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e37c      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eba:	4b37      	ldr	r3, [pc, #220]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	f7ff fa19 	bl	80012fc <HAL_GetREVID>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d817      	bhi.n	8001f04 <HAL_RCC_OscConfig+0x1f4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b40      	cmp	r3, #64	@ 0x40
 8001eda:	d108      	bne.n	8001eee <HAL_RCC_OscConfig+0x1de>
 8001edc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	e07a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	031b      	lsls	r3, r3, #12
 8001efc:	4926      	ldr	r1, [pc, #152]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f02:	e06f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4921      	ldr	r1, [pc, #132]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	e064      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d047      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f22:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0219 	bic.w	r2, r3, #25
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	491a      	ldr	r1, [pc, #104]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff f9b2 	bl	800129c <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f9ae 	bl	800129c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e332      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	f7ff f9cf 	bl	80012fc <HAL_GetREVID>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d819      	bhi.n	8001f9c <HAL_RCC_OscConfig+0x28c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b40      	cmp	r3, #64	@ 0x40
 8001f6e:	d108      	bne.n	8001f82 <HAL_RCC_OscConfig+0x272>
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f78:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f7e:	6053      	str	r3, [r2, #4]
 8001f80:	e030      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	031b      	lsls	r3, r3, #12
 8001f90:	4901      	ldr	r1, [pc, #4]	@ (8001f98 <HAL_RCC_OscConfig+0x288>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	e025      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	4b9a      	ldr	r3, [pc, #616]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	4997      	ldr	r1, [pc, #604]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e018      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b95      	ldr	r3, [pc, #596]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a94      	ldr	r2, [pc, #592]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f96d 	bl	800129c <HAL_GetTick>
 8001fc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f969 	bl	800129c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e2ed      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a9 	beq.w	8002144 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4b85      	ldr	r3, [pc, #532]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ffa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ffc:	4b82      	ldr	r3, [pc, #520]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d007      	beq.n	8002018 <HAL_RCC_OscConfig+0x308>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b18      	cmp	r3, #24
 800200c:	d13a      	bne.n	8002084 <HAL_RCC_OscConfig+0x374>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d135      	bne.n	8002084 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002018:	4b7b      	ldr	r3, [pc, #492]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_OscConfig+0x320>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b80      	cmp	r3, #128	@ 0x80
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e2c1      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002030:	f7ff f964 	bl	80012fc <HAL_GetREVID>
 8002034:	4603      	mov	r3, r0
 8002036:	f241 0203 	movw	r2, #4099	@ 0x1003
 800203a:	4293      	cmp	r3, r2
 800203c:	d817      	bhi.n	800206e <HAL_RCC_OscConfig+0x35e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2b20      	cmp	r3, #32
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x348>
 8002046:	4b70      	ldr	r3, [pc, #448]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800204e:	4a6e      	ldr	r2, [pc, #440]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002054:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002056:	e075      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002058:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	069b      	lsls	r3, r3, #26
 8002066:	4968      	ldr	r1, [pc, #416]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800206c:	e06a      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800206e:	4b66      	ldr	r3, [pc, #408]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	061b      	lsls	r3, r3, #24
 800207c:	4962      	ldr	r1, [pc, #392]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002082:	e05f      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d042      	beq.n	8002112 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800208c:	4b5e      	ldr	r3, [pc, #376]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5d      	ldr	r2, [pc, #372]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff f900 	bl	800129c <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020a0:	f7ff f8fc 	bl	800129c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e280      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020b2:	4b55      	ldr	r3, [pc, #340]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020be:	f7ff f91d 	bl	80012fc <HAL_GetREVID>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d817      	bhi.n	80020fc <HAL_RCC_OscConfig+0x3ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d108      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3d6>
 80020d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020e2:	6053      	str	r3, [r2, #4]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
 80020e6:	4b48      	ldr	r3, [pc, #288]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	4944      	ldr	r1, [pc, #272]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e023      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
 80020fc:	4b42      	ldr	r3, [pc, #264]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	493f      	ldr	r1, [pc, #252]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e018      	b.n	8002144 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3c      	ldr	r2, [pc, #240]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800211c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff f8bd 	bl	800129c <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002126:	f7ff f8b9 	bl	800129c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e23d      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002138:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d036      	beq.n	80021be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d019      	beq.n	800218c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002158:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215c:	4a2a      	ldr	r2, [pc, #168]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff f89a 	bl	800129c <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff f896 	bl	800129c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e21a      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x45c>
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218c:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 800218e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002190:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff f880 	bl	800129c <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f87c 	bl	800129c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e200      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d039      	beq.n	800223e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021de:	f7ff f85d 	bl	800129c <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e6:	f7ff f859 	bl	800129c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1dd      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_RCC_OscConfig+0x4f8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x4d6>
 8002204:	e01b      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
 8002206:	bf00      	nop
 8002208:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800220c:	4b9b      	ldr	r3, [pc, #620]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a9a      	ldr	r2, [pc, #616]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002216:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002218:	f7ff f840 	bl	800129c <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002220:	f7ff f83c 	bl	800129c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1c0      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002232:	4b92      	ldr	r3, [pc, #584]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8081 	beq.w	800234e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800224c:	4b8c      	ldr	r3, [pc, #560]	@ (8002480 <HAL_RCC_OscConfig+0x770>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a8b      	ldr	r2, [pc, #556]	@ (8002480 <HAL_RCC_OscConfig+0x770>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002256:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002258:	f7ff f820 	bl	800129c <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7ff f81c 	bl	800129c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1a0      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002272:	4b83      	ldr	r3, [pc, #524]	@ (8002480 <HAL_RCC_OscConfig+0x770>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x584>
 8002286:	4b7d      	ldr	r3, [pc, #500]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228a:	4a7c      	ldr	r2, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	@ 0x70
 8002292:	e02d      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5a6>
 800229c:	4b77      	ldr	r3, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	4a76      	ldr	r2, [pc, #472]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a8:	4b74      	ldr	r3, [pc, #464]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	4a73      	ldr	r2, [pc, #460]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c8>
 80022be:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ca:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a6b      	ldr	r2, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e0>
 80022d8:	4b68      	ldr	r3, [pc, #416]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022dc:	4a67      	ldr	r2, [pc, #412]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e4:	4b65      	ldr	r3, [pc, #404]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	4a64      	ldr	r2, [pc, #400]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d015      	beq.n	8002324 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ffd0 	bl	800129c <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe ffcc 	bl	800129c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e14e      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002316:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <HAL_RCC_OscConfig+0x5f0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe ffba 	bl	800129c <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe ffb6 	bl	800129c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e138      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002342:	4b4e      	ldr	r3, [pc, #312]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 812d 	beq.w	80025b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002358:	4b48      	ldr	r3, [pc, #288]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002360:	2b18      	cmp	r3, #24
 8002362:	f000 80bd 	beq.w	80024e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	2b02      	cmp	r3, #2
 800236c:	f040 809e 	bne.w	80024ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b42      	ldr	r3, [pc, #264]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a41      	ldr	r2, [pc, #260]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe ff8e 	bl	800129c <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe ff8a 	bl	800129c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e10e      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80023a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023a6:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_RCC_OscConfig+0x774>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	430a      	orrs	r2, r1
 80023b6:	4931      	ldr	r1, [pc, #196]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	3b01      	subs	r3, #1
 80023c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ca:	3b01      	subs	r3, #1
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d6:	3b01      	subs	r3, #1
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	3b01      	subs	r3, #1
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023ec:	4923      	ldr	r1, [pc, #140]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023f2:	4b22      	ldr	r3, [pc, #136]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	4a21      	ldr	r2, [pc, #132]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023fe:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002402:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <HAL_RCC_OscConfig+0x778>)
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	491b      	ldr	r1, [pc, #108]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	f023 020c 	bic.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4917      	ldr	r1, [pc, #92]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	f023 0202 	bic.w	r2, r3, #2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002430:	4912      	ldr	r1, [pc, #72]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002436:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	4a10      	ldr	r2, [pc, #64]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800244e:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <HAL_RCC_OscConfig+0x76c>)
 800246c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe ff13 	bl	800129c <HAL_GetTick>
 8002476:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002478:	e011      	b.n	800249e <HAL_RCC_OscConfig+0x78e>
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	58024800 	.word	0x58024800
 8002484:	fffffc0c 	.word	0xfffffc0c
 8002488:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe ff06 	bl	800129c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e08a      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x77c>
 80024aa:	e082      	b.n	80025b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a42      	ldr	r2, [pc, #264]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fef0 	bl	800129c <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe feec 	bl	800129c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e070      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x7b0>
 80024de:	e068      	b.n	80025b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024e0:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024e6:	4b35      	ldr	r3, [pc, #212]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d031      	beq.n	8002558 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0203 	and.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d12a      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d122      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d11a      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0a5b      	lsrs	r3, r3, #9
 8002526:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d111      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0e1b      	lsrs	r3, r3, #24
 800254a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e02b      	b.n	80025b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800255c:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 800255e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002566:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	429a      	cmp	r2, r3
 8002570:	d01f      	beq.n	80025b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800257e:	f7fe fe8d 	bl	800129c <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002584:	bf00      	nop
 8002586:	f7fe fe89 	bl	800129c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	4293      	cmp	r3, r2
 8002590:	d0f9      	beq.n	8002586 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 8002594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_RCC_OscConfig+0x8b0>)
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800259e:	00d2      	lsls	r2, r2, #3
 80025a0:	4906      	ldr	r1, [pc, #24]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_RCC_OscConfig+0x8ac>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3730      	adds	r7, #48	@ 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58024400 	.word	0x58024400
 80025c0:	ffff0007 	.word	0xffff0007

080025c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e19c      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d910      	bls.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b87      	ldr	r3, [pc, #540]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	4985      	ldr	r1, [pc, #532]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b83      	ldr	r3, [pc, #524]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e184      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	4b7b      	ldr	r3, [pc, #492]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002624:	4b78      	ldr	r3, [pc, #480]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4975      	ldr	r1, [pc, #468]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	4b70      	ldr	r3, [pc, #448]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d908      	bls.n	8002664 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002652:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	496a      	ldr	r1, [pc, #424]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002680:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	495e      	ldr	r1, [pc, #376]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 800268e:	4313      	orrs	r3, r2
 8002690:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	4b59      	ldr	r3, [pc, #356]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d908      	bls.n	80026c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026ae:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4953      	ldr	r1, [pc, #332]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	429a      	cmp	r2, r3
 80026da:	d908      	bls.n	80026ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f023 020f 	bic.w	r2, r3, #15
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4947      	ldr	r1, [pc, #284]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d055      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026fa:	4b43      	ldr	r3, [pc, #268]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4940      	ldr	r1, [pc, #256]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002708:	4313      	orrs	r3, r2
 800270a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d107      	bne.n	8002724 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002714:	4b3c      	ldr	r3, [pc, #240]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d121      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0f6      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d107      	bne.n	800273c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800272c:	4b36      	ldr	r3, [pc, #216]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0ea      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002744:	4b30      	ldr	r3, [pc, #192]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0de      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002754:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0d6      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f023 0207 	bic.w	r2, r3, #7
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4925      	ldr	r1, [pc, #148]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002772:	4313      	orrs	r3, r2
 8002774:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002776:	f7fe fd91 	bl	800129c <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277c:	e00a      	b.n	8002794 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277e:	f7fe fd8d 	bl	800129c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0be      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d1eb      	bne.n	800277e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	429a      	cmp	r2, r3
 80027c0:	d208      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f023 020f 	bic.w	r2, r3, #15
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	490e      	ldr	r1, [pc, #56]	@ (8002808 <HAL_RCC_ClockConfig+0x244>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d214      	bcs.n	800280c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4906      	ldr	r1, [pc, #24]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <HAL_RCC_ClockConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e086      	b.n	8002912 <HAL_RCC_ClockConfig+0x34e>
 8002804:	52002000 	.word	0x52002000
 8002808:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	4b3f      	ldr	r3, [pc, #252]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002828:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4939      	ldr	r1, [pc, #228]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 8002836:	4313      	orrs	r3, r2
 8002838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002852:	429a      	cmp	r2, r3
 8002854:	d208      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002856:	4b31      	ldr	r3, [pc, #196]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	492e      	ldr	r1, [pc, #184]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 8002864:	4313      	orrs	r3, r2
 8002866:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	4b28      	ldr	r3, [pc, #160]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002880:	429a      	cmp	r2, r3
 8002882:	d208      	bcs.n	8002896 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4922      	ldr	r1, [pc, #136]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 8002892:	4313      	orrs	r3, r2
 8002894:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d010      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d208      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028b2:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4917      	ldr	r1, [pc, #92]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028c4:	f000 f834 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b14      	ldr	r3, [pc, #80]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4912      	ldr	r1, [pc, #72]	@ (8002920 <HAL_RCC_ClockConfig+0x35c>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <HAL_RCC_ClockConfig+0x358>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_RCC_ClockConfig+0x35c>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <HAL_RCC_ClockConfig+0x360>)
 80028fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <HAL_RCC_ClockConfig+0x364>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <HAL_RCC_ClockConfig+0x368>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fc7e 	bl	8001208 <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
 8002920:	08006bc8 	.word	0x08006bc8
 8002924:	24000024 	.word	0x24000024
 8002928:	24000020 	.word	0x24000020
 800292c:	24000028 	.word	0x24000028

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002936:	4bb3      	ldr	r3, [pc, #716]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800293e:	2b18      	cmp	r3, #24
 8002940:	f200 8155 	bhi.w	8002bee <HAL_RCC_GetSysClockFreq+0x2be>
 8002944:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	080029b1 	.word	0x080029b1
 8002950:	08002bef 	.word	0x08002bef
 8002954:	08002bef 	.word	0x08002bef
 8002958:	08002bef 	.word	0x08002bef
 800295c:	08002bef 	.word	0x08002bef
 8002960:	08002bef 	.word	0x08002bef
 8002964:	08002bef 	.word	0x08002bef
 8002968:	08002bef 	.word	0x08002bef
 800296c:	080029d7 	.word	0x080029d7
 8002970:	08002bef 	.word	0x08002bef
 8002974:	08002bef 	.word	0x08002bef
 8002978:	08002bef 	.word	0x08002bef
 800297c:	08002bef 	.word	0x08002bef
 8002980:	08002bef 	.word	0x08002bef
 8002984:	08002bef 	.word	0x08002bef
 8002988:	08002bef 	.word	0x08002bef
 800298c:	080029dd 	.word	0x080029dd
 8002990:	08002bef 	.word	0x08002bef
 8002994:	08002bef 	.word	0x08002bef
 8002998:	08002bef 	.word	0x08002bef
 800299c:	08002bef 	.word	0x08002bef
 80029a0:	08002bef 	.word	0x08002bef
 80029a4:	08002bef 	.word	0x08002bef
 80029a8:	08002bef 	.word	0x08002bef
 80029ac:	080029e3 	.word	0x080029e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b0:	4b94      	ldr	r3, [pc, #592]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029bc:	4b91      	ldr	r3, [pc, #580]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	4a90      	ldr	r2, [pc, #576]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029ce:	e111      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029d2:	61bb      	str	r3, [r7, #24]
      break;
 80029d4:	e10e      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029d6:	4b8d      	ldr	r3, [pc, #564]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029d8:	61bb      	str	r3, [r7, #24]
      break;
 80029da:	e10b      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029de:	61bb      	str	r3, [r7, #24]
      break;
 80029e0:	e108      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029e2:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029ec:	4b85      	ldr	r3, [pc, #532]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029f8:	4b82      	ldr	r3, [pc, #520]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a02:	4b80      	ldr	r3, [pc, #512]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80e1 	beq.w	8002be8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	f000 8083 	beq.w	8002b34 <HAL_RCC_GetSysClockFreq+0x204>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f200 80a1 	bhi.w	8002b78 <HAL_RCC_GetSysClockFreq+0x248>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x114>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d056      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a42:	e099      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a44:	4b6f      	ldr	r3, [pc, #444]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d02d      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a50:	4b6c      	ldr	r3, [pc, #432]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	4a6b      	ldr	r2, [pc, #428]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7a:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a8e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002aaa:	e087      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002abe:	4b51      	ldr	r3, [pc, #324]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ad2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aee:	e065      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b40      	ldr	r3, [pc, #256]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b32:	e043      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b2f      	ldr	r3, [pc, #188]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b76:	e021      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	0a5b      	lsrs	r3, r3, #9
 8002bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be0:	ee17 3a90 	vmov	r3, s15
 8002be4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
      break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bee:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bf0:	61bb      	str	r3, [r7, #24]
      break;
 8002bf2:	bf00      	nop
  }

  return sysclockfreq;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	58024400 	.word	0x58024400
 8002c08:	03d09000 	.word	0x03d09000
 8002c0c:	003d0900 	.word	0x003d0900
 8002c10:	017d7840 	.word	0x017d7840
 8002c14:	46000000 	.word	0x46000000
 8002c18:	4c742400 	.word	0x4c742400
 8002c1c:	4a742400 	.word	0x4a742400
 8002c20:	4bbebc20 	.word	0x4bbebc20

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c2a:	f7ff fe81 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490f      	ldr	r1, [pc, #60]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c48:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c52:	5cd3      	ldrb	r3, [r2, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c62:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	08006bc8 	.word	0x08006bc8
 8002c7c:	24000024 	.word	0x24000024
 8002c80:	24000020 	.word	0x24000020

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c88:	f7ff ffcc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4904      	ldr	r1, [pc, #16]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	08006bc8 	.word	0x08006bc8

08002cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002cb4:	f7ff ffb6 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4904      	ldr	r1, [pc, #16]	@ (8002cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	08006bc8 	.word	0x08006bc8

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b0ca      	sub	sp, #296	@ 0x128
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d00:	2500      	movs	r5, #0
 8002d02:	ea54 0305 	orrs.w	r3, r4, r5
 8002d06:	d049      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d12:	d02f      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d18:	d828      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d1e:	d01a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d24:	d822      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d30:	e01c      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d32:	4bb8      	ldr	r3, [pc, #736]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	4ab7      	ldr	r2, [pc, #732]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d3e:	e01a      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d44:	3308      	adds	r3, #8
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fc8f 	bl	800466c <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	3328      	adds	r3, #40	@ 0x28
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fd36 	bl	80047d0 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d7e:	4ba5      	ldr	r3, [pc, #660]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8c:	4aa1      	ldr	r2, [pc, #644]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002da8:	f04f 0900 	mov.w	r9, #0
 8002dac:	ea58 0309 	orrs.w	r3, r8, r9
 8002db0:	d047      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d82a      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002dd9 	.word	0x08002dd9
 8002dc8:	08002de7 	.word	0x08002de7
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002e1b 	.word	0x08002e1b
 8002dd4:	08002e1b 	.word	0x08002e1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	4a8d      	ldr	r2, [pc, #564]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002de4:	e01a      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	3308      	adds	r3, #8
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fc3c 	bl	800466c <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dfa:	e00f      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	3328      	adds	r3, #40	@ 0x28
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fce3 	bl	80047d0 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e10:	e004      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e24:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e28:	f023 0107 	bic.w	r1, r3, #7
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	4a78      	ldr	r2, [pc, #480]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002e4e:	f04f 0b00 	mov.w	fp, #0
 8002e52:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e56:	d04c      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e62:	d030      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e68:	d829      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e6c:	d02d      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e70:	d825      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e72:	2b80      	cmp	r3, #128	@ 0x80
 8002e74:	d018      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e76:	2b80      	cmp	r3, #128	@ 0x80
 8002e78:	d821      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e7e:	2b40      	cmp	r3, #64	@ 0x40
 8002e80:	d007      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e82:	e01c      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e84:	4b63      	ldr	r3, [pc, #396]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	4a62      	ldr	r2, [pc, #392]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e90:	e01c      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	3308      	adds	r3, #8
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 fbe6 	bl	800466c <RCCEx_PLL2_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eac:	3328      	adds	r3, #40	@ 0x28
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fc8d 	bl	80047d0 <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e006      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	4a4c      	ldr	r2, [pc, #304]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002efe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	d053      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f1e:	d035      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f24:	d82e      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f2a:	d031      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f30:	d828      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f36:	d01a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3c:	d822      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f46:	d007      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f48:	e01c      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f4a:	4b32      	ldr	r3, [pc, #200]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	4a31      	ldr	r2, [pc, #196]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f56:	e01c      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 fb83 	bl	800466c <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f72:	3328      	adds	r3, #40	@ 0x28
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fc2a 	bl	80047d0 <RCCEx_PLL3_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002faa:	4a1a      	ldr	r2, [pc, #104]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002fc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	d056      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002fe2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fe6:	d038      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002fe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fec:	d831      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ff2:	d034      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ff4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ff8:	d82b      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ffe:	d01d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003000:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003004:	d825      	bhi.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d006      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800300a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003010:	e01f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003018:	4ba2      	ldr	r3, [pc, #648]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	4aa1      	ldr	r2, [pc, #644]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003024:	e01c      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302a:	3308      	adds	r3, #8
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fb1c 	bl	800466c <RCCEx_PLL2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800303a:	e011      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800303c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003040:	3328      	adds	r3, #40	@ 0x28
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f001 fbc3 	bl	80047d0 <RCCEx_PLL3_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003050:	e006      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003058:	e002      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800305e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003068:	4b8e      	ldr	r3, [pc, #568]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003078:	4a8a      	ldr	r2, [pc, #552]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307a:	430b      	orrs	r3, r1
 800307c:	6593      	str	r3, [r2, #88]	@ 0x58
 800307e:	e003      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800309e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d03a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	2b30      	cmp	r3, #48	@ 0x30
 80030b0:	d01f      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80030b2:	2b30      	cmp	r3, #48	@ 0x30
 80030b4:	d819      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d00c      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d815      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d111      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c6:	4b77      	ldr	r3, [pc, #476]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	4a76      	ldr	r2, [pc, #472]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030d2:	e011      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	3308      	adds	r3, #8
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fac5 	bl	800466c <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003100:	4b68      	ldr	r3, [pc, #416]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003104:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003110:	430b      	orrs	r3, r1
 8003112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800311a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800312a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003134:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003138:	460b      	mov	r3, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	d051      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003148:	d035      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800314a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800314e:	d82e      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003150:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003154:	d031      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800315a:	d828      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003160:	d01a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003166:	d822      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003170:	d007      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003172:	e01c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003174:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	4a4a      	ldr	r2, [pc, #296]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800317e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003180:	e01c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003186:	3308      	adds	r3, #8
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fa6e 	bl	800466c <RCCEx_PLL2_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003196:	e011      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	3328      	adds	r3, #40	@ 0x28
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fb15 	bl	80047d0 <RCCEx_PLL3_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031b4:	e002      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031c4:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80031d8:	e003      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80031f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80031fc:	460b      	mov	r3, r1
 80031fe:	4313      	orrs	r3, r2
 8003200:	d056      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800320c:	d033      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800320e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003212:	d82c      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003214:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003218:	d02f      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800321a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800321e:	d826      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003220:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003224:	d02b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003226:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800322a:	d820      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800322c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003230:	d012      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003236:	d81a      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d115      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003246:	3308      	adds	r3, #8
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f001 fa0e 	bl	800466c <RCCEx_PLL2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003256:	e015      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325c:	3328      	adds	r3, #40	@ 0x28
 800325e:	2101      	movs	r1, #1
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fab5 	bl	80047d0 <RCCEx_PLL3_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800326c:	e00a      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003274:	e006      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003290:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800329a:	4a02      	ldr	r2, [pc, #8]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6513      	str	r3, [r2, #80]	@ 0x50
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d055      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80032d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032dc:	d033      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80032de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e2:	d82c      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e8:	d02f      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ee:	d826      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032f4:	d02b      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80032f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032fa:	d820      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003300:	d012      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003306:	d81a      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800330c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003310:	d115      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003316:	3308      	adds	r3, #8
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f9a6 	bl	800466c <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003326:	e015      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	3328      	adds	r3, #40	@ 0x28
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fa4d 	bl	80047d0 <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800333c:	e00a      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003344:	e006      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003346:	bf00      	nop
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800335c:	4ba3      	ldr	r3, [pc, #652]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003360:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800336c:	4a9f      	ldr	r2, [pc, #636]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6593      	str	r3, [r2, #88]	@ 0x58
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d037      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033a6:	d00e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80033a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ac:	d816      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033b6:	d111      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b8:	4b8c      	ldr	r3, [pc, #560]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	4a8b      	ldr	r2, [pc, #556]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033c4:	e00f      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	3308      	adds	r3, #8
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 f94c 	bl	800466c <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033da:	e004      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80033e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ee:	4b7f      	ldr	r3, [pc, #508]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a7b      	ldr	r2, [pc, #492]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033fe:	430b      	orrs	r3, r1
 8003400:	6513      	str	r3, [r2, #80]	@ 0x50
 8003402:	e003      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003418:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003422:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003426:	460b      	mov	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	d039      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003432:	2b03      	cmp	r3, #3
 8003434:	d81c      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003436:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003479 	.word	0x08003479
 8003440:	0800344d 	.word	0x0800344d
 8003444:	0800345b 	.word	0x0800345b
 8003448:	08003479 	.word	0x08003479
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4b67      	ldr	r3, [pc, #412]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	4a66      	ldr	r2, [pc, #408]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003458:	e00f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	3308      	adds	r3, #8
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f902 	bl	800466c <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003482:	4b5a      	ldr	r3, [pc, #360]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	f023 0103 	bic.w	r1, r3, #3
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003490:	4a56      	ldr	r2, [pc, #344]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003492:	430b      	orrs	r3, r1
 8003494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003496:	e003      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800349c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80034ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80034ba:	460b      	mov	r3, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	f000 809f 	beq.w	8003600 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c2:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4a      	ldr	r2, [pc, #296]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ce:	f7fd fee5 	bl	800129c <HAL_GetTick>
 80034d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d6:	e00b      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fd fee0 	bl	800129c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	@ 0x64
 80034e6:	d903      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ee:	e005      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f0:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80034fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003500:	2b00      	cmp	r3, #0
 8003502:	d179      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003504:	4b39      	ldr	r3, [pc, #228]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003506:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003510:	4053      	eors	r3, r2
 8003512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d015      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800351a:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003522:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003526:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	4a30      	ldr	r2, [pc, #192]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003532:	4b2e      	ldr	r3, [pc, #184]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	4a2d      	ldr	r2, [pc, #180]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800353e:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003544:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800354e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003552:	d118      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fd fea2 	bl	800129c <HAL_GetTick>
 8003558:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355c:	e00d      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fd fe9d 	bl	800129c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003568:	1ad2      	subs	r2, r2, r3
 800356a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800356e:	429a      	cmp	r2, r3
 8003570:	d903      	bls.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003578:	e005      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800357a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0eb      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358a:	2b00      	cmp	r3, #0
 800358c:	d129      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800359e:	d10e      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035b0:	091a      	lsrs	r2, r3, #4
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	4a0d      	ldr	r2, [pc, #52]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6113      	str	r3, [r2, #16]
 80035bc:	e005      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035c8:	6113      	str	r3, [r2, #16]
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035da:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e0:	e00e      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80035ea:	e009      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80035ec:	58024400 	.word	0x58024400
 80035f0:	58024800 	.word	0x58024800
 80035f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f002 0301 	and.w	r3, r2, #1
 800360c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003616:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800361a:	460b      	mov	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	f000 8089 	beq.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003628:	2b28      	cmp	r3, #40	@ 0x28
 800362a:	d86b      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800362c:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	0800370d 	.word	0x0800370d
 8003638:	08003705 	.word	0x08003705
 800363c:	08003705 	.word	0x08003705
 8003640:	08003705 	.word	0x08003705
 8003644:	08003705 	.word	0x08003705
 8003648:	08003705 	.word	0x08003705
 800364c:	08003705 	.word	0x08003705
 8003650:	08003705 	.word	0x08003705
 8003654:	080036d9 	.word	0x080036d9
 8003658:	08003705 	.word	0x08003705
 800365c:	08003705 	.word	0x08003705
 8003660:	08003705 	.word	0x08003705
 8003664:	08003705 	.word	0x08003705
 8003668:	08003705 	.word	0x08003705
 800366c:	08003705 	.word	0x08003705
 8003670:	08003705 	.word	0x08003705
 8003674:	080036ef 	.word	0x080036ef
 8003678:	08003705 	.word	0x08003705
 800367c:	08003705 	.word	0x08003705
 8003680:	08003705 	.word	0x08003705
 8003684:	08003705 	.word	0x08003705
 8003688:	08003705 	.word	0x08003705
 800368c:	08003705 	.word	0x08003705
 8003690:	08003705 	.word	0x08003705
 8003694:	0800370d 	.word	0x0800370d
 8003698:	08003705 	.word	0x08003705
 800369c:	08003705 	.word	0x08003705
 80036a0:	08003705 	.word	0x08003705
 80036a4:	08003705 	.word	0x08003705
 80036a8:	08003705 	.word	0x08003705
 80036ac:	08003705 	.word	0x08003705
 80036b0:	08003705 	.word	0x08003705
 80036b4:	0800370d 	.word	0x0800370d
 80036b8:	08003705 	.word	0x08003705
 80036bc:	08003705 	.word	0x08003705
 80036c0:	08003705 	.word	0x08003705
 80036c4:	08003705 	.word	0x08003705
 80036c8:	08003705 	.word	0x08003705
 80036cc:	08003705 	.word	0x08003705
 80036d0:	08003705 	.word	0x08003705
 80036d4:	0800370d 	.word	0x0800370d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	3308      	adds	r3, #8
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ffc3 	bl	800466c <RCCEx_PLL2_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036ec:	e00f      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	3328      	adds	r3, #40	@ 0x28
 80036f4:	2101      	movs	r1, #1
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 f86a 	bl	80047d0 <RCCEx_PLL3_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800370c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003716:	4bbf      	ldr	r3, [pc, #764]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003724:	4abb      	ldr	r2, [pc, #748]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6553      	str	r3, [r2, #84]	@ 0x54
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 0302 	and.w	r3, r2, #2
 8003740:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800374a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d041      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375a:	2b05      	cmp	r3, #5
 800375c:	d824      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800375e:	a201      	add	r2, pc, #4	@ (adr r2, 8003764 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	080037b1 	.word	0x080037b1
 8003768:	0800377d 	.word	0x0800377d
 800376c:	08003793 	.word	0x08003793
 8003770:	080037b1 	.word	0x080037b1
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037b1 	.word	0x080037b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	3308      	adds	r3, #8
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f000 ff71 	bl	800466c <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003790:	e00f      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	3328      	adds	r3, #40	@ 0x28
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f818 	bl	80047d0 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80037b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037ba:	4b96      	ldr	r3, [pc, #600]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037be:	f023 0107 	bic.w	r1, r3, #7
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c8:	4a92      	ldr	r2, [pc, #584]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80037ce:	e003      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 0304 	and.w	r3, r2, #4
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d044      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003800:	2b05      	cmp	r3, #5
 8003802:	d825      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003804:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003859 	.word	0x08003859
 8003810:	08003825 	.word	0x08003825
 8003814:	0800383b 	.word	0x0800383b
 8003818:	08003859 	.word	0x08003859
 800381c:	08003859 	.word	0x08003859
 8003820:	08003859 	.word	0x08003859
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	3308      	adds	r3, #8
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f000 ff1d 	bl	800466c <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003838:	e00f      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	3328      	adds	r3, #40	@ 0x28
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f000 ffc4 	bl	80047d0 <RCCEx_PLL3_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800384e:	e004      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003862:	4b6c      	ldr	r3, [pc, #432]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f023 0107 	bic.w	r1, r3, #7
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003872:	4a68      	ldr	r2, [pc, #416]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6593      	str	r3, [r2, #88]	@ 0x58
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f002 0320 	and.w	r3, r2, #32
 800388e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d055      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ae:	d033      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b4:	d82c      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ba:	d02f      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d826      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038c6:	d02b      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80038c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038cc:	d820      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d2:	d012      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d8:	d81a      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d022      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e2:	d115      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	3308      	adds	r3, #8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 febd 	bl	800466c <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038f8:	e015      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fe:	3328      	adds	r3, #40	@ 0x28
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 ff64 	bl	80047d0 <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800390e:	e00a      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003916:	e006      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003918:	bf00      	nop
 800391a:	e004      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800391c:	bf00      	nop
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392e:	4b39      	ldr	r3, [pc, #228]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a35      	ldr	r2, [pc, #212]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003940:	430b      	orrs	r3, r1
 8003942:	6553      	str	r3, [r2, #84]	@ 0x54
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800395a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003964:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d058      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003976:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800397a:	d033      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800397c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003980:	d82c      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003986:	d02f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398c:	d826      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800398e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003992:	d02b      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003994:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003998:	d820      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800399e:	d012      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a4:	d81a      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d022      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ae:	d115      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	3308      	adds	r3, #8
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fe57 	bl	800466c <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	3328      	adds	r3, #40	@ 0x28
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fefe 	bl	80047d0 <RCCEx_PLL3_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039da:	e00a      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039e4:	bf00      	nop
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039e8:	bf00      	nop
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a0a:	4a02      	ldr	r2, [pc, #8]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d055      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a4c:	d033      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a52:	d82c      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a58:	d02f      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5e:	d826      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a64:	d02b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a6a:	d820      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a70:	d012      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a76:	d81a      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d022      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a80:	d115      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	3308      	adds	r3, #8
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fdee 	bl	800466c <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a96:	e015      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	3328      	adds	r3, #40	@ 0x28
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fe95 	bl	80047d0 <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003acc:	4ba1      	ldr	r3, [pc, #644]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003adc:	4a9d      	ldr	r2, [pc, #628]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f002 0308 	and.w	r3, r2, #8
 8003af8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d01e      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	3328      	adds	r3, #40	@ 0x28
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fe54 	bl	80047d0 <RCCEx_PLL3_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b34:	4b87      	ldr	r3, [pc, #540]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b44:	4a83      	ldr	r2, [pc, #524]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f002 0310 	and.w	r3, r2, #16
 8003b56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d01e      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	3328      	adds	r3, #40	@ 0x28
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fe25 	bl	80047d0 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b92:	4b70      	ldr	r3, [pc, #448]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	d03e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bd4:	d022      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bda:	d81b      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003be6:	e015      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	3308      	adds	r3, #8
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fd3b 	bl	800466c <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00f      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	3328      	adds	r3, #40	@ 0x28
 8003c04:	2102      	movs	r1, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fde2 	bl	80047d0 <RCCEx_PLL3_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c26:	4b4b      	ldr	r3, [pc, #300]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c36:	4a47      	ldr	r2, [pc, #284]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c54:	2300      	movs	r3, #0
 8003c56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d03b      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c6e:	d01f      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c74:	d818      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7a:	d003      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c80:	d007      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c82:	e011      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	3328      	adds	r3, #40	@ 0x28
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd98 	bl	80047d0 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cba:	4b26      	ldr	r3, [pc, #152]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	4a22      	ldr	r2, [pc, #136]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cd0:	e003      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ce6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ce8:	2300      	movs	r3, #0
 8003cea:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	d034      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d04:	d007      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d06:	e011      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4a11      	ldr	r2, [pc, #68]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d14:	e00e      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fca4 	bl	800466c <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4a:	4a02      	ldr	r2, [pc, #8]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d52:	bf00      	nop
 8003d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6e:	2300      	movs	r3, #0
 8003d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	3328      	adds	r3, #40	@ 0x28
 8003d82:	2102      	movs	r1, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fd23 	bl	80047d0 <RCCEx_PLL3_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003da4:	2300      	movs	r3, #0
 8003da6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003da8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d038      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dbe:	d018      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dc4:	d811      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dca:	d014      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd0:	d80b      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d011      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dda:	d106      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4bc3      	ldr	r3, [pc, #780]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	4ac2      	ldr	r2, [pc, #776]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003de8:	e008      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df0:	e004      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e04:	4bb9      	ldr	r3, [pc, #740]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e14:	4ab5      	ldr	r2, [pc, #724]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e32:	2300      	movs	r3, #0
 8003e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e40:	4baa      	ldr	r3, [pc, #680]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4e:	4aa7      	ldr	r2, [pc, #668]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e60:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e62:	2300      	movs	r3, #0
 8003e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e70:	4b9e      	ldr	r3, [pc, #632]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e80:	4a9a      	ldr	r2, [pc, #616]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e94:	2300      	movs	r3, #0
 8003e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ea2:	4b92      	ldr	r3, [pc, #584]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb0:	4a8e      	ldr	r2, [pc, #568]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ed2:	4b86      	ldr	r3, [pc, #536]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a85      	ldr	r2, [pc, #532]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003edc:	6113      	str	r3, [r2, #16]
 8003ede:	4b83      	ldr	r3, [pc, #524]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ee0:	6919      	ldr	r1, [r3, #16]
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003eea:	4a80      	ldr	r2, [pc, #512]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003efc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003efe:	2300      	movs	r3, #0
 8003f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f06:	460b      	mov	r3, r1
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f0c:	4b77      	ldr	r3, [pc, #476]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	4a74      	ldr	r2, [pc, #464]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f2e:	2300      	movs	r3, #0
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f4c:	4a67      	ldr	r2, [pc, #412]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d011      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	3308      	adds	r3, #8
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fb78 	bl	800466c <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6239      	str	r1, [r7, #32]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d011      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb58 	bl	800466c <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	61b9      	str	r1, [r7, #24]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d011      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fb38 	bl	800466c <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	2100      	movs	r1, #0
 800401c:	6139      	str	r1, [r7, #16]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004028:	460b      	mov	r3, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	d011      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	3328      	adds	r3, #40	@ 0x28
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fbca 	bl	80047d0 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	2100      	movs	r1, #0
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d011      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fbaa 	bl	80047d0 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	2100      	movs	r1, #0
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d011      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	3328      	adds	r3, #40	@ 0x28
 80040b4:	2102      	movs	r1, #2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fb8a 	bl	80047d0 <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80040d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80040e6:	46bd      	mov	sp, r7
 80040e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ec:	58024400 	.word	0x58024400

080040f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040f4:	f7fe fd96 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4904      	ldr	r1, [pc, #16]	@ (8004118 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	58024400 	.word	0x58024400
 8004118:	08006bc8 	.word	0x08006bc8

0800411c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800411c:	b480      	push	{r7}
 800411e:	b089      	sub	sp, #36	@ 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004124:	4ba1      	ldr	r3, [pc, #644]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800412e:	4b9f      	ldr	r3, [pc, #636]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	0b1b      	lsrs	r3, r3, #12
 8004134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004138:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800413a:	4b9c      	ldr	r3, [pc, #624]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004146:	4b99      	ldr	r3, [pc, #612]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414a:	08db      	lsrs	r3, r3, #3
 800414c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8111 	beq.w	800438c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	f000 8083 	beq.w	8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b02      	cmp	r3, #2
 8004176:	f200 80a1 	bhi.w	80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d056      	beq.n	8004234 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004186:	e099      	b.n	80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004188:	4b88      	ldr	r3, [pc, #544]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02d      	beq.n	80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004194:	4b85      	ldr	r3, [pc, #532]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	4a84      	ldr	r2, [pc, #528]	@ (80043b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041be:	4b7b      	ldr	r3, [pc, #492]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041ee:	e087      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80043b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004202:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004212:	ed97 6a03 	vldr	s12, [r7, #12]
 8004216:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800421a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004232:	e065      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004246:	4b59      	ldr	r3, [pc, #356]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004256:	ed97 6a03 	vldr	s12, [r7, #12]
 800425a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800425e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800426a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004276:	e043      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428a:	4b48      	ldr	r3, [pc, #288]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429a:	ed97 6a03 	vldr	s12, [r7, #12]
 800429e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ba:	e021      	b.n	8004300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ce:	4b37      	ldr	r3, [pc, #220]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042de:	ed97 6a03 	vldr	s12, [r7, #12]
 80042e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80043b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004300:	4b2a      	ldr	r3, [pc, #168]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	0a5b      	lsrs	r3, r3, #9
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431a:	edd7 6a07 	vldr	s13, [r7, #28]
 800431e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004326:	ee17 2a90 	vmov	r2, s15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800432e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004340:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004348:	edd7 6a07 	vldr	s13, [r7, #28]
 800434c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004354:	ee17 2a90 	vmov	r2, s15
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004376:	edd7 6a07 	vldr	s13, [r7, #28]
 800437a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800437e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004382:	ee17 2a90 	vmov	r2, s15
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800438a:	e008      	b.n	800439e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
}
 800439e:	bf00      	nop
 80043a0:	3724      	adds	r7, #36	@ 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	03d09000 	.word	0x03d09000
 80043b4:	46000000 	.word	0x46000000
 80043b8:	4c742400 	.word	0x4c742400
 80043bc:	4a742400 	.word	0x4a742400
 80043c0:	4bbebc20 	.word	0x4bbebc20

080043c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	@ 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043cc:	4ba1      	ldr	r3, [pc, #644]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043d6:	4b9f      	ldr	r3, [pc, #636]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	0d1b      	lsrs	r3, r3, #20
 80043dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043ee:	4b99      	ldr	r3, [pc, #612]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	08db      	lsrs	r3, r3, #3
 80043f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8111 	beq.w	8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b02      	cmp	r3, #2
 8004416:	f000 8083 	beq.w	8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b02      	cmp	r3, #2
 800441e:	f200 80a1 	bhi.w	8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d056      	beq.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800442e:	e099      	b.n	8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004430:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02d      	beq.n	8004498 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800443c:	4b85      	ldr	r3, [pc, #532]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	4a84      	ldr	r2, [pc, #528]	@ (8004658 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b7b      	ldr	r3, [pc, #492]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a03 	vldr	s12, [r7, #12]
 800447a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004496:	e087      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004660 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80044be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044da:	e065      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004502:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800451e:	e043      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b48      	ldr	r3, [pc, #288]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a03 	vldr	s12, [r7, #12]
 8004546:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004562:	e021      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004576:	4b37      	ldr	r3, [pc, #220]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	ed97 6a03 	vldr	s12, [r7, #12]
 800458a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800465c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80045a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	0a5b      	lsrs	r3, r3, #9
 80045ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004604:	4b13      	ldr	r3, [pc, #76]	@ (8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	0e1b      	lsrs	r3, r3, #24
 800460a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800461a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800461e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462a:	ee17 2a90 	vmov	r2, s15
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004632:	e008      	b.n	8004646 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
}
 8004646:	bf00      	nop
 8004648:	3724      	adds	r7, #36	@ 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	03d09000 	.word	0x03d09000
 800465c:	46000000 	.word	0x46000000
 8004660:	4c742400 	.word	0x4c742400
 8004664:	4a742400 	.word	0x4a742400
 8004668:	4bbebc20 	.word	0x4bbebc20

0800466c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800467a:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d101      	bne.n	800468a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e099      	b.n	80047be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800468a:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4e      	ldr	r2, [pc, #312]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004690:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fc fe01 	bl	800129c <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800469c:	e008      	b.n	80046b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800469e:	f7fc fdfd 	bl	800129c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e086      	b.n	80047be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046b0:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046bc:	4b42      	ldr	r3, [pc, #264]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	493f      	ldr	r1, [pc, #252]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	3b01      	subs	r3, #1
 80046e0:	025b      	lsls	r3, r3, #9
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004700:	4931      	ldr	r1, [pc, #196]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004706:	4b30      	ldr	r3, [pc, #192]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	492d      	ldr	r1, [pc, #180]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	f023 0220 	bic.w	r2, r3, #32
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4928      	ldr	r1, [pc, #160]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800472a:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	4a26      	ldr	r2, [pc, #152]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <RCCEx_PLL2_Config+0x160>)
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	69d2      	ldr	r2, [r2, #28]
 8004742:	00d2      	lsls	r2, r2, #3
 8004744:	4920      	ldr	r1, [pc, #128]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800474a:	4b1f      	ldr	r3, [pc, #124]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004750:	f043 0310 	orr.w	r3, r3, #16
 8004754:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d106      	bne.n	800476a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800475c:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004762:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004768:	e00f      	b.n	800478a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004770:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	4a14      	ldr	r2, [pc, #80]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800477c:	e005      	b.n	800478a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800477e:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004788:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800478a:	4b0f      	ldr	r3, [pc, #60]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a0e      	ldr	r2, [pc, #56]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 8004790:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fc fd81 	bl	800129c <HAL_GetTick>
 800479a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800479c:	e008      	b.n	80047b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800479e:	f7fc fd7d 	bl	800129c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <RCCEx_PLL2_Config+0x15c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
 80047cc:	ffff0007 	.word	0xffff0007

080047d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047de:	4b53      	ldr	r3, [pc, #332]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d101      	bne.n	80047ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e099      	b.n	8004922 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047ee:	4b4f      	ldr	r3, [pc, #316]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4e      	ldr	r2, [pc, #312]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fa:	f7fc fd4f 	bl	800129c <HAL_GetTick>
 80047fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004800:	e008      	b.n	8004814 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004802:	f7fc fd4b 	bl	800129c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e086      	b.n	8004922 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004814:	4b45      	ldr	r3, [pc, #276]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004820:	4b42      	ldr	r3, [pc, #264]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	051b      	lsls	r3, r3, #20
 800482e:	493f      	ldr	r1, [pc, #252]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	628b      	str	r3, [r1, #40]	@ 0x28
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	3b01      	subs	r3, #1
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	b29b      	uxth	r3, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	3b01      	subs	r3, #1
 800485e:	061b      	lsls	r3, r3, #24
 8004860:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004864:	4931      	ldr	r1, [pc, #196]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800486a:	4b30      	ldr	r3, [pc, #192]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	492d      	ldr	r1, [pc, #180]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800487c:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	4928      	ldr	r1, [pc, #160]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800488e:	4b27      	ldr	r3, [pc, #156]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	4a26      	ldr	r2, [pc, #152]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800489a:	4b24      	ldr	r3, [pc, #144]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 800489c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <RCCEx_PLL3_Config+0x160>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	69d2      	ldr	r2, [r2, #28]
 80048a6:	00d2      	lsls	r2, r2, #3
 80048a8:	4920      	ldr	r1, [pc, #128]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80048ae:	4b1f      	ldr	r3, [pc, #124]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	4a1e      	ldr	r2, [pc, #120]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048c0:	4b1a      	ldr	r3, [pc, #104]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	4a19      	ldr	r2, [pc, #100]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048cc:	e00f      	b.n	80048ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048d4:	4b15      	ldr	r3, [pc, #84]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	4a14      	ldr	r2, [pc, #80]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048e0:	e005      	b.n	80048ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	4a11      	ldr	r2, [pc, #68]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048ee:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a0e      	ldr	r2, [pc, #56]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fa:	f7fc fccf 	bl	800129c <HAL_GetTick>
 80048fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004900:	e008      	b.n	8004914 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004902:	f7fc fccb 	bl	800129c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e006      	b.n	8004922 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <RCCEx_PLL3_Config+0x15c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	58024400 	.word	0x58024400
 8004930:	ffff0007 	.word	0xffff0007

08004934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e042      	b.n	80049cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fc fad7 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2224      	movs	r2, #36	@ 0x24
 8004962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0201 	bic.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fe1e 	bl	80055c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8b3 	bl	8004af0 <UART_SetConfig>
 800498a:	4603      	mov	r3, r0
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e01b      	b.n	80049cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fe9d 	bl	8005704 <UART_CheckIdleState>
 80049ca:	4603      	mov	r3, r0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	@ 0x28
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d17b      	bne.n	8004ae6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_UART_Transmit+0x26>
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e074      	b.n	8004ae8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2221      	movs	r2, #33	@ 0x21
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fc45 	bl	800129c <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2c:	d108      	bne.n	8004a40 <HAL_UART_Transmit+0x6c>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e003      	b.n	8004a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a48:	e030      	b.n	8004aac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2180      	movs	r1, #128	@ 0x80
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 feff 	bl	8005858 <UART_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e03d      	b.n	8004ae8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3302      	adds	r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e007      	b.n	8004a9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	781a      	ldrb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1c8      	bne.n	8004a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2140      	movs	r1, #64	@ 0x40
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fec8 	bl	8005858 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e006      	b.n	8004ae8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e000      	b.n	8004ae8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af4:	b092      	sub	sp, #72	@ 0x48
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4bbe      	ldr	r3, [pc, #760]	@ (8004e18 <UART_SetConfig+0x328>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4ab3      	ldr	r2, [pc, #716]	@ (8004e1c <UART_SetConfig+0x32c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	4baf      	ldr	r3, [pc, #700]	@ (8004e20 <UART_SetConfig+0x330>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	f023 010f 	bic.w	r1, r3, #15
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4aa6      	ldr	r2, [pc, #664]	@ (8004e24 <UART_SetConfig+0x334>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d177      	bne.n	8004c80 <UART_SetConfig+0x190>
 8004b90:	4ba5      	ldr	r3, [pc, #660]	@ (8004e28 <UART_SetConfig+0x338>)
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b98:	2b28      	cmp	r3, #40	@ 0x28
 8004b9a:	d86d      	bhi.n	8004c78 <UART_SetConfig+0x188>
 8004b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba4 <UART_SetConfig+0xb4>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004c49 	.word	0x08004c49
 8004ba8:	08004c79 	.word	0x08004c79
 8004bac:	08004c79 	.word	0x08004c79
 8004bb0:	08004c79 	.word	0x08004c79
 8004bb4:	08004c79 	.word	0x08004c79
 8004bb8:	08004c79 	.word	0x08004c79
 8004bbc:	08004c79 	.word	0x08004c79
 8004bc0:	08004c79 	.word	0x08004c79
 8004bc4:	08004c51 	.word	0x08004c51
 8004bc8:	08004c79 	.word	0x08004c79
 8004bcc:	08004c79 	.word	0x08004c79
 8004bd0:	08004c79 	.word	0x08004c79
 8004bd4:	08004c79 	.word	0x08004c79
 8004bd8:	08004c79 	.word	0x08004c79
 8004bdc:	08004c79 	.word	0x08004c79
 8004be0:	08004c79 	.word	0x08004c79
 8004be4:	08004c59 	.word	0x08004c59
 8004be8:	08004c79 	.word	0x08004c79
 8004bec:	08004c79 	.word	0x08004c79
 8004bf0:	08004c79 	.word	0x08004c79
 8004bf4:	08004c79 	.word	0x08004c79
 8004bf8:	08004c79 	.word	0x08004c79
 8004bfc:	08004c79 	.word	0x08004c79
 8004c00:	08004c79 	.word	0x08004c79
 8004c04:	08004c61 	.word	0x08004c61
 8004c08:	08004c79 	.word	0x08004c79
 8004c0c:	08004c79 	.word	0x08004c79
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004c79 	.word	0x08004c79
 8004c18:	08004c79 	.word	0x08004c79
 8004c1c:	08004c79 	.word	0x08004c79
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c69 	.word	0x08004c69
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004c79 	.word	0x08004c79
 8004c30:	08004c79 	.word	0x08004c79
 8004c34:	08004c79 	.word	0x08004c79
 8004c38:	08004c79 	.word	0x08004c79
 8004c3c:	08004c79 	.word	0x08004c79
 8004c40:	08004c79 	.word	0x08004c79
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4e:	e222      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c56:	e21e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5e:	e21a      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e216      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c68:	2320      	movs	r3, #32
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e212      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c70:	2340      	movs	r3, #64	@ 0x40
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e20e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e20a      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a69      	ldr	r2, [pc, #420]	@ (8004e2c <UART_SetConfig+0x33c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d130      	bne.n	8004cec <UART_SetConfig+0x1fc>
 8004c8a:	4b67      	ldr	r3, [pc, #412]	@ (8004e28 <UART_SetConfig+0x338>)
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d826      	bhi.n	8004ce4 <UART_SetConfig+0x1f4>
 8004c96:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <UART_SetConfig+0x1ac>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004cb5 	.word	0x08004cb5
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cc5 	.word	0x08004cc5
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cba:	e1ec      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e1e8      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cca:	e1e4      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd2:	e1e0      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cda:	e1dc      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004cdc:	2340      	movs	r3, #64	@ 0x40
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce2:	e1d8      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e1d4      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8004e30 <UART_SetConfig+0x340>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d130      	bne.n	8004d58 <UART_SetConfig+0x268>
 8004cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e28 <UART_SetConfig+0x338>)
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d826      	bhi.n	8004d50 <UART_SetConfig+0x260>
 8004d02:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <UART_SetConfig+0x218>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d21 	.word	0x08004d21
 8004d0c:	08004d29 	.word	0x08004d29
 8004d10:	08004d31 	.word	0x08004d31
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d41 	.word	0x08004d41
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e1b6      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e1b2      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d30:	2308      	movs	r3, #8
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d36:	e1ae      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3e:	e1aa      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d40:	2320      	movs	r3, #32
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d46:	e1a6      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d48:	2340      	movs	r3, #64	@ 0x40
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4e:	e1a2      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d50:	2380      	movs	r3, #128	@ 0x80
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d56:	e19e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	@ (8004e34 <UART_SetConfig+0x344>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d130      	bne.n	8004dc4 <UART_SetConfig+0x2d4>
 8004d62:	4b31      	ldr	r3, [pc, #196]	@ (8004e28 <UART_SetConfig+0x338>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d826      	bhi.n	8004dbc <UART_SetConfig+0x2cc>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <UART_SetConfig+0x284>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d8d 	.word	0x08004d8d
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	08004d9d 	.word	0x08004d9d
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e180      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e17c      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da2:	e178      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004daa:	e174      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004dac:	2320      	movs	r3, #32
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db2:	e170      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004db4:	2340      	movs	r3, #64	@ 0x40
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dba:	e16c      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc2:	e168      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e38 <UART_SetConfig+0x348>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d142      	bne.n	8004e54 <UART_SetConfig+0x364>
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <UART_SetConfig+0x338>)
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d838      	bhi.n	8004e4c <UART_SetConfig+0x35c>
 8004dda:	a201      	add	r2, pc, #4	@ (adr r2, 8004de0 <UART_SetConfig+0x2f0>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004df9 	.word	0x08004df9
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e45 	.word	0x08004e45
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e14a      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e146      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0e:	e142      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e16:	e13e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e18:	cfff69f3 	.word	0xcfff69f3
 8004e1c:	58000c00 	.word	0x58000c00
 8004e20:	11fff4ff 	.word	0x11fff4ff
 8004e24:	40011000 	.word	0x40011000
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	40004400 	.word	0x40004400
 8004e30:	40004800 	.word	0x40004800
 8004e34:	40004c00 	.word	0x40004c00
 8004e38:	40005000 	.word	0x40005000
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e42:	e128      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e44:	2340      	movs	r3, #64	@ 0x40
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4a:	e124      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e52:	e120      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4acb      	ldr	r2, [pc, #812]	@ (8005188 <UART_SetConfig+0x698>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d176      	bne.n	8004f4c <UART_SetConfig+0x45c>
 8004e5e:	4bcb      	ldr	r3, [pc, #812]	@ (800518c <UART_SetConfig+0x69c>)
 8004e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e66:	2b28      	cmp	r3, #40	@ 0x28
 8004e68:	d86c      	bhi.n	8004f44 <UART_SetConfig+0x454>
 8004e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <UART_SetConfig+0x380>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004f15 	.word	0x08004f15
 8004e74:	08004f45 	.word	0x08004f45
 8004e78:	08004f45 	.word	0x08004f45
 8004e7c:	08004f45 	.word	0x08004f45
 8004e80:	08004f45 	.word	0x08004f45
 8004e84:	08004f45 	.word	0x08004f45
 8004e88:	08004f45 	.word	0x08004f45
 8004e8c:	08004f45 	.word	0x08004f45
 8004e90:	08004f1d 	.word	0x08004f1d
 8004e94:	08004f45 	.word	0x08004f45
 8004e98:	08004f45 	.word	0x08004f45
 8004e9c:	08004f45 	.word	0x08004f45
 8004ea0:	08004f45 	.word	0x08004f45
 8004ea4:	08004f45 	.word	0x08004f45
 8004ea8:	08004f45 	.word	0x08004f45
 8004eac:	08004f45 	.word	0x08004f45
 8004eb0:	08004f25 	.word	0x08004f25
 8004eb4:	08004f45 	.word	0x08004f45
 8004eb8:	08004f45 	.word	0x08004f45
 8004ebc:	08004f45 	.word	0x08004f45
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	08004f45 	.word	0x08004f45
 8004ec8:	08004f45 	.word	0x08004f45
 8004ecc:	08004f45 	.word	0x08004f45
 8004ed0:	08004f2d 	.word	0x08004f2d
 8004ed4:	08004f45 	.word	0x08004f45
 8004ed8:	08004f45 	.word	0x08004f45
 8004edc:	08004f45 	.word	0x08004f45
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08004f45 	.word	0x08004f45
 8004ee8:	08004f45 	.word	0x08004f45
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f35 	.word	0x08004f35
 8004ef4:	08004f45 	.word	0x08004f45
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f45 	.word	0x08004f45
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1a:	e0bc      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f22:	e0b8      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2a:	e0b4      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f32:	e0b0      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f34:	2320      	movs	r3, #32
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3a:	e0ac      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f3c:	2340      	movs	r3, #64	@ 0x40
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f42:	e0a8      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e0a4      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a8f      	ldr	r2, [pc, #572]	@ (8005190 <UART_SetConfig+0x6a0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d130      	bne.n	8004fb8 <UART_SetConfig+0x4c8>
 8004f56:	4b8d      	ldr	r3, [pc, #564]	@ (800518c <UART_SetConfig+0x69c>)
 8004f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d826      	bhi.n	8004fb0 <UART_SetConfig+0x4c0>
 8004f62:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <UART_SetConfig+0x478>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004f81 	.word	0x08004f81
 8004f6c:	08004f89 	.word	0x08004f89
 8004f70:	08004f91 	.word	0x08004f91
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e086      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e082      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f90:	2308      	movs	r3, #8
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e07e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9e:	e07a      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa6:	e076      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004fa8:	2340      	movs	r3, #64	@ 0x40
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fae:	e072      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb6:	e06e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a75      	ldr	r2, [pc, #468]	@ (8005194 <UART_SetConfig+0x6a4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d130      	bne.n	8005024 <UART_SetConfig+0x534>
 8004fc2:	4b72      	ldr	r3, [pc, #456]	@ (800518c <UART_SetConfig+0x69c>)
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d826      	bhi.n	800501c <UART_SetConfig+0x52c>
 8004fce:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <UART_SetConfig+0x4e4>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004fed 	.word	0x08004fed
 8004fd8:	08004ff5 	.word	0x08004ff5
 8004fdc:	08004ffd 	.word	0x08004ffd
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e050      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e04c      	b.n	8005096 <UART_SetConfig+0x5a6>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e048      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500a:	e044      	b.n	8005096 <UART_SetConfig+0x5a6>
 800500c:	2320      	movs	r3, #32
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005012:	e040      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005014:	2340      	movs	r3, #64	@ 0x40
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501a:	e03c      	b.n	8005096 <UART_SetConfig+0x5a6>
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005022:	e038      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5b      	ldr	r2, [pc, #364]	@ (8005198 <UART_SetConfig+0x6a8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d130      	bne.n	8005090 <UART_SetConfig+0x5a0>
 800502e:	4b57      	ldr	r3, [pc, #348]	@ (800518c <UART_SetConfig+0x69c>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b05      	cmp	r3, #5
 8005038:	d826      	bhi.n	8005088 <UART_SetConfig+0x598>
 800503a:	a201      	add	r2, pc, #4	@ (adr r2, 8005040 <UART_SetConfig+0x550>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005059 	.word	0x08005059
 8005044:	08005061 	.word	0x08005061
 8005048:	08005069 	.word	0x08005069
 800504c:	08005071 	.word	0x08005071
 8005050:	08005079 	.word	0x08005079
 8005054:	08005081 	.word	0x08005081
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e01a      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e016      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e012      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e00e      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005078:	2320      	movs	r3, #32
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e00a      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005080:	2340      	movs	r3, #64	@ 0x40
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005086:	e006      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508e:	e002      	b.n	8005096 <UART_SetConfig+0x5a6>
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3f      	ldr	r2, [pc, #252]	@ (8005198 <UART_SetConfig+0x6a8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	f040 80f8 	bne.w	8005292 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	dc46      	bgt.n	8005138 <UART_SetConfig+0x648>
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	f2c0 8082 	blt.w	80051b4 <UART_SetConfig+0x6c4>
 80050b0:	3b02      	subs	r3, #2
 80050b2:	2b1e      	cmp	r3, #30
 80050b4:	d87e      	bhi.n	80051b4 <UART_SetConfig+0x6c4>
 80050b6:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <UART_SetConfig+0x5cc>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	0800513f 	.word	0x0800513f
 80050c0:	080051b5 	.word	0x080051b5
 80050c4:	08005147 	.word	0x08005147
 80050c8:	080051b5 	.word	0x080051b5
 80050cc:	080051b5 	.word	0x080051b5
 80050d0:	080051b5 	.word	0x080051b5
 80050d4:	08005157 	.word	0x08005157
 80050d8:	080051b5 	.word	0x080051b5
 80050dc:	080051b5 	.word	0x080051b5
 80050e0:	080051b5 	.word	0x080051b5
 80050e4:	080051b5 	.word	0x080051b5
 80050e8:	080051b5 	.word	0x080051b5
 80050ec:	080051b5 	.word	0x080051b5
 80050f0:	080051b5 	.word	0x080051b5
 80050f4:	08005167 	.word	0x08005167
 80050f8:	080051b5 	.word	0x080051b5
 80050fc:	080051b5 	.word	0x080051b5
 8005100:	080051b5 	.word	0x080051b5
 8005104:	080051b5 	.word	0x080051b5
 8005108:	080051b5 	.word	0x080051b5
 800510c:	080051b5 	.word	0x080051b5
 8005110:	080051b5 	.word	0x080051b5
 8005114:	080051b5 	.word	0x080051b5
 8005118:	080051b5 	.word	0x080051b5
 800511c:	080051b5 	.word	0x080051b5
 8005120:	080051b5 	.word	0x080051b5
 8005124:	080051b5 	.word	0x080051b5
 8005128:	080051b5 	.word	0x080051b5
 800512c:	080051b5 	.word	0x080051b5
 8005130:	080051b5 	.word	0x080051b5
 8005134:	080051a7 	.word	0x080051a7
 8005138:	2b40      	cmp	r3, #64	@ 0x40
 800513a:	d037      	beq.n	80051ac <UART_SetConfig+0x6bc>
 800513c:	e03a      	b.n	80051b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800513e:	f7fe ffd7 	bl	80040f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005144:	e03c      	b.n	80051c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe ffe6 	bl	800411c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005154:	e034      	b.n	80051c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005156:	f107 0318 	add.w	r3, r7, #24
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff f932 	bl	80043c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005164:	e02c      	b.n	80051c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <UART_SetConfig+0x69c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005172:	4b06      	ldr	r3, [pc, #24]	@ (800518c <UART_SetConfig+0x69c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	08db      	lsrs	r3, r3, #3
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	4a07      	ldr	r2, [pc, #28]	@ (800519c <UART_SetConfig+0x6ac>)
 800517e:	fa22 f303 	lsr.w	r3, r2, r3
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005184:	e01c      	b.n	80051c0 <UART_SetConfig+0x6d0>
 8005186:	bf00      	nop
 8005188:	40011400 	.word	0x40011400
 800518c:	58024400 	.word	0x58024400
 8005190:	40007800 	.word	0x40007800
 8005194:	40007c00 	.word	0x40007c00
 8005198:	58000c00 	.word	0x58000c00
 800519c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b9d      	ldr	r3, [pc, #628]	@ (8005418 <UART_SetConfig+0x928>)
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051a4:	e00c      	b.n	80051c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051a6:	4b9d      	ldr	r3, [pc, #628]	@ (800541c <UART_SetConfig+0x92c>)
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051aa:	e009      	b.n	80051c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051b2:	e005      	b.n	80051c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80051be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 81de 	beq.w	8005584 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	4a94      	ldr	r2, [pc, #592]	@ (8005420 <UART_SetConfig+0x930>)
 80051ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80051da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d305      	bcc.n	80051f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80051fe:	e1c1      	b.n	8005584 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005202:	2200      	movs	r2, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	60fa      	str	r2, [r7, #12]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	4a84      	ldr	r2, [pc, #528]	@ (8005420 <UART_SetConfig+0x930>)
 800520e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005212:	b29b      	uxth	r3, r3
 8005214:	2200      	movs	r2, #0
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005222:	f7fb f8b5 	bl	8000390 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	020b      	lsls	r3, r1, #8
 8005238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800523c:	0202      	lsls	r2, r0, #8
 800523e:	6979      	ldr	r1, [r7, #20]
 8005240:	6849      	ldr	r1, [r1, #4]
 8005242:	0849      	lsrs	r1, r1, #1
 8005244:	2000      	movs	r0, #0
 8005246:	460c      	mov	r4, r1
 8005248:	4605      	mov	r5, r0
 800524a:	eb12 0804 	adds.w	r8, r2, r4
 800524e:	eb43 0905 	adc.w	r9, r3, r5
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	469a      	mov	sl, r3
 800525a:	4693      	mov	fp, r2
 800525c:	4652      	mov	r2, sl
 800525e:	465b      	mov	r3, fp
 8005260:	4640      	mov	r0, r8
 8005262:	4649      	mov	r1, r9
 8005264:	f7fb f894 	bl	8000390 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005276:	d308      	bcc.n	800528a <UART_SetConfig+0x79a>
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800527e:	d204      	bcs.n	800528a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e17c      	b.n	8005584 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005290:	e178      	b.n	8005584 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800529a:	f040 80c5 	bne.w	8005428 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800529e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	dc48      	bgt.n	8005338 <UART_SetConfig+0x848>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db7b      	blt.n	80053a2 <UART_SetConfig+0x8b2>
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d879      	bhi.n	80053a2 <UART_SetConfig+0x8b2>
 80052ae:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <UART_SetConfig+0x7c4>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	0800533f 	.word	0x0800533f
 80052b8:	08005347 	.word	0x08005347
 80052bc:	080053a3 	.word	0x080053a3
 80052c0:	080053a3 	.word	0x080053a3
 80052c4:	0800534f 	.word	0x0800534f
 80052c8:	080053a3 	.word	0x080053a3
 80052cc:	080053a3 	.word	0x080053a3
 80052d0:	080053a3 	.word	0x080053a3
 80052d4:	0800535f 	.word	0x0800535f
 80052d8:	080053a3 	.word	0x080053a3
 80052dc:	080053a3 	.word	0x080053a3
 80052e0:	080053a3 	.word	0x080053a3
 80052e4:	080053a3 	.word	0x080053a3
 80052e8:	080053a3 	.word	0x080053a3
 80052ec:	080053a3 	.word	0x080053a3
 80052f0:	080053a3 	.word	0x080053a3
 80052f4:	0800536f 	.word	0x0800536f
 80052f8:	080053a3 	.word	0x080053a3
 80052fc:	080053a3 	.word	0x080053a3
 8005300:	080053a3 	.word	0x080053a3
 8005304:	080053a3 	.word	0x080053a3
 8005308:	080053a3 	.word	0x080053a3
 800530c:	080053a3 	.word	0x080053a3
 8005310:	080053a3 	.word	0x080053a3
 8005314:	080053a3 	.word	0x080053a3
 8005318:	080053a3 	.word	0x080053a3
 800531c:	080053a3 	.word	0x080053a3
 8005320:	080053a3 	.word	0x080053a3
 8005324:	080053a3 	.word	0x080053a3
 8005328:	080053a3 	.word	0x080053a3
 800532c:	080053a3 	.word	0x080053a3
 8005330:	080053a3 	.word	0x080053a3
 8005334:	08005395 	.word	0x08005395
 8005338:	2b40      	cmp	r3, #64	@ 0x40
 800533a:	d02e      	beq.n	800539a <UART_SetConfig+0x8aa>
 800533c:	e031      	b.n	80053a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533e:	f7fd fca1 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8005342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005344:	e033      	b.n	80053ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005346:	f7fd fcb3 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 800534a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800534c:	e02f      	b.n	80053ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800534e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fee2 	bl	800411c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800535c:	e027      	b.n	80053ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800535e:	f107 0318 	add.w	r3, r7, #24
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f82e 	bl	80043c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800536c:	e01f      	b.n	80053ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800536e:	4b2d      	ldr	r3, [pc, #180]	@ (8005424 <UART_SetConfig+0x934>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800537a:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <UART_SetConfig+0x934>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	08db      	lsrs	r3, r3, #3
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	4a24      	ldr	r2, [pc, #144]	@ (8005418 <UART_SetConfig+0x928>)
 8005386:	fa22 f303 	lsr.w	r3, r2, r3
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800538c:	e00f      	b.n	80053ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800538e:	4b22      	ldr	r3, [pc, #136]	@ (8005418 <UART_SetConfig+0x928>)
 8005390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005392:	e00c      	b.n	80053ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005394:	4b21      	ldr	r3, [pc, #132]	@ (800541c <UART_SetConfig+0x92c>)
 8005396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005398:	e009      	b.n	80053ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053a0:	e005      	b.n	80053ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80053ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80e7 	beq.w	8005584 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	4a19      	ldr	r2, [pc, #100]	@ (8005420 <UART_SetConfig+0x930>)
 80053bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c8:	005a      	lsls	r2, r3, #1
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	441a      	add	r2, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	2b0f      	cmp	r3, #15
 80053e0:	d916      	bls.n	8005410 <UART_SetConfig+0x920>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e8:	d212      	bcs.n	8005410 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f023 030f 	bic.w	r3, r3, #15
 80053f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	b29a      	uxth	r2, r3
 8005400:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005402:	4313      	orrs	r3, r2
 8005404:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	e0b9      	b.n	8005584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005416:	e0b5      	b.n	8005584 <UART_SetConfig+0xa94>
 8005418:	03d09000 	.word	0x03d09000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	08006bd8 	.word	0x08006bd8
 8005424:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005428:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800542c:	2b20      	cmp	r3, #32
 800542e:	dc49      	bgt.n	80054c4 <UART_SetConfig+0x9d4>
 8005430:	2b00      	cmp	r3, #0
 8005432:	db7c      	blt.n	800552e <UART_SetConfig+0xa3e>
 8005434:	2b20      	cmp	r3, #32
 8005436:	d87a      	bhi.n	800552e <UART_SetConfig+0xa3e>
 8005438:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <UART_SetConfig+0x950>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	080054cb 	.word	0x080054cb
 8005444:	080054d3 	.word	0x080054d3
 8005448:	0800552f 	.word	0x0800552f
 800544c:	0800552f 	.word	0x0800552f
 8005450:	080054db 	.word	0x080054db
 8005454:	0800552f 	.word	0x0800552f
 8005458:	0800552f 	.word	0x0800552f
 800545c:	0800552f 	.word	0x0800552f
 8005460:	080054eb 	.word	0x080054eb
 8005464:	0800552f 	.word	0x0800552f
 8005468:	0800552f 	.word	0x0800552f
 800546c:	0800552f 	.word	0x0800552f
 8005470:	0800552f 	.word	0x0800552f
 8005474:	0800552f 	.word	0x0800552f
 8005478:	0800552f 	.word	0x0800552f
 800547c:	0800552f 	.word	0x0800552f
 8005480:	080054fb 	.word	0x080054fb
 8005484:	0800552f 	.word	0x0800552f
 8005488:	0800552f 	.word	0x0800552f
 800548c:	0800552f 	.word	0x0800552f
 8005490:	0800552f 	.word	0x0800552f
 8005494:	0800552f 	.word	0x0800552f
 8005498:	0800552f 	.word	0x0800552f
 800549c:	0800552f 	.word	0x0800552f
 80054a0:	0800552f 	.word	0x0800552f
 80054a4:	0800552f 	.word	0x0800552f
 80054a8:	0800552f 	.word	0x0800552f
 80054ac:	0800552f 	.word	0x0800552f
 80054b0:	0800552f 	.word	0x0800552f
 80054b4:	0800552f 	.word	0x0800552f
 80054b8:	0800552f 	.word	0x0800552f
 80054bc:	0800552f 	.word	0x0800552f
 80054c0:	08005521 	.word	0x08005521
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d02e      	beq.n	8005526 <UART_SetConfig+0xa36>
 80054c8:	e031      	b.n	800552e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ca:	f7fd fbdb 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80054ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054d0:	e033      	b.n	800553a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d2:	f7fd fbed 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 80054d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054d8:	e02f      	b.n	800553a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fe1c 	bl	800411c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054e8:	e027      	b.n	800553a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ea:	f107 0318 	add.w	r3, r7, #24
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe ff68 	bl	80043c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054f8:	e01f      	b.n	800553a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054fa:	4b2d      	ldr	r3, [pc, #180]	@ (80055b0 <UART_SetConfig+0xac0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005506:	4b2a      	ldr	r3, [pc, #168]	@ (80055b0 <UART_SetConfig+0xac0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	08db      	lsrs	r3, r3, #3
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	4a28      	ldr	r2, [pc, #160]	@ (80055b4 <UART_SetConfig+0xac4>)
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005518:	e00f      	b.n	800553a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800551a:	4b26      	ldr	r3, [pc, #152]	@ (80055b4 <UART_SetConfig+0xac4>)
 800551c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800551e:	e00c      	b.n	800553a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005520:	4b25      	ldr	r3, [pc, #148]	@ (80055b8 <UART_SetConfig+0xac8>)
 8005522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005524:	e009      	b.n	800553a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800552c:	e005      	b.n	800553a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005538:	bf00      	nop
    }

    if (pclk != 0U)
 800553a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d021      	beq.n	8005584 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	4a1d      	ldr	r2, [pc, #116]	@ (80055bc <UART_SetConfig+0xacc>)
 8005546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554a:	461a      	mov	r2, r3
 800554c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	441a      	add	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005566:	2b0f      	cmp	r3, #15
 8005568:	d909      	bls.n	800557e <UART_SetConfig+0xa8e>
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005570:	d205      	bcs.n	800557e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005574:	b29a      	uxth	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	e002      	b.n	8005584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2201      	movs	r2, #1
 8005590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2200      	movs	r2, #0
 8005598:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3748      	adds	r7, #72	@ 0x48
 80055a8:	46bd      	mov	sp, r7
 80055aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	03d09000 	.word	0x03d09000
 80055b8:	003d0900 	.word	0x003d0900
 80055bc:	08006bd8 	.word	0x08006bd8

080055c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056be:	d10a      	bne.n	80056d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b098      	sub	sp, #96	@ 0x60
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005714:	f7fb fdc2 	bl	800129c <HAL_GetTick>
 8005718:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d12f      	bne.n	8005788 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005728:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005730:	2200      	movs	r2, #0
 8005732:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f88e 	bl	8005858 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d022      	beq.n	8005788 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005756:	653b      	str	r3, [r7, #80]	@ 0x50
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005760:	647b      	str	r3, [r7, #68]	@ 0x44
 8005762:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e063      	b.n	8005850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d149      	bne.n	800582a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005796:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800579e:	2200      	movs	r2, #0
 80057a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f857 	bl	8005858 <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d03c      	beq.n	800582a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	623b      	str	r3, [r7, #32]
   return(result);
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3308      	adds	r3, #8
 80057e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005802:	61fa      	str	r2, [r7, #28]
 8005804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	617b      	str	r3, [r7, #20]
   return(result);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e5      	bne.n	80057e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e012      	b.n	8005850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3758      	adds	r7, #88	@ 0x58
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005868:	e04f      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d04b      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7fb fd13 	bl	800129c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <UART_WaitOnFlagUntilTimeout+0x30>
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e04e      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d037      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb2>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b80      	cmp	r3, #128	@ 0x80
 800589e:	d034      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb2>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	d031      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d110      	bne.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2208      	movs	r2, #8
 80058ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f839 	bl	8005934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2208      	movs	r2, #8
 80058c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e029      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e4:	d111      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f81f 	bl	8005934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e00f      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	429a      	cmp	r2, r3
 8005926:	d0a0      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b095      	sub	sp, #84	@ 0x54
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595a:	643b      	str	r3, [r7, #64]	@ 0x40
 800595c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e6      	bne.n	800593c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	61fb      	str	r3, [r7, #28]
   return(result);
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	4b1e      	ldr	r3, [pc, #120]	@ (80059fc <UART_EndRxTransfer+0xc8>)
 8005982:	4013      	ands	r3, r2
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800598e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d118      	bne.n	80059dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	613b      	str	r3, [r7, #16]
   return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059f0:	bf00      	nop
 80059f2:	3754      	adds	r7, #84	@ 0x54
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	effffffe 	.word	0xeffffffe

08005a00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e027      	b.n	8005a66 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2224      	movs	r2, #36	@ 0x24
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0201 	bic.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e02d      	b.n	8005ae6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2224      	movs	r2, #36	@ 0x24
 8005a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0201 	bic.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f850 	bl	8005b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e02d      	b.n	8005b62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2224      	movs	r2, #36	@ 0x24
 8005b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f812 	bl	8005b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b8c:	e031      	b.n	8005bf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b8e:	2310      	movs	r3, #16
 8005b90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b92:	2310      	movs	r3, #16
 8005b94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	0e5b      	lsrs	r3, r3, #25
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	0f5b      	lsrs	r3, r3, #29
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	7b3a      	ldrb	r2, [r7, #12]
 8005bba:	4911      	ldr	r1, [pc, #68]	@ (8005c00 <UARTEx_SetNbDataToProcess+0x94>)
 8005bbc:	5c8a      	ldrb	r2, [r1, r2]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bc2:	7b3a      	ldrb	r2, [r7, #12]
 8005bc4:	490f      	ldr	r1, [pc, #60]	@ (8005c04 <UARTEx_SetNbDataToProcess+0x98>)
 8005bc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	7b7a      	ldrb	r2, [r7, #13]
 8005bd8:	4909      	ldr	r1, [pc, #36]	@ (8005c00 <UARTEx_SetNbDataToProcess+0x94>)
 8005bda:	5c8a      	ldrb	r2, [r1, r2]
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005be0:	7b7a      	ldrb	r2, [r7, #13]
 8005be2:	4908      	ldr	r1, [pc, #32]	@ (8005c04 <UARTEx_SetNbDataToProcess+0x98>)
 8005be4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	08006bf0 	.word	0x08006bf0
 8005c04:	08006bf8 	.word	0x08006bf8

08005c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c08:	b084      	sub	sp, #16
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	f107 001c 	add.w	r0, r7, #28
 8005c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d121      	bne.n	8005c66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce4 <USB_CoreInit+0xdc>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d105      	bne.n	8005c5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 faaa 	bl	80061b4 <USB_CoreReset>
 8005c60:	4603      	mov	r3, r0
 8005c62:	73fb      	strb	r3, [r7, #15]
 8005c64:	e01b      	b.n	8005c9e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa9e 	bl	80061b4 <USB_CoreReset>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c90:	e005      	b.n	8005c9e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c9e:	7fbb      	ldrb	r3, [r7, #30]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d116      	bne.n	8005cd2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <USB_CoreInit+0xe0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f043 0206 	orr.w	r2, r3, #6
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cde:	b004      	add	sp, #16
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	ffbdffbf 	.word	0xffbdffbf
 8005ce8:	03ee0000 	.word	0x03ee0000

08005cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f023 0201 	bic.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d115      	bne.n	8005d5c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d3c:	200a      	movs	r0, #10
 8005d3e:	f7fb fab9 	bl	80012b4 <HAL_Delay>
      ms += 10U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	330a      	adds	r3, #10
 8005d46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa25 	bl	8006198 <USB_GetMode>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d01e      	beq.n	8005d92 <USB_SetCurrentMode+0x84>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d58:	d9f0      	bls.n	8005d3c <USB_SetCurrentMode+0x2e>
 8005d5a:	e01a      	b.n	8005d92 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d115      	bne.n	8005d8e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d6e:	200a      	movs	r0, #10
 8005d70:	f7fb faa0 	bl	80012b4 <HAL_Delay>
      ms += 10U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	330a      	adds	r3, #10
 8005d78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa0c 	bl	8006198 <USB_GetMode>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <USB_SetCurrentMode+0x84>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d8a:	d9f0      	bls.n	8005d6e <USB_SetCurrentMode+0x60>
 8005d8c:	e001      	b.n	8005d92 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e005      	b.n	8005d9e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d96:	d101      	bne.n	8005d9c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005da8:	b084      	sub	sp, #16
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	e009      	b.n	8005ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3340      	adds	r3, #64	@ 0x40
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b0e      	cmp	r3, #14
 8005de0:	d9f2      	bls.n	8005dc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005de2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11c      	bne.n	8005e24 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e005      	b.n	8005e30 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e36:	461a      	mov	r2, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d10d      	bne.n	8005e60 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f968 	bl	8006124 <USB_SetDevSpeed>
 8005e54:	e008      	b.n	8005e68 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e56:	2101      	movs	r1, #1
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f963 	bl	8006124 <USB_SetDevSpeed>
 8005e5e:	e003      	b.n	8005e68 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e60:	2103      	movs	r1, #3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f95e 	bl	8006124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e68:	2110      	movs	r1, #16
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8fa 	bl	8006064 <USB_FlushTxFifo>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f924 	bl	80060c8 <USB_FlushRxFifo>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e043      	b.n	8005f3c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eca:	d118      	bne.n	8005efe <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e013      	b.n	8005f10 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e008      	b.n	8005f10 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f40:	461a      	mov	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d3b5      	bcc.n	8005eb4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	e043      	b.n	8005fd6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f64:	d118      	bne.n	8005f98 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e013      	b.n	8005faa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e008      	b.n	8005faa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2300      	movs	r3, #0
 8005fba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fda:	461a      	mov	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d3b5      	bcc.n	8005f4e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006002:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f043 0210 	orr.w	r2, r3, #16
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <USB_DevInit+0x2b4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006024:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f043 0208 	orr.w	r2, r3, #8
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006038:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <USB_DevInit+0x2b8>)
 8006046:	4313      	orrs	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006058:	b004      	add	sp, #16
 800605a:	4770      	bx	lr
 800605c:	803c3800 	.word	0x803c3800
 8006060:	40000004 	.word	0x40000004

08006064 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3301      	adds	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800607e:	d901      	bls.n	8006084 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e01b      	b.n	80060bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	daf2      	bge.n	8006072 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	019b      	lsls	r3, r3, #6
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060a8:	d901      	bls.n	80060ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e006      	b.n	80060bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d0f0      	beq.n	800609c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e0:	d901      	bls.n	80060e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e018      	b.n	8006118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	daf2      	bge.n	80060d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2210      	movs	r2, #16
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006104:	d901      	bls.n	800610a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d0f0      	beq.n	80060f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006170:	f023 0303 	bic.w	r3, r3, #3
 8006174:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006184:	f043 0302 	orr.w	r3, r3, #2
 8006188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0301 	and.w	r3, r3, #1
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061cc:	d901      	bls.n	80061d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e01b      	b.n	800620a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	daf2      	bge.n	80061c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f043 0201 	orr.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f6:	d901      	bls.n	80061fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e006      	b.n	800620a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b01      	cmp	r3, #1
 8006206:	d0f0      	beq.n	80061ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <siprintf>:
 8006218:	b40e      	push	{r1, r2, r3}
 800621a:	b500      	push	{lr}
 800621c:	b09c      	sub	sp, #112	@ 0x70
 800621e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006220:	9002      	str	r0, [sp, #8]
 8006222:	9006      	str	r0, [sp, #24]
 8006224:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006228:	4809      	ldr	r0, [pc, #36]	@ (8006250 <siprintf+0x38>)
 800622a:	9107      	str	r1, [sp, #28]
 800622c:	9104      	str	r1, [sp, #16]
 800622e:	4909      	ldr	r1, [pc, #36]	@ (8006254 <siprintf+0x3c>)
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
 8006234:	9105      	str	r1, [sp, #20]
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	a902      	add	r1, sp, #8
 800623c:	f000 f994 	bl	8006568 <_svfiprintf_r>
 8006240:	9b02      	ldr	r3, [sp, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	b01c      	add	sp, #112	@ 0x70
 8006248:	f85d eb04 	ldr.w	lr, [sp], #4
 800624c:	b003      	add	sp, #12
 800624e:	4770      	bx	lr
 8006250:	24000030 	.word	0x24000030
 8006254:	ffff0208 	.word	0xffff0208

08006258 <memset>:
 8006258:	4402      	add	r2, r0
 800625a:	4603      	mov	r3, r0
 800625c:	4293      	cmp	r3, r2
 800625e:	d100      	bne.n	8006262 <memset+0xa>
 8006260:	4770      	bx	lr
 8006262:	f803 1b01 	strb.w	r1, [r3], #1
 8006266:	e7f9      	b.n	800625c <memset+0x4>

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	@ (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	24000030 	.word	0x24000030

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	@ (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	@ (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	@ (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	@ (80062b8 <__libc_init_array+0x44>)
 8006288:	f000 fc66 	bl	8006b58 <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08006c3c 	.word	0x08006c3c
 80062b0:	08006c3c 	.word	0x08006c3c
 80062b4:	08006c3c 	.word	0x08006c3c
 80062b8:	08006c40 	.word	0x08006c40

080062bc <__retarget_lock_acquire_recursive>:
 80062bc:	4770      	bx	lr

080062be <__retarget_lock_release_recursive>:
 80062be:	4770      	bx	lr

080062c0 <_free_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4605      	mov	r5, r0
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d041      	beq.n	800634c <_free_r+0x8c>
 80062c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062cc:	1f0c      	subs	r4, r1, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bfb8      	it	lt
 80062d2:	18e4      	addlt	r4, r4, r3
 80062d4:	f000 f8e0 	bl	8006498 <__malloc_lock>
 80062d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006350 <_free_r+0x90>)
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	b933      	cbnz	r3, 80062ec <_free_r+0x2c>
 80062de:	6063      	str	r3, [r4, #4]
 80062e0:	6014      	str	r4, [r2, #0]
 80062e2:	4628      	mov	r0, r5
 80062e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062e8:	f000 b8dc 	b.w	80064a4 <__malloc_unlock>
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	d908      	bls.n	8006302 <_free_r+0x42>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	1821      	adds	r1, r4, r0
 80062f4:	428b      	cmp	r3, r1
 80062f6:	bf01      	itttt	eq
 80062f8:	6819      	ldreq	r1, [r3, #0]
 80062fa:	685b      	ldreq	r3, [r3, #4]
 80062fc:	1809      	addeq	r1, r1, r0
 80062fe:	6021      	streq	r1, [r4, #0]
 8006300:	e7ed      	b.n	80062de <_free_r+0x1e>
 8006302:	461a      	mov	r2, r3
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b10b      	cbz	r3, 800630c <_free_r+0x4c>
 8006308:	42a3      	cmp	r3, r4
 800630a:	d9fa      	bls.n	8006302 <_free_r+0x42>
 800630c:	6811      	ldr	r1, [r2, #0]
 800630e:	1850      	adds	r0, r2, r1
 8006310:	42a0      	cmp	r0, r4
 8006312:	d10b      	bne.n	800632c <_free_r+0x6c>
 8006314:	6820      	ldr	r0, [r4, #0]
 8006316:	4401      	add	r1, r0
 8006318:	1850      	adds	r0, r2, r1
 800631a:	4283      	cmp	r3, r0
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	d1e0      	bne.n	80062e2 <_free_r+0x22>
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	6053      	str	r3, [r2, #4]
 8006326:	4408      	add	r0, r1
 8006328:	6010      	str	r0, [r2, #0]
 800632a:	e7da      	b.n	80062e2 <_free_r+0x22>
 800632c:	d902      	bls.n	8006334 <_free_r+0x74>
 800632e:	230c      	movs	r3, #12
 8006330:	602b      	str	r3, [r5, #0]
 8006332:	e7d6      	b.n	80062e2 <_free_r+0x22>
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	1821      	adds	r1, r4, r0
 8006338:	428b      	cmp	r3, r1
 800633a:	bf04      	itt	eq
 800633c:	6819      	ldreq	r1, [r3, #0]
 800633e:	685b      	ldreq	r3, [r3, #4]
 8006340:	6063      	str	r3, [r4, #4]
 8006342:	bf04      	itt	eq
 8006344:	1809      	addeq	r1, r1, r0
 8006346:	6021      	streq	r1, [r4, #0]
 8006348:	6054      	str	r4, [r2, #4]
 800634a:	e7ca      	b.n	80062e2 <_free_r+0x22>
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	24000768 	.word	0x24000768

08006354 <sbrk_aligned>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4e0f      	ldr	r6, [pc, #60]	@ (8006394 <sbrk_aligned+0x40>)
 8006358:	460c      	mov	r4, r1
 800635a:	6831      	ldr	r1, [r6, #0]
 800635c:	4605      	mov	r5, r0
 800635e:	b911      	cbnz	r1, 8006366 <sbrk_aligned+0x12>
 8006360:	f000 fba6 	bl	8006ab0 <_sbrk_r>
 8006364:	6030      	str	r0, [r6, #0]
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fba1 	bl	8006ab0 <_sbrk_r>
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	d103      	bne.n	800637a <sbrk_aligned+0x26>
 8006372:	f04f 34ff 	mov.w	r4, #4294967295
 8006376:	4620      	mov	r0, r4
 8006378:	bd70      	pop	{r4, r5, r6, pc}
 800637a:	1cc4      	adds	r4, r0, #3
 800637c:	f024 0403 	bic.w	r4, r4, #3
 8006380:	42a0      	cmp	r0, r4
 8006382:	d0f8      	beq.n	8006376 <sbrk_aligned+0x22>
 8006384:	1a21      	subs	r1, r4, r0
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fb92 	bl	8006ab0 <_sbrk_r>
 800638c:	3001      	adds	r0, #1
 800638e:	d1f2      	bne.n	8006376 <sbrk_aligned+0x22>
 8006390:	e7ef      	b.n	8006372 <sbrk_aligned+0x1e>
 8006392:	bf00      	nop
 8006394:	24000764 	.word	0x24000764

08006398 <_malloc_r>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	1ccd      	adds	r5, r1, #3
 800639e:	f025 0503 	bic.w	r5, r5, #3
 80063a2:	3508      	adds	r5, #8
 80063a4:	2d0c      	cmp	r5, #12
 80063a6:	bf38      	it	cc
 80063a8:	250c      	movcc	r5, #12
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	4606      	mov	r6, r0
 80063ae:	db01      	blt.n	80063b4 <_malloc_r+0x1c>
 80063b0:	42a9      	cmp	r1, r5
 80063b2:	d904      	bls.n	80063be <_malloc_r+0x26>
 80063b4:	230c      	movs	r3, #12
 80063b6:	6033      	str	r3, [r6, #0]
 80063b8:	2000      	movs	r0, #0
 80063ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006494 <_malloc_r+0xfc>
 80063c2:	f000 f869 	bl	8006498 <__malloc_lock>
 80063c6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ca:	461c      	mov	r4, r3
 80063cc:	bb44      	cbnz	r4, 8006420 <_malloc_r+0x88>
 80063ce:	4629      	mov	r1, r5
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7ff ffbf 	bl	8006354 <sbrk_aligned>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	4604      	mov	r4, r0
 80063da:	d158      	bne.n	800648e <_malloc_r+0xf6>
 80063dc:	f8d8 4000 	ldr.w	r4, [r8]
 80063e0:	4627      	mov	r7, r4
 80063e2:	2f00      	cmp	r7, #0
 80063e4:	d143      	bne.n	800646e <_malloc_r+0xd6>
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	d04b      	beq.n	8006482 <_malloc_r+0xea>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	4639      	mov	r1, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	eb04 0903 	add.w	r9, r4, r3
 80063f4:	f000 fb5c 	bl	8006ab0 <_sbrk_r>
 80063f8:	4581      	cmp	r9, r0
 80063fa:	d142      	bne.n	8006482 <_malloc_r+0xea>
 80063fc:	6821      	ldr	r1, [r4, #0]
 80063fe:	1a6d      	subs	r5, r5, r1
 8006400:	4629      	mov	r1, r5
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ffa6 	bl	8006354 <sbrk_aligned>
 8006408:	3001      	adds	r0, #1
 800640a:	d03a      	beq.n	8006482 <_malloc_r+0xea>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	442b      	add	r3, r5
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	f8d8 3000 	ldr.w	r3, [r8]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	bb62      	cbnz	r2, 8006474 <_malloc_r+0xdc>
 800641a:	f8c8 7000 	str.w	r7, [r8]
 800641e:	e00f      	b.n	8006440 <_malloc_r+0xa8>
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	1b52      	subs	r2, r2, r5
 8006424:	d420      	bmi.n	8006468 <_malloc_r+0xd0>
 8006426:	2a0b      	cmp	r2, #11
 8006428:	d917      	bls.n	800645a <_malloc_r+0xc2>
 800642a:	1961      	adds	r1, r4, r5
 800642c:	42a3      	cmp	r3, r4
 800642e:	6025      	str	r5, [r4, #0]
 8006430:	bf18      	it	ne
 8006432:	6059      	strne	r1, [r3, #4]
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	bf08      	it	eq
 8006438:	f8c8 1000 	streq.w	r1, [r8]
 800643c:	5162      	str	r2, [r4, r5]
 800643e:	604b      	str	r3, [r1, #4]
 8006440:	4630      	mov	r0, r6
 8006442:	f000 f82f 	bl	80064a4 <__malloc_unlock>
 8006446:	f104 000b 	add.w	r0, r4, #11
 800644a:	1d23      	adds	r3, r4, #4
 800644c:	f020 0007 	bic.w	r0, r0, #7
 8006450:	1ac2      	subs	r2, r0, r3
 8006452:	bf1c      	itt	ne
 8006454:	1a1b      	subne	r3, r3, r0
 8006456:	50a3      	strne	r3, [r4, r2]
 8006458:	e7af      	b.n	80063ba <_malloc_r+0x22>
 800645a:	6862      	ldr	r2, [r4, #4]
 800645c:	42a3      	cmp	r3, r4
 800645e:	bf0c      	ite	eq
 8006460:	f8c8 2000 	streq.w	r2, [r8]
 8006464:	605a      	strne	r2, [r3, #4]
 8006466:	e7eb      	b.n	8006440 <_malloc_r+0xa8>
 8006468:	4623      	mov	r3, r4
 800646a:	6864      	ldr	r4, [r4, #4]
 800646c:	e7ae      	b.n	80063cc <_malloc_r+0x34>
 800646e:	463c      	mov	r4, r7
 8006470:	687f      	ldr	r7, [r7, #4]
 8006472:	e7b6      	b.n	80063e2 <_malloc_r+0x4a>
 8006474:	461a      	mov	r2, r3
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	42a3      	cmp	r3, r4
 800647a:	d1fb      	bne.n	8006474 <_malloc_r+0xdc>
 800647c:	2300      	movs	r3, #0
 800647e:	6053      	str	r3, [r2, #4]
 8006480:	e7de      	b.n	8006440 <_malloc_r+0xa8>
 8006482:	230c      	movs	r3, #12
 8006484:	6033      	str	r3, [r6, #0]
 8006486:	4630      	mov	r0, r6
 8006488:	f000 f80c 	bl	80064a4 <__malloc_unlock>
 800648c:	e794      	b.n	80063b8 <_malloc_r+0x20>
 800648e:	6005      	str	r5, [r0, #0]
 8006490:	e7d6      	b.n	8006440 <_malloc_r+0xa8>
 8006492:	bf00      	nop
 8006494:	24000768 	.word	0x24000768

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	@ (80064a0 <__malloc_lock+0x8>)
 800649a:	f7ff bf0f 	b.w	80062bc <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	24000760 	.word	0x24000760

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	@ (80064ac <__malloc_unlock+0x8>)
 80064a6:	f7ff bf0a 	b.w	80062be <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	24000760 	.word	0x24000760

080064b0 <__ssputs_r>:
 80064b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	688e      	ldr	r6, [r1, #8]
 80064b6:	461f      	mov	r7, r3
 80064b8:	42be      	cmp	r6, r7
 80064ba:	680b      	ldr	r3, [r1, #0]
 80064bc:	4682      	mov	sl, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	4690      	mov	r8, r2
 80064c2:	d82d      	bhi.n	8006520 <__ssputs_r+0x70>
 80064c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064cc:	d026      	beq.n	800651c <__ssputs_r+0x6c>
 80064ce:	6965      	ldr	r5, [r4, #20]
 80064d0:	6909      	ldr	r1, [r1, #16]
 80064d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064d6:	eba3 0901 	sub.w	r9, r3, r1
 80064da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064de:	1c7b      	adds	r3, r7, #1
 80064e0:	444b      	add	r3, r9
 80064e2:	106d      	asrs	r5, r5, #1
 80064e4:	429d      	cmp	r5, r3
 80064e6:	bf38      	it	cc
 80064e8:	461d      	movcc	r5, r3
 80064ea:	0553      	lsls	r3, r2, #21
 80064ec:	d527      	bpl.n	800653e <__ssputs_r+0x8e>
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7ff ff52 	bl	8006398 <_malloc_r>
 80064f4:	4606      	mov	r6, r0
 80064f6:	b360      	cbz	r0, 8006552 <__ssputs_r+0xa2>
 80064f8:	6921      	ldr	r1, [r4, #16]
 80064fa:	464a      	mov	r2, r9
 80064fc:	f000 fae8 	bl	8006ad0 <memcpy>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	6126      	str	r6, [r4, #16]
 800650e:	6165      	str	r5, [r4, #20]
 8006510:	444e      	add	r6, r9
 8006512:	eba5 0509 	sub.w	r5, r5, r9
 8006516:	6026      	str	r6, [r4, #0]
 8006518:	60a5      	str	r5, [r4, #8]
 800651a:	463e      	mov	r6, r7
 800651c:	42be      	cmp	r6, r7
 800651e:	d900      	bls.n	8006522 <__ssputs_r+0x72>
 8006520:	463e      	mov	r6, r7
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	4632      	mov	r2, r6
 8006526:	4641      	mov	r1, r8
 8006528:	f000 faa8 	bl	8006a7c <memmove>
 800652c:	68a3      	ldr	r3, [r4, #8]
 800652e:	1b9b      	subs	r3, r3, r6
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4433      	add	r3, r6
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	2000      	movs	r0, #0
 800653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653e:	462a      	mov	r2, r5
 8006540:	f000 fad4 	bl	8006aec <_realloc_r>
 8006544:	4606      	mov	r6, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d1e0      	bne.n	800650c <__ssputs_r+0x5c>
 800654a:	6921      	ldr	r1, [r4, #16]
 800654c:	4650      	mov	r0, sl
 800654e:	f7ff feb7 	bl	80062c0 <_free_r>
 8006552:	230c      	movs	r3, #12
 8006554:	f8ca 3000 	str.w	r3, [sl]
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e7e9      	b.n	800653a <__ssputs_r+0x8a>
	...

08006568 <_svfiprintf_r>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	4698      	mov	r8, r3
 800656e:	898b      	ldrh	r3, [r1, #12]
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	b09d      	sub	sp, #116	@ 0x74
 8006574:	4607      	mov	r7, r0
 8006576:	460d      	mov	r5, r1
 8006578:	4614      	mov	r4, r2
 800657a:	d510      	bpl.n	800659e <_svfiprintf_r+0x36>
 800657c:	690b      	ldr	r3, [r1, #16]
 800657e:	b973      	cbnz	r3, 800659e <_svfiprintf_r+0x36>
 8006580:	2140      	movs	r1, #64	@ 0x40
 8006582:	f7ff ff09 	bl	8006398 <_malloc_r>
 8006586:	6028      	str	r0, [r5, #0]
 8006588:	6128      	str	r0, [r5, #16]
 800658a:	b930      	cbnz	r0, 800659a <_svfiprintf_r+0x32>
 800658c:	230c      	movs	r3, #12
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	b01d      	add	sp, #116	@ 0x74
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	2340      	movs	r3, #64	@ 0x40
 800659c:	616b      	str	r3, [r5, #20]
 800659e:	2300      	movs	r3, #0
 80065a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a2:	2320      	movs	r3, #32
 80065a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065ac:	2330      	movs	r3, #48	@ 0x30
 80065ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800674c <_svfiprintf_r+0x1e4>
 80065b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065b6:	f04f 0901 	mov.w	r9, #1
 80065ba:	4623      	mov	r3, r4
 80065bc:	469a      	mov	sl, r3
 80065be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c2:	b10a      	cbz	r2, 80065c8 <_svfiprintf_r+0x60>
 80065c4:	2a25      	cmp	r2, #37	@ 0x25
 80065c6:	d1f9      	bne.n	80065bc <_svfiprintf_r+0x54>
 80065c8:	ebba 0b04 	subs.w	fp, sl, r4
 80065cc:	d00b      	beq.n	80065e6 <_svfiprintf_r+0x7e>
 80065ce:	465b      	mov	r3, fp
 80065d0:	4622      	mov	r2, r4
 80065d2:	4629      	mov	r1, r5
 80065d4:	4638      	mov	r0, r7
 80065d6:	f7ff ff6b 	bl	80064b0 <__ssputs_r>
 80065da:	3001      	adds	r0, #1
 80065dc:	f000 80a7 	beq.w	800672e <_svfiprintf_r+0x1c6>
 80065e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e2:	445a      	add	r2, fp
 80065e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065e6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 809f 	beq.w	800672e <_svfiprintf_r+0x1c6>
 80065f0:	2300      	movs	r3, #0
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295
 80065f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065fa:	f10a 0a01 	add.w	sl, sl, #1
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	9307      	str	r3, [sp, #28]
 8006602:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006606:	931a      	str	r3, [sp, #104]	@ 0x68
 8006608:	4654      	mov	r4, sl
 800660a:	2205      	movs	r2, #5
 800660c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006610:	484e      	ldr	r0, [pc, #312]	@ (800674c <_svfiprintf_r+0x1e4>)
 8006612:	f7f9 fe6d 	bl	80002f0 <memchr>
 8006616:	9a04      	ldr	r2, [sp, #16]
 8006618:	b9d8      	cbnz	r0, 8006652 <_svfiprintf_r+0xea>
 800661a:	06d0      	lsls	r0, r2, #27
 800661c:	bf44      	itt	mi
 800661e:	2320      	movmi	r3, #32
 8006620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006624:	0711      	lsls	r1, r2, #28
 8006626:	bf44      	itt	mi
 8006628:	232b      	movmi	r3, #43	@ 0x2b
 800662a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800662e:	f89a 3000 	ldrb.w	r3, [sl]
 8006632:	2b2a      	cmp	r3, #42	@ 0x2a
 8006634:	d015      	beq.n	8006662 <_svfiprintf_r+0xfa>
 8006636:	9a07      	ldr	r2, [sp, #28]
 8006638:	4654      	mov	r4, sl
 800663a:	2000      	movs	r0, #0
 800663c:	f04f 0c0a 	mov.w	ip, #10
 8006640:	4621      	mov	r1, r4
 8006642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006646:	3b30      	subs	r3, #48	@ 0x30
 8006648:	2b09      	cmp	r3, #9
 800664a:	d94b      	bls.n	80066e4 <_svfiprintf_r+0x17c>
 800664c:	b1b0      	cbz	r0, 800667c <_svfiprintf_r+0x114>
 800664e:	9207      	str	r2, [sp, #28]
 8006650:	e014      	b.n	800667c <_svfiprintf_r+0x114>
 8006652:	eba0 0308 	sub.w	r3, r0, r8
 8006656:	fa09 f303 	lsl.w	r3, r9, r3
 800665a:	4313      	orrs	r3, r2
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	46a2      	mov	sl, r4
 8006660:	e7d2      	b.n	8006608 <_svfiprintf_r+0xa0>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	1d19      	adds	r1, r3, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	9103      	str	r1, [sp, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	bfbb      	ittet	lt
 800666e:	425b      	neglt	r3, r3
 8006670:	f042 0202 	orrlt.w	r2, r2, #2
 8006674:	9307      	strge	r3, [sp, #28]
 8006676:	9307      	strlt	r3, [sp, #28]
 8006678:	bfb8      	it	lt
 800667a:	9204      	strlt	r2, [sp, #16]
 800667c:	7823      	ldrb	r3, [r4, #0]
 800667e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006680:	d10a      	bne.n	8006698 <_svfiprintf_r+0x130>
 8006682:	7863      	ldrb	r3, [r4, #1]
 8006684:	2b2a      	cmp	r3, #42	@ 0x2a
 8006686:	d132      	bne.n	80066ee <_svfiprintf_r+0x186>
 8006688:	9b03      	ldr	r3, [sp, #12]
 800668a:	1d1a      	adds	r2, r3, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	9203      	str	r2, [sp, #12]
 8006690:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006694:	3402      	adds	r4, #2
 8006696:	9305      	str	r3, [sp, #20]
 8006698:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800675c <_svfiprintf_r+0x1f4>
 800669c:	7821      	ldrb	r1, [r4, #0]
 800669e:	2203      	movs	r2, #3
 80066a0:	4650      	mov	r0, sl
 80066a2:	f7f9 fe25 	bl	80002f0 <memchr>
 80066a6:	b138      	cbz	r0, 80066b8 <_svfiprintf_r+0x150>
 80066a8:	9b04      	ldr	r3, [sp, #16]
 80066aa:	eba0 000a 	sub.w	r0, r0, sl
 80066ae:	2240      	movs	r2, #64	@ 0x40
 80066b0:	4082      	lsls	r2, r0
 80066b2:	4313      	orrs	r3, r2
 80066b4:	3401      	adds	r4, #1
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066bc:	4824      	ldr	r0, [pc, #144]	@ (8006750 <_svfiprintf_r+0x1e8>)
 80066be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066c2:	2206      	movs	r2, #6
 80066c4:	f7f9 fe14 	bl	80002f0 <memchr>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d036      	beq.n	800673a <_svfiprintf_r+0x1d2>
 80066cc:	4b21      	ldr	r3, [pc, #132]	@ (8006754 <_svfiprintf_r+0x1ec>)
 80066ce:	bb1b      	cbnz	r3, 8006718 <_svfiprintf_r+0x1b0>
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	3307      	adds	r3, #7
 80066d4:	f023 0307 	bic.w	r3, r3, #7
 80066d8:	3308      	adds	r3, #8
 80066da:	9303      	str	r3, [sp, #12]
 80066dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066de:	4433      	add	r3, r6
 80066e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e2:	e76a      	b.n	80065ba <_svfiprintf_r+0x52>
 80066e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066e8:	460c      	mov	r4, r1
 80066ea:	2001      	movs	r0, #1
 80066ec:	e7a8      	b.n	8006640 <_svfiprintf_r+0xd8>
 80066ee:	2300      	movs	r3, #0
 80066f0:	3401      	adds	r4, #1
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	4619      	mov	r1, r3
 80066f6:	f04f 0c0a 	mov.w	ip, #10
 80066fa:	4620      	mov	r0, r4
 80066fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006700:	3a30      	subs	r2, #48	@ 0x30
 8006702:	2a09      	cmp	r2, #9
 8006704:	d903      	bls.n	800670e <_svfiprintf_r+0x1a6>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0c6      	beq.n	8006698 <_svfiprintf_r+0x130>
 800670a:	9105      	str	r1, [sp, #20]
 800670c:	e7c4      	b.n	8006698 <_svfiprintf_r+0x130>
 800670e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006712:	4604      	mov	r4, r0
 8006714:	2301      	movs	r3, #1
 8006716:	e7f0      	b.n	80066fa <_svfiprintf_r+0x192>
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	462a      	mov	r2, r5
 800671e:	4b0e      	ldr	r3, [pc, #56]	@ (8006758 <_svfiprintf_r+0x1f0>)
 8006720:	a904      	add	r1, sp, #16
 8006722:	4638      	mov	r0, r7
 8006724:	f3af 8000 	nop.w
 8006728:	1c42      	adds	r2, r0, #1
 800672a:	4606      	mov	r6, r0
 800672c:	d1d6      	bne.n	80066dc <_svfiprintf_r+0x174>
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	065b      	lsls	r3, r3, #25
 8006732:	f53f af2d 	bmi.w	8006590 <_svfiprintf_r+0x28>
 8006736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006738:	e72c      	b.n	8006594 <_svfiprintf_r+0x2c>
 800673a:	ab03      	add	r3, sp, #12
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	462a      	mov	r2, r5
 8006740:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <_svfiprintf_r+0x1f0>)
 8006742:	a904      	add	r1, sp, #16
 8006744:	4638      	mov	r0, r7
 8006746:	f000 f879 	bl	800683c <_printf_i>
 800674a:	e7ed      	b.n	8006728 <_svfiprintf_r+0x1c0>
 800674c:	08006c00 	.word	0x08006c00
 8006750:	08006c0a 	.word	0x08006c0a
 8006754:	00000000 	.word	0x00000000
 8006758:	080064b1 	.word	0x080064b1
 800675c:	08006c06 	.word	0x08006c06

08006760 <_printf_common>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	4616      	mov	r6, r2
 8006766:	4698      	mov	r8, r3
 8006768:	688a      	ldr	r2, [r1, #8]
 800676a:	690b      	ldr	r3, [r1, #16]
 800676c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006770:	4293      	cmp	r3, r2
 8006772:	bfb8      	it	lt
 8006774:	4613      	movlt	r3, r2
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800677c:	4607      	mov	r7, r0
 800677e:	460c      	mov	r4, r1
 8006780:	b10a      	cbz	r2, 8006786 <_printf_common+0x26>
 8006782:	3301      	adds	r3, #1
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	0699      	lsls	r1, r3, #26
 800678a:	bf42      	ittt	mi
 800678c:	6833      	ldrmi	r3, [r6, #0]
 800678e:	3302      	addmi	r3, #2
 8006790:	6033      	strmi	r3, [r6, #0]
 8006792:	6825      	ldr	r5, [r4, #0]
 8006794:	f015 0506 	ands.w	r5, r5, #6
 8006798:	d106      	bne.n	80067a8 <_printf_common+0x48>
 800679a:	f104 0a19 	add.w	sl, r4, #25
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	6832      	ldr	r2, [r6, #0]
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dc26      	bgt.n	80067f6 <_printf_common+0x96>
 80067a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	3b00      	subs	r3, #0
 80067b0:	bf18      	it	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	0692      	lsls	r2, r2, #26
 80067b6:	d42b      	bmi.n	8006810 <_printf_common+0xb0>
 80067b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067bc:	4641      	mov	r1, r8
 80067be:	4638      	mov	r0, r7
 80067c0:	47c8      	blx	r9
 80067c2:	3001      	adds	r0, #1
 80067c4:	d01e      	beq.n	8006804 <_printf_common+0xa4>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	f003 0306 	and.w	r3, r3, #6
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	bf02      	ittt	eq
 80067d2:	68e5      	ldreq	r5, [r4, #12]
 80067d4:	6833      	ldreq	r3, [r6, #0]
 80067d6:	1aed      	subeq	r5, r5, r3
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	bf0c      	ite	eq
 80067dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e0:	2500      	movne	r5, #0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfc4      	itt	gt
 80067e6:	1a9b      	subgt	r3, r3, r2
 80067e8:	18ed      	addgt	r5, r5, r3
 80067ea:	2600      	movs	r6, #0
 80067ec:	341a      	adds	r4, #26
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	d11a      	bne.n	8006828 <_printf_common+0xc8>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e008      	b.n	8006808 <_printf_common+0xa8>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	4641      	mov	r1, r8
 80067fc:	4638      	mov	r0, r7
 80067fe:	47c8      	blx	r9
 8006800:	3001      	adds	r0, #1
 8006802:	d103      	bne.n	800680c <_printf_common+0xac>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680c:	3501      	adds	r5, #1
 800680e:	e7c6      	b.n	800679e <_printf_common+0x3e>
 8006810:	18e1      	adds	r1, r4, r3
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	2030      	movs	r0, #48	@ 0x30
 8006816:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800681a:	4422      	add	r2, r4
 800681c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006820:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006824:	3302      	adds	r3, #2
 8006826:	e7c7      	b.n	80067b8 <_printf_common+0x58>
 8006828:	2301      	movs	r3, #1
 800682a:	4622      	mov	r2, r4
 800682c:	4641      	mov	r1, r8
 800682e:	4638      	mov	r0, r7
 8006830:	47c8      	blx	r9
 8006832:	3001      	adds	r0, #1
 8006834:	d0e6      	beq.n	8006804 <_printf_common+0xa4>
 8006836:	3601      	adds	r6, #1
 8006838:	e7d9      	b.n	80067ee <_printf_common+0x8e>
	...

0800683c <_printf_i>:
 800683c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	7e0f      	ldrb	r7, [r1, #24]
 8006842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006844:	2f78      	cmp	r7, #120	@ 0x78
 8006846:	4691      	mov	r9, r2
 8006848:	4680      	mov	r8, r0
 800684a:	460c      	mov	r4, r1
 800684c:	469a      	mov	sl, r3
 800684e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006852:	d807      	bhi.n	8006864 <_printf_i+0x28>
 8006854:	2f62      	cmp	r7, #98	@ 0x62
 8006856:	d80a      	bhi.n	800686e <_printf_i+0x32>
 8006858:	2f00      	cmp	r7, #0
 800685a:	f000 80d2 	beq.w	8006a02 <_printf_i+0x1c6>
 800685e:	2f58      	cmp	r7, #88	@ 0x58
 8006860:	f000 80b9 	beq.w	80069d6 <_printf_i+0x19a>
 8006864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006868:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800686c:	e03a      	b.n	80068e4 <_printf_i+0xa8>
 800686e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006872:	2b15      	cmp	r3, #21
 8006874:	d8f6      	bhi.n	8006864 <_printf_i+0x28>
 8006876:	a101      	add	r1, pc, #4	@ (adr r1, 800687c <_printf_i+0x40>)
 8006878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068e9 	.word	0x080068e9
 8006884:	08006865 	.word	0x08006865
 8006888:	08006865 	.word	0x08006865
 800688c:	08006865 	.word	0x08006865
 8006890:	08006865 	.word	0x08006865
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006865 	.word	0x08006865
 800689c:	08006865 	.word	0x08006865
 80068a0:	08006865 	.word	0x08006865
 80068a4:	08006865 	.word	0x08006865
 80068a8:	080069e9 	.word	0x080069e9
 80068ac:	08006913 	.word	0x08006913
 80068b0:	080069a3 	.word	0x080069a3
 80068b4:	08006865 	.word	0x08006865
 80068b8:	08006865 	.word	0x08006865
 80068bc:	08006a0b 	.word	0x08006a0b
 80068c0:	08006865 	.word	0x08006865
 80068c4:	08006913 	.word	0x08006913
 80068c8:	08006865 	.word	0x08006865
 80068cc:	08006865 	.word	0x08006865
 80068d0:	080069ab 	.word	0x080069ab
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6032      	str	r2, [r6, #0]
 80068dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068e4:	2301      	movs	r3, #1
 80068e6:	e09d      	b.n	8006a24 <_printf_i+0x1e8>
 80068e8:	6833      	ldr	r3, [r6, #0]
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	1d19      	adds	r1, r3, #4
 80068ee:	6031      	str	r1, [r6, #0]
 80068f0:	0606      	lsls	r6, r0, #24
 80068f2:	d501      	bpl.n	80068f8 <_printf_i+0xbc>
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	e003      	b.n	8006900 <_printf_i+0xc4>
 80068f8:	0645      	lsls	r5, r0, #25
 80068fa:	d5fb      	bpl.n	80068f4 <_printf_i+0xb8>
 80068fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006900:	2d00      	cmp	r5, #0
 8006902:	da03      	bge.n	800690c <_printf_i+0xd0>
 8006904:	232d      	movs	r3, #45	@ 0x2d
 8006906:	426d      	negs	r5, r5
 8006908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800690c:	4859      	ldr	r0, [pc, #356]	@ (8006a74 <_printf_i+0x238>)
 800690e:	230a      	movs	r3, #10
 8006910:	e011      	b.n	8006936 <_printf_i+0xfa>
 8006912:	6821      	ldr	r1, [r4, #0]
 8006914:	6833      	ldr	r3, [r6, #0]
 8006916:	0608      	lsls	r0, r1, #24
 8006918:	f853 5b04 	ldr.w	r5, [r3], #4
 800691c:	d402      	bmi.n	8006924 <_printf_i+0xe8>
 800691e:	0649      	lsls	r1, r1, #25
 8006920:	bf48      	it	mi
 8006922:	b2ad      	uxthmi	r5, r5
 8006924:	2f6f      	cmp	r7, #111	@ 0x6f
 8006926:	4853      	ldr	r0, [pc, #332]	@ (8006a74 <_printf_i+0x238>)
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	bf14      	ite	ne
 800692c:	230a      	movne	r3, #10
 800692e:	2308      	moveq	r3, #8
 8006930:	2100      	movs	r1, #0
 8006932:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006936:	6866      	ldr	r6, [r4, #4]
 8006938:	60a6      	str	r6, [r4, #8]
 800693a:	2e00      	cmp	r6, #0
 800693c:	bfa2      	ittt	ge
 800693e:	6821      	ldrge	r1, [r4, #0]
 8006940:	f021 0104 	bicge.w	r1, r1, #4
 8006944:	6021      	strge	r1, [r4, #0]
 8006946:	b90d      	cbnz	r5, 800694c <_printf_i+0x110>
 8006948:	2e00      	cmp	r6, #0
 800694a:	d04b      	beq.n	80069e4 <_printf_i+0x1a8>
 800694c:	4616      	mov	r6, r2
 800694e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006952:	fb03 5711 	mls	r7, r3, r1, r5
 8006956:	5dc7      	ldrb	r7, [r0, r7]
 8006958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800695c:	462f      	mov	r7, r5
 800695e:	42bb      	cmp	r3, r7
 8006960:	460d      	mov	r5, r1
 8006962:	d9f4      	bls.n	800694e <_printf_i+0x112>
 8006964:	2b08      	cmp	r3, #8
 8006966:	d10b      	bne.n	8006980 <_printf_i+0x144>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	07df      	lsls	r7, r3, #31
 800696c:	d508      	bpl.n	8006980 <_printf_i+0x144>
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	6861      	ldr	r1, [r4, #4]
 8006972:	4299      	cmp	r1, r3
 8006974:	bfde      	ittt	le
 8006976:	2330      	movle	r3, #48	@ 0x30
 8006978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800697c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006980:	1b92      	subs	r2, r2, r6
 8006982:	6122      	str	r2, [r4, #16]
 8006984:	f8cd a000 	str.w	sl, [sp]
 8006988:	464b      	mov	r3, r9
 800698a:	aa03      	add	r2, sp, #12
 800698c:	4621      	mov	r1, r4
 800698e:	4640      	mov	r0, r8
 8006990:	f7ff fee6 	bl	8006760 <_printf_common>
 8006994:	3001      	adds	r0, #1
 8006996:	d14a      	bne.n	8006a2e <_printf_i+0x1f2>
 8006998:	f04f 30ff 	mov.w	r0, #4294967295
 800699c:	b004      	add	sp, #16
 800699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	f043 0320 	orr.w	r3, r3, #32
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	4833      	ldr	r0, [pc, #204]	@ (8006a78 <_printf_i+0x23c>)
 80069ac:	2778      	movs	r7, #120	@ 0x78
 80069ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	6831      	ldr	r1, [r6, #0]
 80069b6:	061f      	lsls	r7, r3, #24
 80069b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80069bc:	d402      	bmi.n	80069c4 <_printf_i+0x188>
 80069be:	065f      	lsls	r7, r3, #25
 80069c0:	bf48      	it	mi
 80069c2:	b2ad      	uxthmi	r5, r5
 80069c4:	6031      	str	r1, [r6, #0]
 80069c6:	07d9      	lsls	r1, r3, #31
 80069c8:	bf44      	itt	mi
 80069ca:	f043 0320 	orrmi.w	r3, r3, #32
 80069ce:	6023      	strmi	r3, [r4, #0]
 80069d0:	b11d      	cbz	r5, 80069da <_printf_i+0x19e>
 80069d2:	2310      	movs	r3, #16
 80069d4:	e7ac      	b.n	8006930 <_printf_i+0xf4>
 80069d6:	4827      	ldr	r0, [pc, #156]	@ (8006a74 <_printf_i+0x238>)
 80069d8:	e7e9      	b.n	80069ae <_printf_i+0x172>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	f023 0320 	bic.w	r3, r3, #32
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	e7f6      	b.n	80069d2 <_printf_i+0x196>
 80069e4:	4616      	mov	r6, r2
 80069e6:	e7bd      	b.n	8006964 <_printf_i+0x128>
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	6825      	ldr	r5, [r4, #0]
 80069ec:	6961      	ldr	r1, [r4, #20]
 80069ee:	1d18      	adds	r0, r3, #4
 80069f0:	6030      	str	r0, [r6, #0]
 80069f2:	062e      	lsls	r6, r5, #24
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	d501      	bpl.n	80069fc <_printf_i+0x1c0>
 80069f8:	6019      	str	r1, [r3, #0]
 80069fa:	e002      	b.n	8006a02 <_printf_i+0x1c6>
 80069fc:	0668      	lsls	r0, r5, #25
 80069fe:	d5fb      	bpl.n	80069f8 <_printf_i+0x1bc>
 8006a00:	8019      	strh	r1, [r3, #0]
 8006a02:	2300      	movs	r3, #0
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	4616      	mov	r6, r2
 8006a08:	e7bc      	b.n	8006984 <_printf_i+0x148>
 8006a0a:	6833      	ldr	r3, [r6, #0]
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	6032      	str	r2, [r6, #0]
 8006a10:	681e      	ldr	r6, [r3, #0]
 8006a12:	6862      	ldr	r2, [r4, #4]
 8006a14:	2100      	movs	r1, #0
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7f9 fc6a 	bl	80002f0 <memchr>
 8006a1c:	b108      	cbz	r0, 8006a22 <_printf_i+0x1e6>
 8006a1e:	1b80      	subs	r0, r0, r6
 8006a20:	6060      	str	r0, [r4, #4]
 8006a22:	6863      	ldr	r3, [r4, #4]
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	2300      	movs	r3, #0
 8006a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a2c:	e7aa      	b.n	8006984 <_printf_i+0x148>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	47d0      	blx	sl
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d0ad      	beq.n	8006998 <_printf_i+0x15c>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	079b      	lsls	r3, r3, #30
 8006a40:	d413      	bmi.n	8006a6a <_printf_i+0x22e>
 8006a42:	68e0      	ldr	r0, [r4, #12]
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	4298      	cmp	r0, r3
 8006a48:	bfb8      	it	lt
 8006a4a:	4618      	movlt	r0, r3
 8006a4c:	e7a6      	b.n	800699c <_printf_i+0x160>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4632      	mov	r2, r6
 8006a52:	4649      	mov	r1, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	47d0      	blx	sl
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d09d      	beq.n	8006998 <_printf_i+0x15c>
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	68e3      	ldr	r3, [r4, #12]
 8006a60:	9903      	ldr	r1, [sp, #12]
 8006a62:	1a5b      	subs	r3, r3, r1
 8006a64:	42ab      	cmp	r3, r5
 8006a66:	dcf2      	bgt.n	8006a4e <_printf_i+0x212>
 8006a68:	e7eb      	b.n	8006a42 <_printf_i+0x206>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	f104 0619 	add.w	r6, r4, #25
 8006a70:	e7f5      	b.n	8006a5e <_printf_i+0x222>
 8006a72:	bf00      	nop
 8006a74:	08006c11 	.word	0x08006c11
 8006a78:	08006c22 	.word	0x08006c22

08006a7c <memmove>:
 8006a7c:	4288      	cmp	r0, r1
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	eb01 0402 	add.w	r4, r1, r2
 8006a84:	d902      	bls.n	8006a8c <memmove+0x10>
 8006a86:	4284      	cmp	r4, r0
 8006a88:	4623      	mov	r3, r4
 8006a8a:	d807      	bhi.n	8006a9c <memmove+0x20>
 8006a8c:	1e43      	subs	r3, r0, #1
 8006a8e:	42a1      	cmp	r1, r4
 8006a90:	d008      	beq.n	8006aa4 <memmove+0x28>
 8006a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a9a:	e7f8      	b.n	8006a8e <memmove+0x12>
 8006a9c:	4402      	add	r2, r0
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	428a      	cmp	r2, r1
 8006aa2:	d100      	bne.n	8006aa6 <memmove+0x2a>
 8006aa4:	bd10      	pop	{r4, pc}
 8006aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aae:	e7f7      	b.n	8006aa0 <memmove+0x24>

08006ab0 <_sbrk_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d06      	ldr	r5, [pc, #24]	@ (8006acc <_sbrk_r+0x1c>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fa f91c 	bl	8000cf8 <_sbrk>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_sbrk_r+0x1a>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_sbrk_r+0x1a>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	2400075c 	.word	0x2400075c

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <_realloc_r>:
 8006aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	4680      	mov	r8, r0
 8006af2:	4615      	mov	r5, r2
 8006af4:	460c      	mov	r4, r1
 8006af6:	b921      	cbnz	r1, 8006b02 <_realloc_r+0x16>
 8006af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	4611      	mov	r1, r2
 8006afe:	f7ff bc4b 	b.w	8006398 <_malloc_r>
 8006b02:	b92a      	cbnz	r2, 8006b10 <_realloc_r+0x24>
 8006b04:	f7ff fbdc 	bl	80062c0 <_free_r>
 8006b08:	2400      	movs	r4, #0
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	f000 f81a 	bl	8006b48 <_malloc_usable_size_r>
 8006b14:	4285      	cmp	r5, r0
 8006b16:	4606      	mov	r6, r0
 8006b18:	d802      	bhi.n	8006b20 <_realloc_r+0x34>
 8006b1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b1e:	d8f4      	bhi.n	8006b0a <_realloc_r+0x1e>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7ff fc38 	bl	8006398 <_malloc_r>
 8006b28:	4607      	mov	r7, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d0ec      	beq.n	8006b08 <_realloc_r+0x1c>
 8006b2e:	42b5      	cmp	r5, r6
 8006b30:	462a      	mov	r2, r5
 8006b32:	4621      	mov	r1, r4
 8006b34:	bf28      	it	cs
 8006b36:	4632      	movcs	r2, r6
 8006b38:	f7ff ffca 	bl	8006ad0 <memcpy>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4640      	mov	r0, r8
 8006b40:	f7ff fbbe 	bl	80062c0 <_free_r>
 8006b44:	463c      	mov	r4, r7
 8006b46:	e7e0      	b.n	8006b0a <_realloc_r+0x1e>

08006b48 <_malloc_usable_size_r>:
 8006b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4c:	1f18      	subs	r0, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfbc      	itt	lt
 8006b52:	580b      	ldrlt	r3, [r1, r0]
 8006b54:	18c0      	addlt	r0, r0, r3
 8006b56:	4770      	bx	lr

08006b58 <_init>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr

08006b64 <_fini>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr
