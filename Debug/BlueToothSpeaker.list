
BlueToothSpeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000679c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006a3c  08006a3c  00007a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006af8  08006af8  00007af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b00  08006b00  00007b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006b04  08006b04  00007b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08006b08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006e4  24000078  08006b80  00008078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400075c  08006b80  0000875c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014e2f  00000000  00000000  000080a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c15  00000000  00000000  0001ced5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df8  00000000  00000000  0001faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000aab  00000000  00000000  000208e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037434  00000000  00000000  00021393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000147bf  00000000  00000000  000587c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a52b  00000000  00000000  0006cf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c74b1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e94  00000000  00000000  001c74f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001cb388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006a24 	.word	0x08006a24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08006a24 	.word	0x08006a24

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b3f      	ldr	r3, [pc, #252]	@ (8000794 <MX_GPIO_Init+0x114>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a3d      	ldr	r2, [pc, #244]	@ (8000794 <MX_GPIO_Init+0x114>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b37      	ldr	r3, [pc, #220]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a36      	ldr	r2, [pc, #216]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <MX_GPIO_Init+0x114>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <MX_GPIO_Init+0x114>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f248 0160 	movw	r1, #32864	@ 0x8060
 8000714:	4820      	ldr	r0, [pc, #128]	@ (8000798 <MX_GPIO_Init+0x118>)
 8000716:	f001 f8b3 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	481f      	ldr	r0, [pc, #124]	@ (800079c <MX_GPIO_Init+0x11c>)
 8000720:	f001 f8ae 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800072a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4819      	ldr	r0, [pc, #100]	@ (80007a0 <MX_GPIO_Init+0x120>)
 800073c:	f000 fed8 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000740:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	@ (8000798 <MX_GPIO_Init+0x118>)
 800075a:	f000 fec9 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800075e:	2380      	movs	r3, #128	@ 0x80
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4809      	ldr	r0, [pc, #36]	@ (800079c <MX_GPIO_Init+0x11c>)
 8000776:	f000 febb 	bl	80014f0 <HAL_GPIO_Init>



/* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2102      	movs	r1, #2
 800077e:	2028      	movs	r0, #40	@ 0x28
 8000780:	f000 fe09 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000784:	2028      	movs	r0, #40	@ 0x28
 8000786:	f000 fe20 	bl	80013ca <HAL_NVIC_EnableIRQ>
/* USER CODE END 2 */
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58024400 	.word	0x58024400
 8000798:	58020000 	.word	0x58020000
 800079c:	58020400 	.word	0x58020400
 80007a0:	58020800 	.word	0x58020800

080007a4 <m18TriggerInput>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
void m18TriggerInput(GPIO_TypeDef* port, uint32_t pin){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(port,pin,GPIO_PIN_RESET);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	2200      	movs	r2, #0
 80007b4:	4619      	mov	r1, r3
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f001 f862 	bl	8001880 <HAL_GPIO_WritePin>
	HAL_Delay(M18DELAYMS);
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <m18TriggerInput+0x38>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fcdd 	bl	8001180 <HAL_Delay>
	HAL_GPIO_WritePin(port,pin, GPIO_PIN_SET);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f001 f856 	bl	8001880 <HAL_GPIO_WritePin>



}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000014 	.word	0x24000014

080007e0 <stateUpdate>:
void stateUpdate(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	switch(activeStatePtr->currentState){
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <stateUpdate+0x60>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d820      	bhi.n	8000832 <stateUpdate+0x52>
 80007f0:	a201      	add	r2, pc, #4	@ (adr r2, 80007f8 <stateUpdate+0x18>)
 80007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f6:	bf00      	nop
 80007f8:	08000809 	.word	0x08000809
 80007fc:	08000813 	.word	0x08000813
 8000800:	0800081f 	.word	0x0800081f
 8000804:	08000829 	.word	0x08000829
		case STATE_PAUSE_PLAY:
			m18TriggerInput(TRACK_OPTIONS_PORT, PAUSE_PLAY_PIN);
 8000808:	2120      	movs	r1, #32
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <stateUpdate+0x64>)
 800080c:	f7ff ffca 	bl	80007a4 <m18TriggerInput>
			break;
 8000810:	e010      	b.n	8000834 <stateUpdate+0x54>
		case STATE_PREV_TRACK:
			m18TriggerInput(TRACK_OPTIONS_PORT, PREV_TRACK_PIN);
 8000812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000816:	480b      	ldr	r0, [pc, #44]	@ (8000844 <stateUpdate+0x64>)
 8000818:	f7ff ffc4 	bl	80007a4 <m18TriggerInput>
			break;
 800081c:	e00a      	b.n	8000834 <stateUpdate+0x54>
		case STATE_NEXT_TRACK:
			m18TriggerInput(TRACK_OPTIONS_PORT, NEXT_TRACK_PIN);
 800081e:	2140      	movs	r1, #64	@ 0x40
 8000820:	4808      	ldr	r0, [pc, #32]	@ (8000844 <stateUpdate+0x64>)
 8000822:	f7ff ffbf 	bl	80007a4 <m18TriggerInput>
			break;
 8000826:	e005      	b.n	8000834 <stateUpdate+0x54>
		case STATE_POWER_OFF_ON:
			m18TriggerInput(M18_POWER_PORT, M18_POWER_PIN);
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <stateUpdate+0x68>)
 800082c:	f7ff ffba 	bl	80007a4 <m18TriggerInput>
			break;
 8000830:	e000      	b.n	8000834 <stateUpdate+0x54>
		default:
			break;
 8000832:	bf00      	nop
	}
	activeStatePtr->currentState = STATE_IDLE;
 8000834:	4b02      	ldr	r3, [pc, #8]	@ (8000840 <stateUpdate+0x60>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000010 	.word	0x24000010
 8000844:	58020000 	.word	0x58020000
 8000848:	58020400 	.word	0x58020400

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000852:	f000 f88f 	bl	8000974 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fc01 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f81f 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff ff0f 	bl	8000680 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000862:	f000 fa6d 	bl	8000d40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000866:	f000 fb21 	bl	8000eac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startMsg[13] = "mainStart\r\n";
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <main+0x48>)
 800086c:	463b      	mov	r3, r7
 800086e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000870:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000874:	2300      	movs	r3, #0
 8000876:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&huart3, &startMsg, strlen(&startMsg),100);
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fd30 	bl	80002e0 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	4639      	mov	r1, r7
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <main+0x4c>)
 800088a:	f004 f809 	bl	80048a0 <HAL_UART_Transmit>
 */
	  if (activeStatePtr->currentState!= STATE_IDLE){

	  }

	  stateUpdate();
 800088e:	f7ff ffa7 	bl	80007e0 <stateUpdate>
	  if (activeStatePtr->currentState!= STATE_IDLE){
 8000892:	e7fc      	b.n	800088e <main+0x42>
 8000894:	08006a3c 	.word	0x08006a3c
 8000898:	24000098 	.word	0x24000098

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09c      	sub	sp, #112	@ 0x70
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a6:	224c      	movs	r2, #76	@ 0x4c
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fc3a 	bl	8006124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2220      	movs	r2, #32
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fc34 	bl	8006124 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008bc:	2002      	movs	r0, #2
 80008be:	f001 f943 	bl	8001b48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b29      	ldr	r3, [pc, #164]	@ (800096c <SystemClock_Config+0xd0>)
 80008c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ca:	4a28      	ldr	r2, [pc, #160]	@ (800096c <SystemClock_Config+0xd0>)
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <SystemClock_Config+0xd0>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <SystemClock_Config+0xd4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008e4:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <SystemClock_Config+0xd4>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <SystemClock_Config+0xd4>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f8:	bf00      	nop
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <SystemClock_Config+0xd4>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000906:	d1f8      	bne.n	80008fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000908:	2322      	movs	r3, #34	@ 0x22
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800090c:	2301      	movs	r3, #1
 800090e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2340      	movs	r3, #64	@ 0x40
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000920:	4618      	mov	r0, r3
 8000922:	f001 f95b 	bl	8001bdc <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800092c:	f000 f84e 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	233f      	movs	r3, #63	@ 0x3f
 8000932:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fd9b 	bl	8002490 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000960:	f000 f834 	bl	80009cc <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3770      	adds	r7, #112	@ 0x70
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58000400 	.word	0x58000400
 8000970:	58024800 	.word	0x58024800

08000974 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000986:	f000 fd3b 	bl	8001400 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800098a:	2301      	movs	r3, #1
 800098c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800098e:	2300      	movs	r3, #0
 8000990:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000996:	231f      	movs	r3, #31
 8000998:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800099a:	2387      	movs	r3, #135	@ 0x87
 800099c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800099e:	2300      	movs	r3, #0
 80009a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b6:	463b      	mov	r3, r7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fd59 	bl	8001470 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009be:	2004      	movs	r0, #4
 80009c0:	f000 fd36 	bl	8001430 <HAL_MPU_Enable>

}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_MspInit+0x30>)
 80009e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e4:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_MspInit+0x30>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_MspInit+0x30>)
 80009f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	58024400 	.word	0x58024400

08000a0c <updateState>:
/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void updateState(uint32_t duration_ms){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(duration_ms < 500){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a1a:	d204      	bcs.n	8000a26 <updateState+0x1a>
		activeStatePtr->currentState = STATE_PAUSE_PLAY;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <updateState+0x58>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
			activeStatePtr->currentState = STATE_NEXT_TRACK;
		}else{
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
		}

}
 8000a24:	e017      	b.n	8000a56 <updateState+0x4a>
		}else if (duration_ms < 1500){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d804      	bhi.n	8000a3a <updateState+0x2e>
			activeStatePtr->currentState = STATE_PREV_TRACK;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <updateState+0x58>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2202      	movs	r2, #2
 8000a36:	701a      	strb	r2, [r3, #0]
}
 8000a38:	e00d      	b.n	8000a56 <updateState+0x4a>
		}else if(duration_ms < 2500){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d804      	bhi.n	8000a4e <updateState+0x42>
			activeStatePtr->currentState = STATE_NEXT_TRACK;
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <updateState+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2203      	movs	r2, #3
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	e003      	b.n	8000a56 <updateState+0x4a>
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <updateState+0x58>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2204      	movs	r2, #4
 8000a54:	701a      	strb	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	24000010 	.word	0x24000010

08000a68 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b09b      	sub	sp, #108	@ 0x6c
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
	uint8_t msg[] = "Interrupt\r\n";
 8000a72:	4a32      	ldr	r2, [pc, #200]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a74:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, &msg, strlen(msg),1000);
 8000a7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fc2c 	bl	80002e0 <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a94:	482a      	ldr	r0, [pc, #168]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a96:	f003 ff03 	bl	80048a0 <HAL_UART_Transmit>
	if (GPIO_Pin == USER_BUTTON_PIN){
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa0:	d147      	bne.n	8000b32 <HAL_GPIO_EXTI_Callback+0xca>
		if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_SET){
 8000aa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa6:	4827      	ldr	r0, [pc, #156]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000aa8:	f000 fed2 	bl	8001850 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d11d      	bne.n	8000aee <HAL_GPIO_EXTI_Callback+0x86>
			char buff[50];
			activeStatePtr->lastPress = HAL_GetTick();
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000ab4:	681c      	ldr	r4, [r3, #0]
 8000ab6:	f000 fb57 	bl	8001168 <HAL_GetTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	6063      	str	r3, [r4, #4]
			sprintf(buff, "PressTime: %d ms \r\n", activeStatePtr->lastPress);
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4920      	ldr	r1, [pc, #128]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f005 fb0a 	bl	80060e4 <siprintf>
			HAL_UART_Transmit(&huart3, buff, strlen(buff), 1000);
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fc03 	bl	80002e0 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f107 0108 	add.w	r1, r7, #8
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	4816      	ldr	r0, [pc, #88]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ae8:	f003 feda 	bl	80048a0 <HAL_UART_Transmit>
			sprintf(buff2, "Duration: %d ms State: %d \r\n",duration_ms, activeStatePtr->currentState);
			HAL_UART_Transmit(&huart3, buff2, strlen(buff2), 1000);
			}
		}

	}
 8000aec:	e021      	b.n	8000b32 <HAL_GPIO_EXTI_Callback+0xca>
			uint32_t duration_ms = HAL_GetTick()-activeStatePtr->lastPress;
 8000aee:	f000 fb3b 	bl	8001168 <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	667b      	str	r3, [r7, #100]	@ 0x64
			updateState(duration_ms);
 8000afe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000b00:	f7ff ff84 	bl	8000a0c <updateState>
			sprintf(buff2, "Duration: %d ms State: %d \r\n",duration_ms, activeStatePtr->currentState);
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f107 0008 	add.w	r0, r7, #8
 8000b0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000b10:	490f      	ldr	r1, [pc, #60]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b12:	f005 fae7 	bl	80060e4 <siprintf>
			HAL_UART_Transmit(&huart3, buff2, strlen(buff2), 1000);
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fbe0 	bl	80002e0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f107 0108 	add.w	r1, r7, #8
 8000b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000b2e:	f003 feb7 	bl	80048a0 <HAL_UART_Transmit>
	}
 8000b32:	bf00      	nop
 8000b34:	376c      	adds	r7, #108	@ 0x6c
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08006a80 	.word	0x08006a80
 8000b40:	24000098 	.word	0x24000098
 8000b44:	58020800 	.word	0x58020800
 8000b48:	24000010 	.word	0x24000010
 8000b4c:	08006a4c 	.word	0x08006a4c
 8000b50:	08006a60 	.word	0x08006a60

08000b54 <EXTI15_10_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI15_10_IRQHandler(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);  // Calls HAL EXTI handler for PC13
 8000b58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b5c:	f000 fea9 	bl	80018b2 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 fac1 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f005 fa9e 	bl	8006134 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24080000 	.word	0x24080000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	24000094 	.word	0x24000094
 8000c2c:	24000760 	.word	0x24000760

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c34:	4b37      	ldr	r3, [pc, #220]	@ (8000d14 <SystemInit+0xe4>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a36      	ldr	r2, [pc, #216]	@ (8000d14 <SystemInit+0xe4>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c44:	4b34      	ldr	r3, [pc, #208]	@ (8000d18 <SystemInit+0xe8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	d807      	bhi.n	8000c60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c50:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <SystemInit+0xe8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f023 030f 	bic.w	r3, r3, #15
 8000c58:	4a2f      	ldr	r2, [pc, #188]	@ (8000d18 <SystemInit+0xe8>)
 8000c5a:	f043 0307 	orr.w	r3, r3, #7
 8000c5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c60:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <SystemInit+0xec>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a2d      	ldr	r2, [pc, #180]	@ (8000d1c <SystemInit+0xec>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <SystemInit+0xec>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <SystemInit+0xec>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4929      	ldr	r1, [pc, #164]	@ (8000d1c <SystemInit+0xec>)
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <SystemInit+0xf0>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <SystemInit+0xe8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c8a:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <SystemInit+0xe8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 030f 	bic.w	r3, r3, #15
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <SystemInit+0xe8>)
 8000c94:	f043 0307 	orr.w	r3, r3, #7
 8000c98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <SystemInit+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <SystemInit+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <SystemInit+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <SystemInit+0xec>)
 8000cae:	4a1d      	ldr	r2, [pc, #116]	@ (8000d24 <SystemInit+0xf4>)
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <SystemInit+0xec>)
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <SystemInit+0xf8>)
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <SystemInit+0xec>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <SystemInit+0xfc>)
 8000cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <SystemInit+0xec>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <SystemInit+0xec>)
 8000cc6:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <SystemInit+0xfc>)
 8000cc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <SystemInit+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <SystemInit+0xec>)
 8000cd2:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <SystemInit+0xfc>)
 8000cd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <SystemInit+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <SystemInit+0xec>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <SystemInit+0xec>)
 8000ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <SystemInit+0xec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <SystemInit+0x100>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <SystemInit+0x104>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cfa:	d202      	bcs.n	8000d02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <SystemInit+0x108>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <SystemInit+0x10c>)
 8000d04:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	52002000 	.word	0x52002000
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d24:	02020200 	.word	0x02020200
 8000d28:	01ff0000 	.word	0x01ff0000
 8000d2c:	01010280 	.word	0x01010280
 8000d30:	5c001000 	.word	0x5c001000
 8000d34:	ffff0000 	.word	0xffff0000
 8000d38:	51008108 	.word	0x51008108
 8000d3c:	52004000 	.word	0x52004000

08000d40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <MX_USART3_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d8a:	f003 fd39 	bl	8004800 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f7ff fe1a 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d9c:	f004 fdcf 	bl	800593e <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f7ff fe11 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dae:	f004 fe04 	bl	80059ba <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f7ff fe08 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f004 fd85 	bl	80058cc <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f7ff fe00 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000098 	.word	0x24000098
 8000dd4:	40004800 	.word	0x40004800

08000dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ba      	sub	sp, #232	@ 0xe8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	22c0      	movs	r2, #192	@ 0xc0
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 f993 	bl	8006124 <memset>
  if(uartHandle->Instance==USART3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a27      	ldr	r2, [pc, #156]	@ (8000ea0 <HAL_UART_MspInit+0xc8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d146      	bne.n	8000e96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e08:	f04f 0202 	mov.w	r2, #2
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fec2 	bl	8002ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e2a:	f7ff fdcf 	bl	80009cc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_UART_MspInit+0xd0>)
 8000e92:	f000 fb2d 	bl	80014f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	37e8      	adds	r7, #232	@ 0xe8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020c00 	.word	0x58020c00

08000eac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb2:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb8:	2209      	movs	r2, #9
 8000eba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef4:	f000 fcf7 	bl	80018e6 <HAL_PCD_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000efe:	f7ff fd65 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2400012c 	.word	0x2400012c
 8000f0c:	40080000 	.word	0x40080000

08000f10 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ba      	sub	sp, #232	@ 0xe8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22c0      	movs	r2, #192	@ 0xc0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 f8f7 	bl	8006124 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a30      	ldr	r2, [pc, #192]	@ (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d159      	bne.n	8000ff4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f4c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fe25 	bl	8002ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f64:	f7ff fd32 	bl	80009cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f68:	f000 fe28 	bl	8001bbc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <HAL_PCD_MspInit+0xf0>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	4a23      	ldr	r2, [pc, #140]	@ (8001000 <HAL_PCD_MspInit+0xf0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7c:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_PCD_MspInit+0xf0>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f8a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4814      	ldr	r0, [pc, #80]	@ (8001004 <HAL_PCD_MspInit+0xf4>)
 8000fb2:	f000 fa9d 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <HAL_PCD_MspInit+0xf4>)
 8000fd2:	f000 fa8d 	bl	80014f0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fdc:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fe2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	37e8      	adds	r7, #232	@ 0xe8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40080000 	.word	0x40080000
 8001000:	58024400 	.word	0x58024400
 8001004:	58020000 	.word	0x58020000

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800100c:	f7ff fe10 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f005 f883 	bl	8006140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fc07 	bl	800084c <main>
  bx  lr
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001048:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800104c:	08006b08 	.word	0x08006b08
  ldr r2, =_sbss
 8001050:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001054:	2400075c 	.word	0x2400075c

08001058 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC3_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f98c 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001068:	f001 fbc8 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 800106c:	4602      	mov	r2, r0
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_Init+0x68>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	4913      	ldr	r1, [pc, #76]	@ (80010c8 <HAL_Init+0x6c>)
 800107a:	5ccb      	ldrb	r3, [r1, r3]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_Init+0x68>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	4a0e      	ldr	r2, [pc, #56]	@ (80010c8 <HAL_Init+0x6c>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	fa22 f303 	lsr.w	r3, r2, r3
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_Init+0x70>)
 800109e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_Init+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f814 	bl	80010d4 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e002      	b.n	80010bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b6:	f7ff fc8f 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58024400 	.word	0x58024400
 80010c8:	08006a8c 	.word	0x08006a8c
 80010cc:	2400001c 	.word	0x2400001c
 80010d0:	24000018 	.word	0x24000018

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e021      	b.n	800112c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_InitTick+0x64>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_InitTick+0x60>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f971 	bl	80013e6 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f93b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x68>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24000024 	.word	0x24000024
 8001138:	24000018 	.word	0x24000018
 800113c:	24000020 	.word	0x24000020

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	24000024 	.word	0x24000024
 8001164:	24000610 	.word	0x24000610

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	24000610 	.word	0x24000610

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	24000024 	.word	0x24000024

080011c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetREVID+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0c1b      	lsrs	r3, r3, #16
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	5c001000 	.word	0x5c001000

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__NVIC_SetPriorityGrouping+0x40>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	4313      	orrs	r3, r2
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <__NVIC_SetPriorityGrouping+0x40>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	05fa0000 	.word	0x05fa0000

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff40 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff33 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa4 	bl	800133c <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001404:	f3bf 8f5f 	dmb	sy
}
 8001408:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <HAL_MPU_Disable+0x28>)
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140e:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <HAL_MPU_Disable+0x28>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001414:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <HAL_MPU_Disable+0x2c>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	e000ed90 	.word	0xe000ed90

08001430 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_MPU_Enable+0x38>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_MPU_Enable+0x3c>)
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	4a09      	ldr	r2, [pc, #36]	@ (800146c <HAL_MPU_Enable+0x3c>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed90 	.word	0xe000ed90
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	785a      	ldrb	r2, [r3, #1]
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_MPU_ConfigRegion+0x7c>)
 800147e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_MPU_ConfigRegion+0x7c>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <HAL_MPU_ConfigRegion+0x7c>)
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800148c:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <HAL_MPU_ConfigRegion+0x7c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7b1b      	ldrb	r3, [r3, #12]
 8001498:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7adb      	ldrb	r3, [r3, #11]
 800149e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7a9b      	ldrb	r3, [r3, #10]
 80014a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7b5b      	ldrb	r3, [r3, #13]
 80014ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7b9b      	ldrb	r3, [r3, #14]
 80014b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7bdb      	ldrb	r3, [r3, #15]
 80014be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7a5b      	ldrb	r3, [r3, #9]
 80014c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7a1b      	ldrb	r3, [r3, #8]
 80014ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014dc:	6113      	str	r3, [r2, #16]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed90 	.word	0xe000ed90

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014fe:	4b89      	ldr	r3, [pc, #548]	@ (8001724 <HAL_GPIO_Init+0x234>)
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001502:	e194      	b.n	800182e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8186 	beq.w	8001828 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x44>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 0201 	and.w	r2, r3, #1
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0203 	and.w	r2, r3, #3
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80e0 	beq.w	8001828 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <HAL_GPIO_Init+0x238>)
 800166a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166e:	4a2e      	ldr	r2, [pc, #184]	@ (8001728 <HAL_GPIO_Init+0x238>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001678:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_GPIO_Init+0x238>)
 800167a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_GPIO_Init+0x23c>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a20      	ldr	r2, [pc, #128]	@ (8001730 <HAL_GPIO_Init+0x240>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d052      	beq.n	8001758 <HAL_GPIO_Init+0x268>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <HAL_GPIO_Init+0x244>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_GPIO_Init+0x22e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_GPIO_Init+0x248>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d02b      	beq.n	800171a <HAL_GPIO_Init+0x22a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_GPIO_Init+0x24c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d025      	beq.n	8001716 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <HAL_GPIO_Init+0x250>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <HAL_GPIO_Init+0x254>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001748 <HAL_GPIO_Init+0x258>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_GPIO_Init+0x25c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <HAL_GPIO_Init+0x260>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_GPIO_Init+0x264>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x20e>
 80016fa:	2309      	movs	r3, #9
 80016fc:	e02d      	b.n	800175a <HAL_GPIO_Init+0x26a>
 80016fe:	230a      	movs	r3, #10
 8001700:	e02b      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001702:	2308      	movs	r3, #8
 8001704:	e029      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001706:	2307      	movs	r3, #7
 8001708:	e027      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800170a:	2306      	movs	r3, #6
 800170c:	e025      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800170e:	2305      	movs	r3, #5
 8001710:	e023      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001712:	2304      	movs	r3, #4
 8001714:	e021      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001716:	2303      	movs	r3, #3
 8001718:	e01f      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800171a:	2302      	movs	r3, #2
 800171c:	e01d      	b.n	800175a <HAL_GPIO_Init+0x26a>
 800171e:	2301      	movs	r3, #1
 8001720:	e01b      	b.n	800175a <HAL_GPIO_Init+0x26a>
 8001722:	bf00      	nop
 8001724:	58000080 	.word	0x58000080
 8001728:	58024400 	.word	0x58024400
 800172c:	58000400 	.word	0x58000400
 8001730:	58020000 	.word	0x58020000
 8001734:	58020400 	.word	0x58020400
 8001738:	58020800 	.word	0x58020800
 800173c:	58020c00 	.word	0x58020c00
 8001740:	58021000 	.word	0x58021000
 8001744:	58021400 	.word	0x58021400
 8001748:	58021800 	.word	0x58021800
 800174c:	58021c00 	.word	0x58021c00
 8001750:	58022000 	.word	0x58022000
 8001754:	58022400 	.word	0x58022400
 8001758:	2300      	movs	r3, #0
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176a:	4938      	ldr	r1, [pc, #224]	@ (800184c <HAL_GPIO_Init+0x35c>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800179e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f ae63 	bne.w	8001504 <HAL_GPIO_Init+0x14>
  }
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	3724      	adds	r7, #36	@ 0x24
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	58000400 	.word	0x58000400

08001850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e001      	b.n	8001872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f8c5 	bl	8000a68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af02      	add	r7, sp, #8
 80018ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0fe      	b.n	8001af6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d106      	bne.n	8001912 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff faff 	bl	8000f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 f94a 	bl	8005bb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7c1a      	ldrb	r2, [r3, #16]
 800192c:	f88d 2000 	strb.w	r2, [sp]
 8001930:	3304      	adds	r3, #4
 8001932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001934:	f004 f8ce 	bl	8005ad4 <USB_CoreInit>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0d5      	b.n	8001af6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f004 f942 	bl	8005bda <USB_SetCurrentMode>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0c6      	b.n	8001af6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e04a      	b.n	8001a04 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	3315      	adds	r3, #21
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3314      	adds	r3, #20
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	b298      	uxth	r0, r3
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	332e      	adds	r3, #46	@ 0x2e
 80019aa:	4602      	mov	r2, r0
 80019ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3318      	adds	r3, #24
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	331c      	adds	r3, #28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3320      	adds	r3, #32
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	3324      	adds	r3, #36	@ 0x24
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	3301      	adds	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	791b      	ldrb	r3, [r3, #4]
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3af      	bcc.n	800196e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	e044      	b.n	8001a9e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d3b5      	bcc.n	8001a14 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7c1a      	ldrb	r2, [r3, #16]
 8001ab0:	f88d 2000 	strb.w	r2, [sp]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	f004 f8dc 	bl	8005c74 <USB_DevInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e013      	b.n	8001af6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b1b      	ldrb	r3, [r3, #12]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f80b 	bl	8001b00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 fa97 	bl	8006022 <USB_DevDisconnect>

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_PCDEx_ActivateLPM+0x44>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	10000003 	.word	0x10000003

08001b48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00a      	beq.n	8001b72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01f      	b.n	8001bae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e01d      	b.n	8001bae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	490f      	ldr	r1, [pc, #60]	@ (8001bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b82:	f7ff faf1 	bl	8001168 <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b88:	e009      	b.n	8001b9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b8a:	f7ff faed 	bl	8001168 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b98:	d901      	bls.n	8001b9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e007      	b.n	8001bae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001baa:	d1ee      	bne.n	8001b8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	58024800 	.word	0x58024800

08001bbc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	58024800 	.word	0x58024800

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	@ 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 bc48 	b.w	8002480 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8088 	beq.w	8001d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b99      	ldr	r3, [pc, #612]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c08:	4b96      	ldr	r3, [pc, #600]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	d007      	beq.n	8001c24 <HAL_RCC_OscConfig+0x48>
 8001c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d111      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06d      	beq.n	8001d0c <HAL_RCC_OscConfig+0x130>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d169      	bne.n	8001d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f000 bc21 	b.w	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x7a>
 8001c48:	4b86      	ldr	r3, [pc, #536]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a85      	ldr	r2, [pc, #532]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x9c>
 8001c5e:	4b81      	ldr	r3, [pc, #516]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a80      	ldr	r2, [pc, #512]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001c82:	4b78      	ldr	r3, [pc, #480]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a77      	ldr	r2, [pc, #476]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a74      	ldr	r2, [pc, #464]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c9c:	4b71      	ldr	r3, [pc, #452]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a70      	ldr	r2, [pc, #448]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b6e      	ldr	r3, [pc, #440]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6d      	ldr	r2, [pc, #436]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fa54 	bl	8001168 <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fa50 	bl	8001168 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e3d4      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fa40 	bl	8001168 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fa3c 	bl	8001168 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e3c0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cfe:	4b59      	ldr	r3, [pc, #356]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x110>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80ca 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1c:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d26:	4b4f      	ldr	r3, [pc, #316]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_RCC_OscConfig+0x166>
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b18      	cmp	r3, #24
 8001d36:	d156      	bne.n	8001de6 <HAL_RCC_OscConfig+0x20a>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d151      	bne.n	8001de6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d42:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e392      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d5a:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0219 	bic.w	r2, r3, #25
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	493f      	ldr	r1, [pc, #252]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f9fc 	bl	8001168 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff f9f8 	bl	8001168 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e37c      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	f7ff fa19 	bl	80011c8 <HAL_GetREVID>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d817      	bhi.n	8001dd0 <HAL_RCC_OscConfig+0x1f4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b40      	cmp	r3, #64	@ 0x40
 8001da6:	d108      	bne.n	8001dba <HAL_RCC_OscConfig+0x1de>
 8001da8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001db0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db8:	e07a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	031b      	lsls	r3, r3, #12
 8001dc8:	4926      	ldr	r1, [pc, #152]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dce:	e06f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	4921      	ldr	r1, [pc, #132]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de4:	e064      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d047      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0219 	bic.w	r2, r3, #25
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	491a      	ldr	r1, [pc, #104]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f9b2 	bl	8001168 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff f9ae 	bl	8001168 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e332      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	f7ff f9cf 	bl	80011c8 <HAL_GetREVID>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d819      	bhi.n	8001e68 <HAL_RCC_OscConfig+0x28c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d108      	bne.n	8001e4e <HAL_RCC_OscConfig+0x272>
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4a:	6053      	str	r3, [r2, #4]
 8001e4c:	e030      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	031b      	lsls	r3, r3, #12
 8001e5c:	4901      	ldr	r1, [pc, #4]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e025      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001e64:	58024400 	.word	0x58024400
 8001e68:	4b9a      	ldr	r3, [pc, #616]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4997      	ldr	r1, [pc, #604]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b95      	ldr	r3, [pc, #596]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a94      	ldr	r2, [pc, #592]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f96d 	bl	8001168 <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff f969 	bl	8001168 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e2ed      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea4:	4b8b      	ldr	r3, [pc, #556]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a9 	beq.w	8002010 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b85      	ldr	r3, [pc, #532]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ec8:	4b82      	ldr	r3, [pc, #520]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d007      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x308>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	d13a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x374>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d135      	bne.n	8001f50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x320>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2c1      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001efc:	f7ff f964 	bl	80011c8 <HAL_GetREVID>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d817      	bhi.n	8001f3a <HAL_RCC_OscConfig+0x35e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x348>
 8001f12:	4b70      	ldr	r3, [pc, #448]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f22:	e075      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	069b      	lsls	r3, r3, #26
 8001f32:	4968      	ldr	r1, [pc, #416]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f38:	e06a      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3a:	4b66      	ldr	r3, [pc, #408]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	4962      	ldr	r1, [pc, #392]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f4e:	e05f      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d042      	beq.n	8001fde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f58:	4b5e      	ldr	r3, [pc, #376]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f900 	bl	8001168 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f8fc 	bl	8001168 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e280      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f7e:	4b55      	ldr	r3, [pc, #340]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f8a:	f7ff f91d 	bl	80011c8 <HAL_GetREVID>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d817      	bhi.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d108      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3d6>
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fae:	6053      	str	r3, [r2, #4]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
 8001fb2:	4b48      	ldr	r3, [pc, #288]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	4944      	ldr	r1, [pc, #272]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
 8001fc6:	e023      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
 8001fc8:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	493f      	ldr	r1, [pc, #252]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fde:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff f8bd 	bl	8001168 <HAL_GetTick>
 8001fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f8b9 	bl	8001168 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e23d      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d036      	beq.n	800208a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d019      	beq.n	8002058 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002028:	4a2a      	ldr	r2, [pc, #168]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f89a 	bl	8001168 <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff f896 	bl	8001168 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e21a      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204a:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x45c>
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff f880 	bl	8001168 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff f87c 	bl	8001168 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e200      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d039      	beq.n	800210a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f85d 	bl	8001168 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b2:	f7ff f859 	bl	8001168 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1dd      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4d6>
 80020d0:	e01b      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 80020d2:	bf00      	nop
 80020d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a9a      	ldr	r2, [pc, #616]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80020de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020e4:	f7ff f840 	bl	8001168 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ec:	f7ff f83c 	bl	8001168 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1c0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fe:	4b92      	ldr	r3, [pc, #584]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8081 	beq.w	800221a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002118:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <HAL_RCC_OscConfig+0x770>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a8b      	ldr	r2, [pc, #556]	@ (800234c <HAL_RCC_OscConfig+0x770>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002124:	f7ff f820 	bl	8001168 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7ff f81c 	bl	8001168 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1a0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213e:	4b83      	ldr	r3, [pc, #524]	@ (800234c <HAL_RCC_OscConfig+0x770>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x584>
 8002152:	4b7d      	ldr	r3, [pc, #500]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	4a7c      	ldr	r2, [pc, #496]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	@ 0x70
 800215e:	e02d      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x5a6>
 8002168:	4b77      	ldr	r3, [pc, #476]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a76      	ldr	r2, [pc, #472]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a73      	ldr	r2, [pc, #460]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5c8>
 800218a:	4b6f      	ldr	r3, [pc, #444]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a6e      	ldr	r2, [pc, #440]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	4b6c      	ldr	r3, [pc, #432]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	4a6b      	ldr	r2, [pc, #428]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 80021a4:	4b68      	ldr	r3, [pc, #416]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a67      	ldr	r2, [pc, #412]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b0:	4b65      	ldr	r3, [pc, #404]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a64      	ldr	r2, [pc, #400]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe ffd0 	bl	8001168 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe ffcc 	bl	8001168 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e14e      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e2:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x5f0>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe ffba 	bl	8001168 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe ffb6 	bl	8001168 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e138      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 812d 	beq.w	800247e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800222c:	2b18      	cmp	r3, #24
 800222e:	f000 80bd 	beq.w	80023ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 809e 	bne.w	8002378 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a41      	ldr	r2, [pc, #260]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe ff8e 	bl	8001168 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe ff8a 	bl	8001168 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e10e      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002262:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226e:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_OscConfig+0x774>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	430a      	orrs	r2, r1
 8002282:	4931      	ldr	r1, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	628b      	str	r3, [r1, #40]	@ 0x28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	3b01      	subs	r3, #1
 800228e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	3b01      	subs	r3, #1
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	b29b      	uxth	r3, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	3b01      	subs	r3, #1
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b0:	3b01      	subs	r3, #1
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80022b8:	4923      	ldr	r1, [pc, #140]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022be:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_RCC_OscConfig+0x778>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	491b      	ldr	r1, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4917      	ldr	r1, [pc, #92]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	f023 0202 	bic.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	4912      	ldr	r1, [pc, #72]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	4a10      	ldr	r2, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe ff13 	bl	8001168 <HAL_GetTick>
 8002342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002344:	e011      	b.n	800236a <HAL_RCC_OscConfig+0x78e>
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400
 800234c:	58024800 	.word	0x58024800
 8002350:	fffffc0c 	.word	0xfffffc0c
 8002354:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe ff06 	bl	8001168 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e08a      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x77c>
 8002376:	e082      	b.n	800247e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a42      	ldr	r2, [pc, #264]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fef0 	bl	8001168 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe feec 	bl	8001168 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e070      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239e:	4b3a      	ldr	r3, [pc, #232]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x7b0>
 80023aa:	e068      	b.n	800247e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023b2:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d031      	beq.n	8002424 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0203 	and.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d12a      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d122      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0a5b      	lsrs	r3, r3, #9
 80023f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	0e1b      	lsrs	r3, r3, #24
 8002416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e02b      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002432:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d01f      	beq.n	800247e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	4a11      	ldr	r2, [pc, #68]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800244a:	f7fe fe8d 	bl	8001168 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002450:	bf00      	nop
 8002452:	f7fe fe89 	bl	8001168 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	4293      	cmp	r3, r2
 800245c:	d0f9      	beq.n	8002452 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_OscConfig+0x8b0>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800246a:	00d2      	lsls	r2, r2, #3
 800246c:	4906      	ldr	r1, [pc, #24]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800246e:	4313      	orrs	r3, r2
 8002470:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002472:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	@ 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024400 	.word	0x58024400
 800248c:	ffff0007 	.word	0xffff0007

08002490 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e19c      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b8a      	ldr	r3, [pc, #552]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b87      	ldr	r3, [pc, #540]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	4985      	ldr	r1, [pc, #532]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b83      	ldr	r3, [pc, #524]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e184      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4b7b      	ldr	r3, [pc, #492]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d908      	bls.n	8002502 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f0:	4b78      	ldr	r3, [pc, #480]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4975      	ldr	r1, [pc, #468]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b70      	ldr	r3, [pc, #448]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800251a:	429a      	cmp	r2, r3
 800251c:	d908      	bls.n	8002530 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800251e:	4b6d      	ldr	r3, [pc, #436]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	496a      	ldr	r1, [pc, #424]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	4b64      	ldr	r3, [pc, #400]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002548:	429a      	cmp	r2, r3
 800254a:	d908      	bls.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800254c:	4b61      	ldr	r3, [pc, #388]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	495e      	ldr	r1, [pc, #376]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800255a:	4313      	orrs	r3, r2
 800255c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002576:	429a      	cmp	r2, r3
 8002578:	d908      	bls.n	800258c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800257a:	4b56      	ldr	r3, [pc, #344]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4953      	ldr	r1, [pc, #332]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002588:	4313      	orrs	r3, r2
 800258a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d908      	bls.n	80025ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f023 020f 	bic.w	r2, r3, #15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4947      	ldr	r1, [pc, #284]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d055      	beq.n	8002672 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025c6:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4940      	ldr	r1, [pc, #256]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e0:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0f6      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d115      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0ea      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002610:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0de      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d6      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f023 0207 	bic.w	r2, r3, #7
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4925      	ldr	r1, [pc, #148]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800263e:	4313      	orrs	r3, r2
 8002640:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002642:	f7fe fd91 	bl	8001168 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e00a      	b.n	8002660 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe fd8d 	bl	8001168 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0be      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	429a      	cmp	r2, r3
 8002670:	d1eb      	bne.n	800264a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	429a      	cmp	r2, r3
 800268c:	d208      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800269c:	4313      	orrs	r3, r2
 800269e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d214      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 020f 	bic.w	r2, r3, #15
 80026b6:	4906      	ldr	r1, [pc, #24]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e086      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
 80026d0:	52002000 	.word	0x52002000
 80026d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d208      	bcs.n	8002706 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026f4:	4b3c      	ldr	r3, [pc, #240]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4939      	ldr	r1, [pc, #228]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002702:	4313      	orrs	r3, r2
 8002704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800271e:	429a      	cmp	r2, r3
 8002720:	d208      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	492e      	ldr	r1, [pc, #184]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002730:	4313      	orrs	r3, r2
 8002732:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	4b28      	ldr	r3, [pc, #160]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800274c:	429a      	cmp	r2, r3
 800274e:	d208      	bcs.n	8002762 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002750:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4922      	ldr	r1, [pc, #136]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 800275e:	4313      	orrs	r3, r2
 8002760:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277a:	429a      	cmp	r2, r3
 800277c:	d208      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4917      	ldr	r1, [pc, #92]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 800278c:	4313      	orrs	r3, r2
 800278e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002790:	f000 f834 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	4912      	ldr	r1, [pc, #72]	@ (80027ec <HAL_RCC_ClockConfig+0x35c>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_RCC_ClockConfig+0x35c>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_RCC_ClockConfig+0x360>)
 80027c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x364>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_RCC_ClockConfig+0x368>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc7e 	bl	80010d4 <HAL_InitTick>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58024400 	.word	0x58024400
 80027ec:	08006a8c 	.word	0x08006a8c
 80027f0:	2400001c 	.word	0x2400001c
 80027f4:	24000018 	.word	0x24000018
 80027f8:	24000020 	.word	0x24000020

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4bb3      	ldr	r3, [pc, #716]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800280a:	2b18      	cmp	r3, #24
 800280c:	f200 8155 	bhi.w	8002aba <HAL_RCC_GetSysClockFreq+0x2be>
 8002810:	a201      	add	r2, pc, #4	@ (adr r2, 8002818 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800287d 	.word	0x0800287d
 800281c:	08002abb 	.word	0x08002abb
 8002820:	08002abb 	.word	0x08002abb
 8002824:	08002abb 	.word	0x08002abb
 8002828:	08002abb 	.word	0x08002abb
 800282c:	08002abb 	.word	0x08002abb
 8002830:	08002abb 	.word	0x08002abb
 8002834:	08002abb 	.word	0x08002abb
 8002838:	080028a3 	.word	0x080028a3
 800283c:	08002abb 	.word	0x08002abb
 8002840:	08002abb 	.word	0x08002abb
 8002844:	08002abb 	.word	0x08002abb
 8002848:	08002abb 	.word	0x08002abb
 800284c:	08002abb 	.word	0x08002abb
 8002850:	08002abb 	.word	0x08002abb
 8002854:	08002abb 	.word	0x08002abb
 8002858:	080028a9 	.word	0x080028a9
 800285c:	08002abb 	.word	0x08002abb
 8002860:	08002abb 	.word	0x08002abb
 8002864:	08002abb 	.word	0x08002abb
 8002868:	08002abb 	.word	0x08002abb
 800286c:	08002abb 	.word	0x08002abb
 8002870:	08002abb 	.word	0x08002abb
 8002874:	08002abb 	.word	0x08002abb
 8002878:	080028af 	.word	0x080028af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800287c:	4b94      	ldr	r3, [pc, #592]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002888:	4b91      	ldr	r3, [pc, #580]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	4a90      	ldr	r2, [pc, #576]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800289a:	e111      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800289c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800289e:	61bb      	str	r3, [r7, #24]
      break;
 80028a0:	e10e      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028a2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a4:	61bb      	str	r3, [r7, #24]
      break;
 80028a6:	e10b      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028a8:	4b8c      	ldr	r3, [pc, #560]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028aa:	61bb      	str	r3, [r7, #24]
      break;
 80028ac:	e108      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028b8:	4b85      	ldr	r3, [pc, #532]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028c4:	4b82      	ldr	r3, [pc, #520]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028ce:	4b80      	ldr	r3, [pc, #512]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80e1 	beq.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f000 8083 	beq.w	8002a00 <HAL_RCC_GetSysClockFreq+0x204>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f200 80a1 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x248>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x114>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d056      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800290e:	e099      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002910:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02d      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800291c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	4a6b      	ldr	r2, [pc, #428]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b62      	ldr	r3, [pc, #392]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002956:	ed97 6a02 	vldr	s12, [r7, #8]
 800295a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002976:	e087      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ae4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298a:	4b51      	ldr	r3, [pc, #324]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299a:	ed97 6a02 	vldr	s12, [r7, #8]
 800299e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ba:	e065      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ce:	4b40      	ldr	r3, [pc, #256]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	ed97 6a02 	vldr	s12, [r7, #8]
 80029e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029fe:	e043      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002aec <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a42:	e021      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	0a5b      	lsrs	r3, r3, #9
 8002a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a92:	3301      	adds	r3, #1
 8002a94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aac:	ee17 3a90 	vmov	r3, s15
 8002ab0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002abc:	61bb      	str	r3, [r7, #24]
      break;
 8002abe:	bf00      	nop
  }

  return sysclockfreq;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	03d09000 	.word	0x03d09000
 8002ad8:	003d0900 	.word	0x003d0900
 8002adc:	017d7840 	.word	0x017d7840
 8002ae0:	46000000 	.word	0x46000000
 8002ae4:	4c742400 	.word	0x4c742400
 8002ae8:	4a742400 	.word	0x4a742400
 8002aec:	4bbebc20 	.word	0x4bbebc20

08002af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002af6:	f7ff fe81 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_RCC_GetHCLKFreq+0x50>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490f      	ldr	r1, [pc, #60]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b2e:	4a07      	ldr	r2, [pc, #28]	@ (8002b4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	58024400 	.word	0x58024400
 8002b44:	08006a8c 	.word	0x08006a8c
 8002b48:	2400001c 	.word	0x2400001c
 8002b4c:	24000018 	.word	0x24000018

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b54:	f7ff ffcc 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4904      	ldr	r1, [pc, #16]	@ (8002b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	58024400 	.word	0x58024400
 8002b78:	08006a8c 	.word	0x08006a8c

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b80:	f7ff ffb6 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4904      	ldr	r1, [pc, #16]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	08006a8c 	.word	0x08006a8c

08002ba8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b0ca      	sub	sp, #296	@ 0x128
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002bcc:	2500      	movs	r5, #0
 8002bce:	ea54 0305 	orrs.w	r3, r4, r5
 8002bd2:	d049      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bde:	d02f      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002be0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002be4:	d828      	bhi.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bea:	d01a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bf0:	d822      	bhi.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bfa:	d007      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfe:	4bb8      	ldr	r3, [pc, #736]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	4ab7      	ldr	r2, [pc, #732]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c0a:	e01a      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c10:	3308      	adds	r3, #8
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fc8f 	bl	8004538 <RCCEx_PLL2_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c20:	e00f      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c26:	3328      	adds	r3, #40	@ 0x28
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fd36 	bl	800469c <RCCEx_PLL3_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c4a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c58:	4aa1      	ldr	r2, [pc, #644]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c5e:	e003      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c74:	f04f 0900 	mov.w	r9, #0
 8002c78:	ea58 0309 	orrs.w	r3, r8, r9
 8002c7c:	d047      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d82a      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c88:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002ca5 	.word	0x08002ca5
 8002c94:	08002cb3 	.word	0x08002cb3
 8002c98:	08002cc9 	.word	0x08002cc9
 8002c9c:	08002ce7 	.word	0x08002ce7
 8002ca0:	08002ce7 	.word	0x08002ce7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	4a8d      	ldr	r2, [pc, #564]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cb0:	e01a      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fc3c 	bl	8004538 <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ccc:	3328      	adds	r3, #40	@ 0x28
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fce3 	bl	800469c <RCCEx_PLL3_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf4:	f023 0107 	bic.w	r1, r3, #7
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	4a78      	ldr	r2, [pc, #480]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002d1a:	f04f 0b00 	mov.w	fp, #0
 8002d1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d22:	d04c      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2e:	d030      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d34:	d829      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d38:	d02d      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d3c:	d825      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d3e:	2b80      	cmp	r3, #128	@ 0x80
 8002d40:	d018      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d821      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d007      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4b63      	ldr	r3, [pc, #396]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	4a62      	ldr	r2, [pc, #392]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d62:	3308      	adds	r3, #8
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fbe6 	bl	8004538 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d72:	e011      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	3328      	adds	r3, #40	@ 0x28
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fc8d 	bl	800469c <RCCEx_PLL3_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d88:	e006      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d90:	e002      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002da0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dae:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002db4:	e003      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002dca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002dd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	d053      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002de6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dea:	d035      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002dec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002df0:	d82e      	bhi.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002df2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002df6:	d031      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002df8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002dfc:	d828      	bhi.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e02:	d01a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e08:	d822      	bhi.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e12:	d007      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e14:	e01c      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e16:	4b32      	ldr	r3, [pc, #200]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	4a31      	ldr	r2, [pc, #196]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e22:	e01c      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e28:	3308      	adds	r3, #8
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fb83 	bl	8004538 <RCCEx_PLL2_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e38:	e011      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3e:	3328      	adds	r3, #40	@ 0x28
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fc2a 	bl	800469c <RCCEx_PLL3_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e4e:	e006      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e7c:	e003      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	d056      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002eae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eb2:	d038      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eb8:	d831      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ebe:	d034      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ec0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ec4:	d82b      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eca:	d01d      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ed0:	d825      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002edc:	e01f      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ede:	bf00      	nop
 8002ee0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4ba2      	ldr	r3, [pc, #648]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	4aa1      	ldr	r2, [pc, #644]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ef0:	e01c      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fb1c 	bl	8004538 <RCCEx_PLL2_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f06:	e011      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	3328      	adds	r3, #40	@ 0x28
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 fbc3 	bl	800469c <RCCEx_PLL3_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f1c:	e006      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f24:	e002      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f34:	4b8e      	ldr	r3, [pc, #568]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f44:	4a8a      	ldr	r2, [pc, #552]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f46:	430b      	orrs	r3, r1
 8002f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	d03a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	2b30      	cmp	r3, #48	@ 0x30
 8002f7c:	d01f      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f7e:	2b30      	cmp	r3, #48	@ 0x30
 8002f80:	d819      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d00c      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d815      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d019      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d111      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f92:	4b77      	ldr	r3, [pc, #476]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	4a76      	ldr	r2, [pc, #472]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f9e:	e011      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fac5 	bl	8004538 <RCCEx_PLL2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002fb4:	e006      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fcc:	4b68      	ldr	r3, [pc, #416]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fda:	4a65      	ldr	r2, [pc, #404]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fe0:	e003      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ff6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003000:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003004:	460b      	mov	r3, r1
 8003006:	4313      	orrs	r3, r2
 8003008:	d051      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003014:	d035      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800301a:	d82e      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800301c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003020:	d031      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003026:	d828      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302c:	d01a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800302e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003032:	d822      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303c:	d007      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800303e:	e01c      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003040:	4b4b      	ldr	r3, [pc, #300]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	4a4a      	ldr	r2, [pc, #296]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800304a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800304c:	e01c      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800304e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003052:	3308      	adds	r3, #8
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f001 fa6e 	bl	8004538 <RCCEx_PLL2_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003062:	e011      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003068:	3328      	adds	r3, #40	@ 0x28
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f001 fb15 	bl	800469c <RCCEx_PLL3_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003090:	4b37      	ldr	r3, [pc, #220]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003094:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309e:	4a34      	ldr	r2, [pc, #208]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80030ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80030c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80030c8:	460b      	mov	r3, r1
 80030ca:	4313      	orrs	r3, r2
 80030cc:	d056      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d8:	d033      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80030da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030de:	d82c      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030e4:	d02f      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80030e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030ea:	d826      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030f0:	d02b      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030f6:	d820      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030fc:	d012      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003102:	d81a      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d022      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310c:	d115      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	3308      	adds	r3, #8
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fa0e 	bl	8004538 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003122:	e015      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	3328      	adds	r3, #40	@ 0x28
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fab5 	bl	800469c <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003138:	e00a      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003140:	e006      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800314e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003166:	4a02      	ldr	r2, [pc, #8]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003168:	430b      	orrs	r3, r1
 800316a:	6513      	str	r3, [r2, #80]	@ 0x50
 800316c:	e006      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003192:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d055      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031a8:	d033      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80031aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ae:	d82c      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b4:	d02f      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ba:	d826      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c0:	d02b      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80031c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c6:	d820      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031cc:	d012      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d2:	d81a      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d022      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80031d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031dc:	d115      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e2:	3308      	adds	r3, #8
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 f9a6 	bl	8004538 <RCCEx_PLL2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031f2:	e015      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f8:	3328      	adds	r3, #40	@ 0x28
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fa4d 	bl	800469c <RCCEx_PLL3_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003208:	e00a      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003212:	bf00      	nop
 8003214:	e004      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800321e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003228:	4ba3      	ldr	r3, [pc, #652]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003238:	4a9f      	ldr	r2, [pc, #636]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323a:	430b      	orrs	r3, r1
 800323c:	6593      	str	r3, [r2, #88]	@ 0x58
 800323e:	e003      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800325e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003262:	460b      	mov	r3, r1
 8003264:	4313      	orrs	r3, r2
 8003266:	d037      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003272:	d00e      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003278:	d816      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800327e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003282:	d111      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003284:	4b8c      	ldr	r3, [pc, #560]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	4a8b      	ldr	r2, [pc, #556]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003290:	e00f      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003296:	3308      	adds	r3, #8
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f94c 	bl	8004538 <RCCEx_PLL2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032a6:	e004      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80032b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032ba:	4b7f      	ldr	r3, [pc, #508]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c8:	4a7b      	ldr	r2, [pc, #492]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80032e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	d039      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d81c      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003302:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003345 	.word	0x08003345
 800330c:	08003319 	.word	0x08003319
 8003310:	08003327 	.word	0x08003327
 8003314:	08003345 	.word	0x08003345
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003318:	4b67      	ldr	r3, [pc, #412]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	4a66      	ldr	r2, [pc, #408]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003324:	e00f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332a:	3308      	adds	r3, #8
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f001 f902 	bl	8004538 <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800334e:	4b5a      	ldr	r3, [pc, #360]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	f023 0103 	bic.w	r1, r3, #3
 8003356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	4a56      	ldr	r2, [pc, #344]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335e:	430b      	orrs	r3, r1
 8003360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003362:	e003      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003382:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003386:	460b      	mov	r3, r1
 8003388:	4313      	orrs	r3, r2
 800338a:	f000 809f 	beq.w	80034cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338e:	4b4b      	ldr	r3, [pc, #300]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4a      	ldr	r2, [pc, #296]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339a:	f7fd fee5 	bl	8001168 <HAL_GetTick>
 800339e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033a2:	e00b      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fd fee0 	bl	8001168 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b64      	cmp	r3, #100	@ 0x64
 80033b2:	d903      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033ba:	e005      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033bc:	4b3f      	ldr	r3, [pc, #252]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ed      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80033c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d179      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033d0:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033dc:	4053      	eors	r3, r2
 80033de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d015      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003408:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800340a:	4a2b      	ldr	r2, [pc, #172]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800340c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003410:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003416:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800341a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341e:	d118      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd fea2 	bl	8001168 <HAL_GetTick>
 8003424:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003428:	e00d      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd fe9d 	bl	8001168 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	f241 3388 	movw	r3, #5000	@ 0x1388
 800343a:	429a      	cmp	r2, r3
 800343c:	d903      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003444:	e005      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003446:	4b1c      	ldr	r3, [pc, #112]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0eb      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003456:	2b00      	cmp	r3, #0
 8003458:	d129      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800346a:	d10e      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800346c:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800347c:	091a      	lsrs	r2, r3, #4
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003480:	4013      	ands	r3, r2
 8003482:	4a0d      	ldr	r2, [pc, #52]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6113      	str	r3, [r2, #16]
 8003488:	e005      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800348a:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003490:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003494:	6113      	str	r3, [r2, #16]
 8003496:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003498:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ac:	e00e      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80034b6:	e009      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58024800 	.word	0x58024800
 80034c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f002 0301 	and.w	r3, r2, #1
 80034d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f000 8089 	beq.w	8003600 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f4:	2b28      	cmp	r3, #40	@ 0x28
 80034f6:	d86b      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80034f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	080035d9 	.word	0x080035d9
 8003504:	080035d1 	.word	0x080035d1
 8003508:	080035d1 	.word	0x080035d1
 800350c:	080035d1 	.word	0x080035d1
 8003510:	080035d1 	.word	0x080035d1
 8003514:	080035d1 	.word	0x080035d1
 8003518:	080035d1 	.word	0x080035d1
 800351c:	080035d1 	.word	0x080035d1
 8003520:	080035a5 	.word	0x080035a5
 8003524:	080035d1 	.word	0x080035d1
 8003528:	080035d1 	.word	0x080035d1
 800352c:	080035d1 	.word	0x080035d1
 8003530:	080035d1 	.word	0x080035d1
 8003534:	080035d1 	.word	0x080035d1
 8003538:	080035d1 	.word	0x080035d1
 800353c:	080035d1 	.word	0x080035d1
 8003540:	080035bb 	.word	0x080035bb
 8003544:	080035d1 	.word	0x080035d1
 8003548:	080035d1 	.word	0x080035d1
 800354c:	080035d1 	.word	0x080035d1
 8003550:	080035d1 	.word	0x080035d1
 8003554:	080035d1 	.word	0x080035d1
 8003558:	080035d1 	.word	0x080035d1
 800355c:	080035d1 	.word	0x080035d1
 8003560:	080035d9 	.word	0x080035d9
 8003564:	080035d1 	.word	0x080035d1
 8003568:	080035d1 	.word	0x080035d1
 800356c:	080035d1 	.word	0x080035d1
 8003570:	080035d1 	.word	0x080035d1
 8003574:	080035d1 	.word	0x080035d1
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035d1 	.word	0x080035d1
 8003580:	080035d9 	.word	0x080035d9
 8003584:	080035d1 	.word	0x080035d1
 8003588:	080035d1 	.word	0x080035d1
 800358c:	080035d1 	.word	0x080035d1
 8003590:	080035d1 	.word	0x080035d1
 8003594:	080035d1 	.word	0x080035d1
 8003598:	080035d1 	.word	0x080035d1
 800359c:	080035d1 	.word	0x080035d1
 80035a0:	080035d9 	.word	0x080035d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	3308      	adds	r3, #8
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 ffc3 	bl	8004538 <RCCEx_PLL2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035b8:	e00f      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	3328      	adds	r3, #40	@ 0x28
 80035c0:	2101      	movs	r1, #1
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f86a 	bl	800469c <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80035d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035e2:	4bbf      	ldr	r3, [pc, #764]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035f0:	4abb      	ldr	r2, [pc, #748]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80035f6:	e003      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f002 0302 	and.w	r3, r2, #2
 800360c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003616:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800361a:	460b      	mov	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	d041      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003626:	2b05      	cmp	r3, #5
 8003628:	d824      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800362a:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	0800367d 	.word	0x0800367d
 8003634:	08003649 	.word	0x08003649
 8003638:	0800365f 	.word	0x0800365f
 800363c:	0800367d 	.word	0x0800367d
 8003640:	0800367d 	.word	0x0800367d
 8003644:	0800367d 	.word	0x0800367d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	3308      	adds	r3, #8
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 ff71 	bl	8004538 <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800365c:	e00f      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	3328      	adds	r3, #40	@ 0x28
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f001 f818 	bl	800469c <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003672:	e004      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800367c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003686:	4b96      	ldr	r3, [pc, #600]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	f023 0107 	bic.w	r1, r3, #7
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003694:	4a92      	ldr	r2, [pc, #584]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6553      	str	r3, [r2, #84]	@ 0x54
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 0304 	and.w	r3, r2, #4
 80036b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d044      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d825      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80036d0:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	08003725 	.word	0x08003725
 80036dc:	080036f1 	.word	0x080036f1
 80036e0:	08003707 	.word	0x08003707
 80036e4:	08003725 	.word	0x08003725
 80036e8:	08003725 	.word	0x08003725
 80036ec:	08003725 	.word	0x08003725
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	3308      	adds	r3, #8
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 ff1d 	bl	8004538 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003704:	e00f      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	3328      	adds	r3, #40	@ 0x28
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f000 ffc4 	bl	800469c <RCCEx_PLL3_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800371a:	e004      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372e:	4b6c      	ldr	r3, [pc, #432]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	f023 0107 	bic.w	r1, r3, #7
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373e:	4a68      	ldr	r2, [pc, #416]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003740:	430b      	orrs	r3, r1
 8003742:	6593      	str	r3, [r2, #88]	@ 0x58
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f002 0320 	and.w	r3, r2, #32
 800375a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d055      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377a:	d033      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800377c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003780:	d82c      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003786:	d02f      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378c:	d826      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800378e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003792:	d02b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003798:	d820      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800379a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800379e:	d012      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80037a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037a4:	d81a      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d022      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80037aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ae:	d115      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3308      	adds	r3, #8
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 febd 	bl	8004538 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037c4:	e015      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	3328      	adds	r3, #40	@ 0x28
 80037cc:	2102      	movs	r1, #2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 ff64 	bl	800469c <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037da:	e00a      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e2:	e006      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037e4:	bf00      	nop
 80037e6:	e004      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037fa:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	4a35      	ldr	r2, [pc, #212]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800380c:	430b      	orrs	r3, r1
 800380e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003830:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d058      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003842:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003846:	d033      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003848:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800384c:	d82c      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003852:	d02f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003858:	d826      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800385a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003860:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003864:	d820      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386a:	d012      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800386c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003870:	d81a      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387a:	d115      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003880:	3308      	adds	r3, #8
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fe57 	bl	8004538 <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003890:	e015      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	3328      	adds	r3, #40	@ 0x28
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fefe 	bl	800469c <RCCEx_PLL3_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038a6:	e00a      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ae:	e006      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038b0:	bf00      	nop
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038b4:	bf00      	nop
 80038b6:	e002      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80038bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10e      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038d6:	4a02      	ldr	r2, [pc, #8]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6593      	str	r3, [r2, #88]	@ 0x58
 80038dc:	e006      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80038de:	bf00      	nop
 80038e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003902:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d055      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003914:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003918:	d033      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800391a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800391e:	d82c      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003924:	d02f      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392a:	d826      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800392c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003930:	d02b      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003932:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003936:	d820      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393c:	d012      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800393e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003942:	d81a      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d022      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394c:	d115      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	3308      	adds	r3, #8
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdee 	bl	8004538 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003962:	e015      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	3328      	adds	r3, #40	@ 0x28
 800396a:	2102      	movs	r1, #2
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fe95 	bl	800469c <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003978:	e00a      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003982:	bf00      	nop
 8003984:	e004      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003986:	bf00      	nop
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003998:	4ba1      	ldr	r3, [pc, #644]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039a8:	4a9d      	ldr	r2, [pc, #628]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039aa:	430b      	orrs	r3, r1
 80039ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f002 0308 	and.w	r3, r2, #8
 80039c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d01e      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	3328      	adds	r3, #40	@ 0x28
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fe54 	bl	800469c <RCCEx_PLL3_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a00:	4b87      	ldr	r3, [pc, #540]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a10:	4a83      	ldr	r2, [pc, #524]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 0310 	and.w	r3, r2, #16
 8003a22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d01e      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	3328      	adds	r3, #40	@ 0x28
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fe25 	bl	800469c <RCCEx_PLL3_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a5e:	4b70      	ldr	r3, [pc, #448]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6e:	4a6c      	ldr	r2, [pc, #432]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d03e      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa0:	d022      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa6:	d81b      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab0:	d00b      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003ab2:	e015      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	3308      	adds	r3, #8
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fd3b 	bl	8004538 <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ac8:	e00f      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	3328      	adds	r3, #40	@ 0x28
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fde2 	bl	800469c <RCCEx_PLL3_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ade:	e004      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae6:	e000      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003af2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b02:	4a47      	ldr	r2, [pc, #284]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b20:	2300      	movs	r3, #0
 8003b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d03b      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b3a:	d01f      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b40:	d818      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b46:	d003      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4c:	d007      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b4e:	e011      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	4a32      	ldr	r2, [pc, #200]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	3328      	adds	r3, #40	@ 0x28
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fd98 	bl	800469c <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b72:	e004      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b86:	4b26      	ldr	r3, [pc, #152]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	d034      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003bd2:	e011      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	4a11      	ldr	r2, [pc, #68]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003be0:	e00e      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3308      	adds	r3, #8
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fca4 	bl	8004538 <RCCEx_PLL2_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10d      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c16:	4a02      	ldr	r2, [pc, #8]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c1e:	bf00      	nop
 8003c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	3328      	adds	r3, #40	@ 0x28
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fd23 	bl	800469c <RCCEx_PLL3_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c70:	2300      	movs	r3, #0
 8003c72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	d038      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8a:	d018      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c90:	d811      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c96:	d014      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c9c:	d80b      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d011      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca8:	4bc3      	ldr	r3, [pc, #780]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	4ac2      	ldr	r2, [pc, #776]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cd0:	4bb9      	ldr	r3, [pc, #740]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce0:	4ab5      	ldr	r2, [pc, #724]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cfe:	2300      	movs	r3, #0
 8003d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d0c:	4baa      	ldr	r3, [pc, #680]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1a:	4aa7      	ldr	r2, [pc, #668]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2e:	2300      	movs	r3, #0
 8003d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d3c:	4b9e      	ldr	r3, [pc, #632]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d4c:	4a9a      	ldr	r2, [pc, #616]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d60:	2300      	movs	r3, #0
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d6e:	4b92      	ldr	r3, [pc, #584]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d90:	2300      	movs	r3, #0
 8003d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d9e:	4b86      	ldr	r3, [pc, #536]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	4a85      	ldr	r2, [pc, #532]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003da4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003da8:	6113      	str	r3, [r2, #16]
 8003daa:	4b83      	ldr	r3, [pc, #524]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dac:	6919      	ldr	r1, [r3, #16]
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003db6:	4a80      	ldr	r2, [pc, #512]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dca:	2300      	movs	r3, #0
 8003dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dd8:	4b77      	ldr	r3, [pc, #476]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ddc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	4a74      	ldr	r2, [pc, #464]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de8:	430b      	orrs	r3, r1
 8003dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e08:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e18:	4a67      	ldr	r2, [pc, #412]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	2100      	movs	r1, #0
 8003e28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d011      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	3308      	adds	r3, #8
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fb78 	bl	8004538 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	2100      	movs	r1, #0
 8003e68:	6239      	str	r1, [r7, #32]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d011      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fb58 	bl	8004538 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	61b9      	str	r1, [r7, #24]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	d011      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fb38 	bl	8004538 <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6139      	str	r1, [r7, #16]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d011      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	3328      	adds	r3, #40	@ 0x28
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fbca 	bl	800469c <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	2100      	movs	r1, #0
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f34:	460b      	mov	r3, r1
 8003f36:	4313      	orrs	r3, r2
 8003f38:	d011      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	3328      	adds	r3, #40	@ 0x28
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fbaa 	bl	800469c <RCCEx_PLL3_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	2100      	movs	r1, #0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d011      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7e:	3328      	adds	r3, #40	@ 0x28
 8003f80:	2102      	movs	r1, #2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fb8a 	bl	800469c <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003f9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb8:	58024400 	.word	0x58024400

08003fbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fc0:	f7fe fd96 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4904      	ldr	r1, [pc, #16]	@ (8003fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	08006a8c 	.word	0x08006a8c

08003fe8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	@ 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	0b1b      	lsrs	r3, r3, #12
 8004000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004004:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004006:	4b9c      	ldr	r3, [pc, #624]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004012:	4b99      	ldr	r3, [pc, #612]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8111 	beq.w	8004258 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f000 8083 	beq.w	8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b02      	cmp	r3, #2
 8004042:	f200 80a1 	bhi.w	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d056      	beq.n	8004100 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004052:	e099      	b.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004054:	4b88      	ldr	r3, [pc, #544]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02d      	beq.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004060:	4b85      	ldr	r3, [pc, #532]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	4a84      	ldr	r2, [pc, #528]	@ (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b7b      	ldr	r3, [pc, #492]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a03 	vldr	s12, [r7, #12]
 800409e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040ba:	e087      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fe:	e065      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b59      	ldr	r3, [pc, #356]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a03 	vldr	s12, [r7, #12]
 8004126:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004142:	e043      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b48      	ldr	r3, [pc, #288]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a03 	vldr	s12, [r7, #12]
 800416a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004186:	e021      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b37      	ldr	r3, [pc, #220]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	0a5b      	lsrs	r3, r3, #9
 80041d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f2:	ee17 2a90 	vmov	r2, s15
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004214:	edd7 6a07 	vldr	s13, [r7, #28]
 8004218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004220:	ee17 2a90 	vmov	r2, s15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004228:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800423e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004242:	edd7 6a07 	vldr	s13, [r7, #28]
 8004246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 2a90 	vmov	r2, s15
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004256:	e008      	b.n	800426a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
}
 800426a:	bf00      	nop
 800426c:	3724      	adds	r7, #36	@ 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	03d09000 	.word	0x03d09000
 8004280:	46000000 	.word	0x46000000
 8004284:	4c742400 	.word	0x4c742400
 8004288:	4a742400 	.word	0x4a742400
 800428c:	4bbebc20 	.word	0x4bbebc20

08004290 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004298:	4ba1      	ldr	r3, [pc, #644]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042a2:	4b9f      	ldr	r3, [pc, #636]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	0d1b      	lsrs	r3, r3, #20
 80042a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80042ba:	4b99      	ldr	r3, [pc, #612]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8111 	beq.w	8004500 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	f000 8083 	beq.w	80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f200 80a1 	bhi.w	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d056      	beq.n	80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042fa:	e099      	b.n	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042fc:	4b88      	ldr	r3, [pc, #544]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02d      	beq.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004308:	4b85      	ldr	r3, [pc, #532]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	4a84      	ldr	r2, [pc, #528]	@ (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	4b7b      	ldr	r3, [pc, #492]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004342:	ed97 6a03 	vldr	s12, [r7, #12]
 8004346:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800434a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004362:	e087      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	4b6a      	ldr	r3, [pc, #424]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	ed97 6a03 	vldr	s12, [r7, #12]
 800438a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800438e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043a6:	e065      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b59      	ldr	r3, [pc, #356]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ea:	e043      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b48      	ldr	r3, [pc, #288]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004412:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800442e:	e021      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b37      	ldr	r3, [pc, #220]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004472:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004474:	4b2a      	ldr	r3, [pc, #168]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	0a5b      	lsrs	r3, r3, #9
 800447a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800448a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449a:	ee17 2a90 	vmov	r2, s15
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c8:	ee17 2a90 	vmov	r2, s15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044d0:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	ee17 2a90 	vmov	r2, s15
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
}
 8004512:	bf00      	nop
 8004514:	3724      	adds	r7, #36	@ 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	58024400 	.word	0x58024400
 8004524:	03d09000 	.word	0x03d09000
 8004528:	46000000 	.word	0x46000000
 800452c:	4c742400 	.word	0x4c742400
 8004530:	4a742400 	.word	0x4a742400
 8004534:	4bbebc20 	.word	0x4bbebc20

08004538 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004546:	4b53      	ldr	r3, [pc, #332]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b03      	cmp	r3, #3
 8004550:	d101      	bne.n	8004556 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e099      	b.n	800468a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004556:	4b4f      	ldr	r3, [pc, #316]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4e      	ldr	r2, [pc, #312]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800455c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004562:	f7fc fe01 	bl	8001168 <HAL_GetTick>
 8004566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004568:	e008      	b.n	800457c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800456a:	f7fc fdfd 	bl	8001168 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e086      	b.n	800468a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800457c:	4b45      	ldr	r3, [pc, #276]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004588:	4b42      	ldr	r3, [pc, #264]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	493f      	ldr	r1, [pc, #252]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	628b      	str	r3, [r1, #40]	@ 0x28
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	025b      	lsls	r3, r3, #9
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045cc:	4931      	ldr	r1, [pc, #196]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045d2:	4b30      	ldr	r3, [pc, #192]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	492d      	ldr	r1, [pc, #180]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	f023 0220 	bic.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4928      	ldr	r1, [pc, #160]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045f6:	4b27      	ldr	r3, [pc, #156]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	4a26      	ldr	r2, [pc, #152]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	f023 0310 	bic.w	r3, r3, #16
 8004600:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004602:	4b24      	ldr	r3, [pc, #144]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004606:	4b24      	ldr	r3, [pc, #144]	@ (8004698 <RCCEx_PLL2_Config+0x160>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	69d2      	ldr	r2, [r2, #28]
 800460e:	00d2      	lsls	r2, r2, #3
 8004610:	4920      	ldr	r1, [pc, #128]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004616:	4b1f      	ldr	r3, [pc, #124]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	4a1e      	ldr	r2, [pc, #120]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800461c:	f043 0310 	orr.w	r3, r3, #16
 8004620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004628:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	4a19      	ldr	r2, [pc, #100]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800462e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004634:	e00f      	b.n	8004656 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800463c:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	4a14      	ldr	r2, [pc, #80]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004646:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004648:	e005      	b.n	8004656 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800464a:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4a11      	ldr	r2, [pc, #68]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004654:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004656:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0e      	ldr	r2, [pc, #56]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800465c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004662:	f7fc fd81 	bl	8001168 <HAL_GetTick>
 8004666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004668:	e008      	b.n	800467c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800466a:	f7fc fd7d 	bl	8001168 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e006      	b.n	800468a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800467c:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <RCCEx_PLL2_Config+0x15c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
 8004698:	ffff0007 	.word	0xffff0007

0800469c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046aa:	4b53      	ldr	r3, [pc, #332]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d101      	bne.n	80046ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e099      	b.n	80047ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046ba:	4b4f      	ldr	r3, [pc, #316]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4e      	ldr	r2, [pc, #312]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c6:	f7fc fd4f 	bl	8001168 <HAL_GetTick>
 80046ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ce:	f7fc fd4b 	bl	8001168 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e086      	b.n	80047ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046e0:	4b45      	ldr	r3, [pc, #276]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046ec:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	493f      	ldr	r1, [pc, #252]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	3b01      	subs	r3, #1
 8004706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	3b01      	subs	r3, #1
 8004710:	025b      	lsls	r3, r3, #9
 8004712:	b29b      	uxth	r3, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	3b01      	subs	r3, #1
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004730:	4931      	ldr	r1, [pc, #196]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004736:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	492d      	ldr	r1, [pc, #180]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004748:	4b2b      	ldr	r3, [pc, #172]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4928      	ldr	r1, [pc, #160]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800475a:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	4a26      	ldr	r2, [pc, #152]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004764:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004766:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800476a:	4b24      	ldr	r3, [pc, #144]	@ (80047fc <RCCEx_PLL3_Config+0x160>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	69d2      	ldr	r2, [r2, #28]
 8004772:	00d2      	lsls	r2, r2, #3
 8004774:	4920      	ldr	r1, [pc, #128]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800477a:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800478c:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	4a19      	ldr	r2, [pc, #100]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004792:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004796:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004798:	e00f      	b.n	80047ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d106      	bne.n	80047ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	4a14      	ldr	r2, [pc, #80]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047ac:	e005      	b.n	80047ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047ae:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	4a11      	ldr	r2, [pc, #68]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047ba:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c6:	f7fc fccf 	bl	8001168 <HAL_GetTick>
 80047ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047cc:	e008      	b.n	80047e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ce:	f7fc fccb 	bl	8001168 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e006      	b.n	80047ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	ffff0007 	.word	0xffff0007

08004800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e042      	b.n	8004898 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc fad7 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2224      	movs	r2, #36	@ 0x24
 800482e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fe1e 	bl	800548c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8b3 	bl	80049bc <UART_SetConfig>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e01b      	b.n	8004898 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800486e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800487e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fe9d 	bl	80055d0 <UART_CheckIdleState>
 8004896:	4603      	mov	r3, r0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d17b      	bne.n	80049b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_UART_Transmit+0x26>
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e074      	b.n	80049b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2221      	movs	r2, #33	@ 0x21
 80048d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048da:	f7fc fc45 	bl	8001168 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f8:	d108      	bne.n	800490c <HAL_UART_Transmit+0x6c>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e003      	b.n	8004914 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004914:	e030      	b.n	8004978 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2180      	movs	r1, #128	@ 0x80
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 feff 	bl	8005724 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e03d      	b.n	80049b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3302      	adds	r3, #2
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e007      	b.n	8004966 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3301      	adds	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1c8      	bne.n	8004916 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	2140      	movs	r1, #64	@ 0x40
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fec8 	bl	8005724 <UART_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e006      	b.n	80049b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b092      	sub	sp, #72	@ 0x48
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	431a      	orrs	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4bbe      	ldr	r3, [pc, #760]	@ (8004ce4 <UART_SetConfig+0x328>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4ab3      	ldr	r2, [pc, #716]	@ (8004ce8 <UART_SetConfig+0x32c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a24:	4313      	orrs	r3, r2
 8004a26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	4baf      	ldr	r3, [pc, #700]	@ (8004cec <UART_SetConfig+0x330>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	f023 010f 	bic.w	r1, r3, #15
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4aa6      	ldr	r2, [pc, #664]	@ (8004cf0 <UART_SetConfig+0x334>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d177      	bne.n	8004b4c <UART_SetConfig+0x190>
 8004a5c:	4ba5      	ldr	r3, [pc, #660]	@ (8004cf4 <UART_SetConfig+0x338>)
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a64:	2b28      	cmp	r3, #40	@ 0x28
 8004a66:	d86d      	bhi.n	8004b44 <UART_SetConfig+0x188>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0xb4>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004b15 	.word	0x08004b15
 8004a74:	08004b45 	.word	0x08004b45
 8004a78:	08004b45 	.word	0x08004b45
 8004a7c:	08004b45 	.word	0x08004b45
 8004a80:	08004b45 	.word	0x08004b45
 8004a84:	08004b45 	.word	0x08004b45
 8004a88:	08004b45 	.word	0x08004b45
 8004a8c:	08004b45 	.word	0x08004b45
 8004a90:	08004b1d 	.word	0x08004b1d
 8004a94:	08004b45 	.word	0x08004b45
 8004a98:	08004b45 	.word	0x08004b45
 8004a9c:	08004b45 	.word	0x08004b45
 8004aa0:	08004b45 	.word	0x08004b45
 8004aa4:	08004b45 	.word	0x08004b45
 8004aa8:	08004b45 	.word	0x08004b45
 8004aac:	08004b45 	.word	0x08004b45
 8004ab0:	08004b25 	.word	0x08004b25
 8004ab4:	08004b45 	.word	0x08004b45
 8004ab8:	08004b45 	.word	0x08004b45
 8004abc:	08004b45 	.word	0x08004b45
 8004ac0:	08004b45 	.word	0x08004b45
 8004ac4:	08004b45 	.word	0x08004b45
 8004ac8:	08004b45 	.word	0x08004b45
 8004acc:	08004b45 	.word	0x08004b45
 8004ad0:	08004b2d 	.word	0x08004b2d
 8004ad4:	08004b45 	.word	0x08004b45
 8004ad8:	08004b45 	.word	0x08004b45
 8004adc:	08004b45 	.word	0x08004b45
 8004ae0:	08004b45 	.word	0x08004b45
 8004ae4:	08004b45 	.word	0x08004b45
 8004ae8:	08004b45 	.word	0x08004b45
 8004aec:	08004b45 	.word	0x08004b45
 8004af0:	08004b35 	.word	0x08004b35
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004b45 	.word	0x08004b45
 8004afc:	08004b45 	.word	0x08004b45
 8004b00:	08004b45 	.word	0x08004b45
 8004b04:	08004b45 	.word	0x08004b45
 8004b08:	08004b45 	.word	0x08004b45
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b3d 	.word	0x08004b3d
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1a:	e222      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e21e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e21a      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e216      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b34:	2320      	movs	r3, #32
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e212      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b3c:	2340      	movs	r3, #64	@ 0x40
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b42:	e20e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4a:	e20a      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a69      	ldr	r2, [pc, #420]	@ (8004cf8 <UART_SetConfig+0x33c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d130      	bne.n	8004bb8 <UART_SetConfig+0x1fc>
 8004b56:	4b67      	ldr	r3, [pc, #412]	@ (8004cf4 <UART_SetConfig+0x338>)
 8004b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	d826      	bhi.n	8004bb0 <UART_SetConfig+0x1f4>
 8004b62:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <UART_SetConfig+0x1ac>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	08004b91 	.word	0x08004b91
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba9 	.word	0x08004ba9
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b86:	e1ec      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8e:	e1e8      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b90:	2308      	movs	r3, #8
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b96:	e1e4      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9e:	e1e0      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ba6:	e1dc      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ba8:	2340      	movs	r3, #64	@ 0x40
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bae:	e1d8      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e1d4      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8004cfc <UART_SetConfig+0x340>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d130      	bne.n	8004c24 <UART_SetConfig+0x268>
 8004bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8004cf4 <UART_SetConfig+0x338>)
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	2b05      	cmp	r3, #5
 8004bcc:	d826      	bhi.n	8004c1c <UART_SetConfig+0x260>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <UART_SetConfig+0x218>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bed 	.word	0x08004bed
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004bfd 	.word	0x08004bfd
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf2:	e1b6      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfa:	e1b2      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c02:	e1ae      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0a:	e1aa      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c12:	e1a6      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c14:	2340      	movs	r3, #64	@ 0x40
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e1a2      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c1c:	2380      	movs	r3, #128	@ 0x80
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e19e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a35      	ldr	r2, [pc, #212]	@ (8004d00 <UART_SetConfig+0x344>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d130      	bne.n	8004c90 <UART_SetConfig+0x2d4>
 8004c2e:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <UART_SetConfig+0x338>)
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d826      	bhi.n	8004c88 <UART_SetConfig+0x2cc>
 8004c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0x284>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c59 	.word	0x08004c59
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	08004c69 	.word	0x08004c69
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5e:	e180      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e17c      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e178      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e174      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e170      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c80:	2340      	movs	r3, #64	@ 0x40
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e16c      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c88:	2380      	movs	r3, #128	@ 0x80
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e168      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1b      	ldr	r2, [pc, #108]	@ (8004d04 <UART_SetConfig+0x348>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d142      	bne.n	8004d20 <UART_SetConfig+0x364>
 8004c9a:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <UART_SetConfig+0x338>)
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d838      	bhi.n	8004d18 <UART_SetConfig+0x35c>
 8004ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <UART_SetConfig+0x2f0>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cc5 	.word	0x08004cc5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	08004cd5 	.word	0x08004cd5
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004d09 	.word	0x08004d09
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cca:	e14a      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd2:	e146      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cda:	e142      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce2:	e13e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ce4:	cfff69f3 	.word	0xcfff69f3
 8004ce8:	58000c00 	.word	0x58000c00
 8004cec:	11fff4ff 	.word	0x11fff4ff
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	40004400 	.word	0x40004400
 8004cfc:	40004800 	.word	0x40004800
 8004d00:	40004c00 	.word	0x40004c00
 8004d04:	40005000 	.word	0x40005000
 8004d08:	2320      	movs	r3, #32
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e128      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004d10:	2340      	movs	r3, #64	@ 0x40
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e124      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e120      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4acb      	ldr	r2, [pc, #812]	@ (8005054 <UART_SetConfig+0x698>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d176      	bne.n	8004e18 <UART_SetConfig+0x45c>
 8004d2a:	4bcb      	ldr	r3, [pc, #812]	@ (8005058 <UART_SetConfig+0x69c>)
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d32:	2b28      	cmp	r3, #40	@ 0x28
 8004d34:	d86c      	bhi.n	8004e10 <UART_SetConfig+0x454>
 8004d36:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <UART_SetConfig+0x380>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004de1 	.word	0x08004de1
 8004d40:	08004e11 	.word	0x08004e11
 8004d44:	08004e11 	.word	0x08004e11
 8004d48:	08004e11 	.word	0x08004e11
 8004d4c:	08004e11 	.word	0x08004e11
 8004d50:	08004e11 	.word	0x08004e11
 8004d54:	08004e11 	.word	0x08004e11
 8004d58:	08004e11 	.word	0x08004e11
 8004d5c:	08004de9 	.word	0x08004de9
 8004d60:	08004e11 	.word	0x08004e11
 8004d64:	08004e11 	.word	0x08004e11
 8004d68:	08004e11 	.word	0x08004e11
 8004d6c:	08004e11 	.word	0x08004e11
 8004d70:	08004e11 	.word	0x08004e11
 8004d74:	08004e11 	.word	0x08004e11
 8004d78:	08004e11 	.word	0x08004e11
 8004d7c:	08004df1 	.word	0x08004df1
 8004d80:	08004e11 	.word	0x08004e11
 8004d84:	08004e11 	.word	0x08004e11
 8004d88:	08004e11 	.word	0x08004e11
 8004d8c:	08004e11 	.word	0x08004e11
 8004d90:	08004e11 	.word	0x08004e11
 8004d94:	08004e11 	.word	0x08004e11
 8004d98:	08004e11 	.word	0x08004e11
 8004d9c:	08004df9 	.word	0x08004df9
 8004da0:	08004e11 	.word	0x08004e11
 8004da4:	08004e11 	.word	0x08004e11
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004e11 	.word	0x08004e11
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	08004e11 	.word	0x08004e11
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e01 	.word	0x08004e01
 8004dc0:	08004e11 	.word	0x08004e11
 8004dc4:	08004e11 	.word	0x08004e11
 8004dc8:	08004e11 	.word	0x08004e11
 8004dcc:	08004e11 	.word	0x08004e11
 8004dd0:	08004e11 	.word	0x08004e11
 8004dd4:	08004e11 	.word	0x08004e11
 8004dd8:	08004e11 	.word	0x08004e11
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e0bc      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004de8:	2304      	movs	r3, #4
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e0b8      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004df0:	2308      	movs	r3, #8
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df6:	e0b4      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e0b0      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e00:	2320      	movs	r3, #32
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e0ac      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e08:	2340      	movs	r3, #64	@ 0x40
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0e:	e0a8      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e16:	e0a4      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a8f      	ldr	r2, [pc, #572]	@ (800505c <UART_SetConfig+0x6a0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d130      	bne.n	8004e84 <UART_SetConfig+0x4c8>
 8004e22:	4b8d      	ldr	r3, [pc, #564]	@ (8005058 <UART_SetConfig+0x69c>)
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d826      	bhi.n	8004e7c <UART_SetConfig+0x4c0>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <UART_SetConfig+0x478>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e4d 	.word	0x08004e4d
 8004e38:	08004e55 	.word	0x08004e55
 8004e3c:	08004e5d 	.word	0x08004e5d
 8004e40:	08004e65 	.word	0x08004e65
 8004e44:	08004e6d 	.word	0x08004e6d
 8004e48:	08004e75 	.word	0x08004e75
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e52:	e086      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e54:	2304      	movs	r3, #4
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5a:	e082      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e62:	e07e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e64:	2310      	movs	r3, #16
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e6a:	e07a      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e72:	e076      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e74:	2340      	movs	r3, #64	@ 0x40
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e7a:	e072      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e82:	e06e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a75      	ldr	r2, [pc, #468]	@ (8005060 <UART_SetConfig+0x6a4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d130      	bne.n	8004ef0 <UART_SetConfig+0x534>
 8004e8e:	4b72      	ldr	r3, [pc, #456]	@ (8005058 <UART_SetConfig+0x69c>)
 8004e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d826      	bhi.n	8004ee8 <UART_SetConfig+0x52c>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <UART_SetConfig+0x4e4>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004eb9 	.word	0x08004eb9
 8004ea4:	08004ec1 	.word	0x08004ec1
 8004ea8:	08004ec9 	.word	0x08004ec9
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ebe:	e050      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec6:	e04c      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ec8:	2308      	movs	r3, #8
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ece:	e048      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed6:	e044      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ede:	e040      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ee0:	2340      	movs	r3, #64	@ 0x40
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee6:	e03c      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eee:	e038      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8005064 <UART_SetConfig+0x6a8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d130      	bne.n	8004f5c <UART_SetConfig+0x5a0>
 8004efa:	4b57      	ldr	r3, [pc, #348]	@ (8005058 <UART_SetConfig+0x69c>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d826      	bhi.n	8004f54 <UART_SetConfig+0x598>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <UART_SetConfig+0x550>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f25 	.word	0x08004f25
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	08004f35 	.word	0x08004f35
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2a:	e01a      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f32:	e016      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3a:	e012      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f42:	e00e      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f44:	2320      	movs	r3, #32
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e00a      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f4c:	2340      	movs	r3, #64	@ 0x40
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f52:	e006      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5a:	e002      	b.n	8004f62 <UART_SetConfig+0x5a6>
 8004f5c:	2380      	movs	r3, #128	@ 0x80
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3f      	ldr	r2, [pc, #252]	@ (8005064 <UART_SetConfig+0x6a8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f040 80f8 	bne.w	800515e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	dc46      	bgt.n	8005004 <UART_SetConfig+0x648>
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	f2c0 8082 	blt.w	8005080 <UART_SetConfig+0x6c4>
 8004f7c:	3b02      	subs	r3, #2
 8004f7e:	2b1e      	cmp	r3, #30
 8004f80:	d87e      	bhi.n	8005080 <UART_SetConfig+0x6c4>
 8004f82:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <UART_SetConfig+0x5cc>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	0800500b 	.word	0x0800500b
 8004f8c:	08005081 	.word	0x08005081
 8004f90:	08005013 	.word	0x08005013
 8004f94:	08005081 	.word	0x08005081
 8004f98:	08005081 	.word	0x08005081
 8004f9c:	08005081 	.word	0x08005081
 8004fa0:	08005023 	.word	0x08005023
 8004fa4:	08005081 	.word	0x08005081
 8004fa8:	08005081 	.word	0x08005081
 8004fac:	08005081 	.word	0x08005081
 8004fb0:	08005081 	.word	0x08005081
 8004fb4:	08005081 	.word	0x08005081
 8004fb8:	08005081 	.word	0x08005081
 8004fbc:	08005081 	.word	0x08005081
 8004fc0:	08005033 	.word	0x08005033
 8004fc4:	08005081 	.word	0x08005081
 8004fc8:	08005081 	.word	0x08005081
 8004fcc:	08005081 	.word	0x08005081
 8004fd0:	08005081 	.word	0x08005081
 8004fd4:	08005081 	.word	0x08005081
 8004fd8:	08005081 	.word	0x08005081
 8004fdc:	08005081 	.word	0x08005081
 8004fe0:	08005081 	.word	0x08005081
 8004fe4:	08005081 	.word	0x08005081
 8004fe8:	08005081 	.word	0x08005081
 8004fec:	08005081 	.word	0x08005081
 8004ff0:	08005081 	.word	0x08005081
 8004ff4:	08005081 	.word	0x08005081
 8004ff8:	08005081 	.word	0x08005081
 8004ffc:	08005081 	.word	0x08005081
 8005000:	08005073 	.word	0x08005073
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d037      	beq.n	8005078 <UART_SetConfig+0x6bc>
 8005008:	e03a      	b.n	8005080 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800500a:	f7fe ffd7 	bl	8003fbc <HAL_RCCEx_GetD3PCLK1Freq>
 800500e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005010:	e03c      	b.n	800508c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe ffe6 	bl	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005020:	e034      	b.n	800508c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005022:	f107 0318 	add.w	r3, r7, #24
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f932 	bl	8004290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005030:	e02c      	b.n	800508c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005032:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <UART_SetConfig+0x69c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800503e:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <UART_SetConfig+0x69c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	08db      	lsrs	r3, r3, #3
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	4a07      	ldr	r2, [pc, #28]	@ (8005068 <UART_SetConfig+0x6ac>)
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005050:	e01c      	b.n	800508c <UART_SetConfig+0x6d0>
 8005052:	bf00      	nop
 8005054:	40011400 	.word	0x40011400
 8005058:	58024400 	.word	0x58024400
 800505c:	40007800 	.word	0x40007800
 8005060:	40007c00 	.word	0x40007c00
 8005064:	58000c00 	.word	0x58000c00
 8005068:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800506c:	4b9d      	ldr	r3, [pc, #628]	@ (80052e4 <UART_SetConfig+0x928>)
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005070:	e00c      	b.n	800508c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005072:	4b9d      	ldr	r3, [pc, #628]	@ (80052e8 <UART_SetConfig+0x92c>)
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005076:	e009      	b.n	800508c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507e:	e005      	b.n	800508c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800508a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800508c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 81de 	beq.w	8005450 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	4a94      	ldr	r2, [pc, #592]	@ (80052ec <UART_SetConfig+0x930>)
 800509a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509e:	461a      	mov	r2, r3
 80050a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4413      	add	r3, r2
 80050b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d305      	bcc.n	80050c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d903      	bls.n	80050cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80050ca:	e1c1      	b.n	8005450 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ce:	2200      	movs	r2, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	4a84      	ldr	r2, [pc, #528]	@ (80052ec <UART_SetConfig+0x930>)
 80050da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ee:	f7fb f94f 	bl	8000390 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	020b      	lsls	r3, r1, #8
 8005104:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005108:	0202      	lsls	r2, r0, #8
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	6849      	ldr	r1, [r1, #4]
 800510e:	0849      	lsrs	r1, r1, #1
 8005110:	2000      	movs	r0, #0
 8005112:	460c      	mov	r4, r1
 8005114:	4605      	mov	r5, r0
 8005116:	eb12 0804 	adds.w	r8, r2, r4
 800511a:	eb43 0905 	adc.w	r9, r3, r5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	469a      	mov	sl, r3
 8005126:	4693      	mov	fp, r2
 8005128:	4652      	mov	r2, sl
 800512a:	465b      	mov	r3, fp
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb f92e 	bl	8000390 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4613      	mov	r3, r2
 800513a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800513c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005142:	d308      	bcc.n	8005156 <UART_SetConfig+0x79a>
 8005144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800514a:	d204      	bcs.n	8005156 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	e17c      	b.n	8005450 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800515c:	e178      	b.n	8005450 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005166:	f040 80c5 	bne.w	80052f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800516a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800516e:	2b20      	cmp	r3, #32
 8005170:	dc48      	bgt.n	8005204 <UART_SetConfig+0x848>
 8005172:	2b00      	cmp	r3, #0
 8005174:	db7b      	blt.n	800526e <UART_SetConfig+0x8b2>
 8005176:	2b20      	cmp	r3, #32
 8005178:	d879      	bhi.n	800526e <UART_SetConfig+0x8b2>
 800517a:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <UART_SetConfig+0x7c4>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	0800520b 	.word	0x0800520b
 8005184:	08005213 	.word	0x08005213
 8005188:	0800526f 	.word	0x0800526f
 800518c:	0800526f 	.word	0x0800526f
 8005190:	0800521b 	.word	0x0800521b
 8005194:	0800526f 	.word	0x0800526f
 8005198:	0800526f 	.word	0x0800526f
 800519c:	0800526f 	.word	0x0800526f
 80051a0:	0800522b 	.word	0x0800522b
 80051a4:	0800526f 	.word	0x0800526f
 80051a8:	0800526f 	.word	0x0800526f
 80051ac:	0800526f 	.word	0x0800526f
 80051b0:	0800526f 	.word	0x0800526f
 80051b4:	0800526f 	.word	0x0800526f
 80051b8:	0800526f 	.word	0x0800526f
 80051bc:	0800526f 	.word	0x0800526f
 80051c0:	0800523b 	.word	0x0800523b
 80051c4:	0800526f 	.word	0x0800526f
 80051c8:	0800526f 	.word	0x0800526f
 80051cc:	0800526f 	.word	0x0800526f
 80051d0:	0800526f 	.word	0x0800526f
 80051d4:	0800526f 	.word	0x0800526f
 80051d8:	0800526f 	.word	0x0800526f
 80051dc:	0800526f 	.word	0x0800526f
 80051e0:	0800526f 	.word	0x0800526f
 80051e4:	0800526f 	.word	0x0800526f
 80051e8:	0800526f 	.word	0x0800526f
 80051ec:	0800526f 	.word	0x0800526f
 80051f0:	0800526f 	.word	0x0800526f
 80051f4:	0800526f 	.word	0x0800526f
 80051f8:	0800526f 	.word	0x0800526f
 80051fc:	0800526f 	.word	0x0800526f
 8005200:	08005261 	.word	0x08005261
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d02e      	beq.n	8005266 <UART_SetConfig+0x8aa>
 8005208:	e031      	b.n	800526e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520a:	f7fd fca1 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 800520e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005210:	e033      	b.n	800527a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005212:	f7fd fcb3 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8005216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005218:	e02f      	b.n	800527a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800521a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fee2 	bl	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005228:	e027      	b.n	800527a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800522a:	f107 0318 	add.w	r3, r7, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff f82e 	bl	8004290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005238:	e01f      	b.n	800527a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523a:	4b2d      	ldr	r3, [pc, #180]	@ (80052f0 <UART_SetConfig+0x934>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005246:	4b2a      	ldr	r3, [pc, #168]	@ (80052f0 <UART_SetConfig+0x934>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	08db      	lsrs	r3, r3, #3
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <UART_SetConfig+0x928>)
 8005252:	fa22 f303 	lsr.w	r3, r2, r3
 8005256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005258:	e00f      	b.n	800527a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800525a:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <UART_SetConfig+0x928>)
 800525c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800525e:	e00c      	b.n	800527a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005260:	4b21      	ldr	r3, [pc, #132]	@ (80052e8 <UART_SetConfig+0x92c>)
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005264:	e009      	b.n	800527a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800526c:	e005      	b.n	800527a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800527a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80e7 	beq.w	8005450 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <UART_SetConfig+0x930>)
 8005288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528c:	461a      	mov	r2, r3
 800528e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005290:	fbb3 f3f2 	udiv	r3, r3, r2
 8005294:	005a      	lsls	r2, r3, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	441a      	add	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	d916      	bls.n	80052dc <UART_SetConfig+0x920>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d212      	bcs.n	80052dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f023 030f 	bic.w	r3, r3, #15
 80052be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052ce:	4313      	orrs	r3, r2
 80052d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e0b9      	b.n	8005450 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80052e2:	e0b5      	b.n	8005450 <UART_SetConfig+0xa94>
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	08006a9c 	.word	0x08006a9c
 80052f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	dc49      	bgt.n	8005390 <UART_SetConfig+0x9d4>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db7c      	blt.n	80053fa <UART_SetConfig+0xa3e>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d87a      	bhi.n	80053fa <UART_SetConfig+0xa3e>
 8005304:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <UART_SetConfig+0x950>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005397 	.word	0x08005397
 8005310:	0800539f 	.word	0x0800539f
 8005314:	080053fb 	.word	0x080053fb
 8005318:	080053fb 	.word	0x080053fb
 800531c:	080053a7 	.word	0x080053a7
 8005320:	080053fb 	.word	0x080053fb
 8005324:	080053fb 	.word	0x080053fb
 8005328:	080053fb 	.word	0x080053fb
 800532c:	080053b7 	.word	0x080053b7
 8005330:	080053fb 	.word	0x080053fb
 8005334:	080053fb 	.word	0x080053fb
 8005338:	080053fb 	.word	0x080053fb
 800533c:	080053fb 	.word	0x080053fb
 8005340:	080053fb 	.word	0x080053fb
 8005344:	080053fb 	.word	0x080053fb
 8005348:	080053fb 	.word	0x080053fb
 800534c:	080053c7 	.word	0x080053c7
 8005350:	080053fb 	.word	0x080053fb
 8005354:	080053fb 	.word	0x080053fb
 8005358:	080053fb 	.word	0x080053fb
 800535c:	080053fb 	.word	0x080053fb
 8005360:	080053fb 	.word	0x080053fb
 8005364:	080053fb 	.word	0x080053fb
 8005368:	080053fb 	.word	0x080053fb
 800536c:	080053fb 	.word	0x080053fb
 8005370:	080053fb 	.word	0x080053fb
 8005374:	080053fb 	.word	0x080053fb
 8005378:	080053fb 	.word	0x080053fb
 800537c:	080053fb 	.word	0x080053fb
 8005380:	080053fb 	.word	0x080053fb
 8005384:	080053fb 	.word	0x080053fb
 8005388:	080053fb 	.word	0x080053fb
 800538c:	080053ed 	.word	0x080053ed
 8005390:	2b40      	cmp	r3, #64	@ 0x40
 8005392:	d02e      	beq.n	80053f2 <UART_SetConfig+0xa36>
 8005394:	e031      	b.n	80053fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005396:	f7fd fbdb 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 800539a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800539c:	e033      	b.n	8005406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800539e:	f7fd fbed 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 80053a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053a4:	e02f      	b.n	8005406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fe1c 	bl	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053b4:	e027      	b.n	8005406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b6:	f107 0318 	add.w	r3, r7, #24
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe ff68 	bl	8004290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053c4:	e01f      	b.n	8005406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c6:	4b2d      	ldr	r3, [pc, #180]	@ (800547c <UART_SetConfig+0xac0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053d2:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <UART_SetConfig+0xac0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	4a28      	ldr	r2, [pc, #160]	@ (8005480 <UART_SetConfig+0xac4>)
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053e4:	e00f      	b.n	8005406 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80053e6:	4b26      	ldr	r3, [pc, #152]	@ (8005480 <UART_SetConfig+0xac4>)
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053ea:	e00c      	b.n	8005406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053ec:	4b25      	ldr	r3, [pc, #148]	@ (8005484 <UART_SetConfig+0xac8>)
 80053ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053f0:	e009      	b.n	8005406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053f8:	e005      	b.n	8005406 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005404:	bf00      	nop
    }

    if (pclk != 0U)
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d021      	beq.n	8005450 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <UART_SetConfig+0xacc>)
 8005412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005416:	461a      	mov	r2, r3
 8005418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541a:	fbb3 f2f2 	udiv	r2, r3, r2
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	441a      	add	r2, r3
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005432:	2b0f      	cmp	r3, #15
 8005434:	d909      	bls.n	800544a <UART_SetConfig+0xa8e>
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543c:	d205      	bcs.n	800544a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	b29a      	uxth	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e002      	b.n	8005450 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2201      	movs	r2, #1
 8005454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2201      	movs	r2, #1
 800545c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800546c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005470:	4618      	mov	r0, r3
 8005472:	3748      	adds	r7, #72	@ 0x48
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547a:	bf00      	nop
 800547c:	58024400 	.word	0x58024400
 8005480:	03d09000 	.word	0x03d09000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	08006a9c 	.word	0x08006a9c

0800548c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800558a:	d10a      	bne.n	80055a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b098      	sub	sp, #96	@ 0x60
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e0:	f7fb fdc2 	bl	8001168 <HAL_GetTick>
 80055e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d12f      	bne.n	8005654 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fc:	2200      	movs	r2, #0
 80055fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f88e 	bl	8005724 <UART_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d022      	beq.n	8005654 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800561c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005622:	653b      	str	r3, [r7, #80]	@ 0x50
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800562c:	647b      	str	r3, [r7, #68]	@ 0x44
 800562e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800563a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e6      	bne.n	800560e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e063      	b.n	800571c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d149      	bne.n	80056f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005662:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566a:	2200      	movs	r2, #0
 800566c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f857 	bl	8005724 <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d03c      	beq.n	80056f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	623b      	str	r3, [r7, #32]
   return(result);
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30
 800569c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ce:	61fa      	str	r2, [r7, #28]
 80056d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	69b9      	ldr	r1, [r7, #24]
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	617b      	str	r3, [r7, #20]
   return(result);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e012      	b.n	800571c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3758      	adds	r7, #88	@ 0x58
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005734:	e04f      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d04b      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573e:	f7fb fd13 	bl	8001168 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	429a      	cmp	r2, r3
 800574c:	d302      	bcc.n	8005754 <UART_WaitOnFlagUntilTimeout+0x30>
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e04e      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d037      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b80      	cmp	r3, #128	@ 0x80
 800576a:	d034      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	d031      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b08      	cmp	r3, #8
 800577e:	d110      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2208      	movs	r2, #8
 8005786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f839 	bl	8005800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2208      	movs	r2, #8
 8005792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e029      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b0:	d111      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f81f 	bl	8005800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e00f      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d0a0      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b095      	sub	sp, #84	@ 0x54
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800581c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005826:	643b      	str	r3, [r7, #64]	@ 0x40
 8005828:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800582c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e6      	bne.n	8005808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	61fb      	str	r3, [r7, #28]
   return(result);
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <UART_EndRxTransfer+0xc8>)
 800584e:	4013      	ands	r3, r2
 8005850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800585a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800585c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e5      	bne.n	800583a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d118      	bne.n	80058a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	60bb      	str	r3, [r7, #8]
   return(result);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f023 0310 	bic.w	r3, r3, #16
 800588a:	647b      	str	r3, [r7, #68]	@ 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6979      	ldr	r1, [r7, #20]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e6      	bne.n	8005876 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058bc:	bf00      	nop
 80058be:	3754      	adds	r7, #84	@ 0x54
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	effffffe 	.word	0xeffffffe

080058cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058de:	2302      	movs	r3, #2
 80058e0:	e027      	b.n	8005932 <HAL_UARTEx_DisableFifoMode+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2224      	movs	r2, #36	@ 0x24
 80058ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005952:	2302      	movs	r3, #2
 8005954:	e02d      	b.n	80059b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	@ 0x24
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f850 	bl	8005a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e02d      	b.n	8005a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	@ 0x24
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f812 	bl	8005a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d108      	bne.n	8005a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a58:	e031      	b.n	8005abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a5e:	2310      	movs	r3, #16
 8005a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	0e5b      	lsrs	r3, r3, #25
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	0f5b      	lsrs	r3, r3, #29
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	7b3a      	ldrb	r2, [r7, #12]
 8005a86:	4911      	ldr	r1, [pc, #68]	@ (8005acc <UARTEx_SetNbDataToProcess+0x94>)
 8005a88:	5c8a      	ldrb	r2, [r1, r2]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a8e:	7b3a      	ldrb	r2, [r7, #12]
 8005a90:	490f      	ldr	r1, [pc, #60]	@ (8005ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8005a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	7b7a      	ldrb	r2, [r7, #13]
 8005aa4:	4909      	ldr	r1, [pc, #36]	@ (8005acc <UARTEx_SetNbDataToProcess+0x94>)
 8005aa6:	5c8a      	ldrb	r2, [r1, r2]
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aac:	7b7a      	ldrb	r2, [r7, #13]
 8005aae:	4908      	ldr	r1, [pc, #32]	@ (8005ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	08006ab4 	.word	0x08006ab4
 8005ad0:	08006abc 	.word	0x08006abc

08005ad4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	f107 001c 	add.w	r0, r7, #28
 8005ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ae6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d121      	bne.n	8005b32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb0 <USB_CoreInit+0xdc>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d105      	bne.n	8005b26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 faaa 	bl	8006080 <USB_CoreReset>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	e01b      	b.n	8005b6a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa9e 	bl	8006080 <USB_CoreReset>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b5c:	e005      	b.n	8005b6a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b6a:	7fbb      	ldrb	r3, [r7, #30]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d116      	bne.n	8005b9e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <USB_CoreInit+0xe0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f043 0206 	orr.w	r2, r3, #6
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005baa:	b004      	add	sp, #16
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	ffbdffbf 	.word	0xffbdffbf
 8005bb4:	03ee0000 	.word	0x03ee0000

08005bb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 0201 	bic.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d115      	bne.n	8005c28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c08:	200a      	movs	r0, #10
 8005c0a:	f7fb fab9 	bl	8001180 <HAL_Delay>
      ms += 10U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	330a      	adds	r3, #10
 8005c12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa25 	bl	8006064 <USB_GetMode>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d01e      	beq.n	8005c5e <USB_SetCurrentMode+0x84>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c24:	d9f0      	bls.n	8005c08 <USB_SetCurrentMode+0x2e>
 8005c26:	e01a      	b.n	8005c5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d115      	bne.n	8005c5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c3a:	200a      	movs	r0, #10
 8005c3c:	f7fb faa0 	bl	8001180 <HAL_Delay>
      ms += 10U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	330a      	adds	r3, #10
 8005c44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa0c 	bl	8006064 <USB_GetMode>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <USB_SetCurrentMode+0x84>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c56:	d9f0      	bls.n	8005c3a <USB_SetCurrentMode+0x60>
 8005c58:	e001      	b.n	8005c5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e005      	b.n	8005c6a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c62:	d101      	bne.n	8005c68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c74:	b084      	sub	sp, #16
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b086      	sub	sp, #24
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e009      	b.n	8005ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3340      	adds	r3, #64	@ 0x40
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b0e      	cmp	r3, #14
 8005cac:	d9f2      	bls.n	8005c94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11c      	bne.n	8005cf0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e005      	b.n	8005cfc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10d      	bne.n	8005d2c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f968 	bl	8005ff0 <USB_SetDevSpeed>
 8005d20:	e008      	b.n	8005d34 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d22:	2101      	movs	r1, #1
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f963 	bl	8005ff0 <USB_SetDevSpeed>
 8005d2a:	e003      	b.n	8005d34 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d2c:	2103      	movs	r1, #3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f95e 	bl	8005ff0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d34:	2110      	movs	r1, #16
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f8fa 	bl	8005f30 <USB_FlushTxFifo>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f924 	bl	8005f94 <USB_FlushRxFifo>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d74:	461a      	mov	r2, r3
 8005d76:	2300      	movs	r3, #0
 8005d78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	e043      	b.n	8005e08 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d96:	d118      	bne.n	8005dca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005daa:	461a      	mov	r2, r3
 8005dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e013      	b.n	8005ddc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	e008      	b.n	8005ddc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3301      	adds	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d3b5      	bcc.n	8005d80 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	e043      	b.n	8005ea2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e30:	d118      	bne.n	8005e64 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e44:	461a      	mov	r2, r3
 8005e46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	e013      	b.n	8005e76 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e008      	b.n	8005e76 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e70:	461a      	mov	r2, r3
 8005e72:	2300      	movs	r3, #0
 8005e74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	2300      	movs	r3, #0
 8005e86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e94:	461a      	mov	r2, r3
 8005e96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d3b5      	bcc.n	8005e1a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005ece:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f043 0210 	orr.w	r2, r3, #16
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f28 <USB_DevInit+0x2b4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ef0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f043 0208 	orr.w	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <USB_DevInit+0x2b8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f24:	b004      	add	sp, #16
 8005f26:	4770      	bx	lr
 8005f28:	803c3800 	.word	0x803c3800
 8005f2c:	40000004 	.word	0x40000004

08005f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f4a:	d901      	bls.n	8005f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e01b      	b.n	8005f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	daf2      	bge.n	8005f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	019b      	lsls	r3, r3, #6
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f74:	d901      	bls.n	8005f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e006      	b.n	8005f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d0f0      	beq.n	8005f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fac:	d901      	bls.n	8005fb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e018      	b.n	8005fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	daf2      	bge.n	8005fa0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fd0:	d901      	bls.n	8005fd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e006      	b.n	8005fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d0f0      	beq.n	8005fc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006050:	f043 0302 	orr.w	r3, r3, #2
 8006054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0301 	and.w	r3, r3, #1
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006098:	d901      	bls.n	800609e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e01b      	b.n	80060d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	daf2      	bge.n	800608c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f043 0201 	orr.w	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c2:	d901      	bls.n	80060c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e006      	b.n	80060d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d0f0      	beq.n	80060b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <siprintf>:
 80060e4:	b40e      	push	{r1, r2, r3}
 80060e6:	b500      	push	{lr}
 80060e8:	b09c      	sub	sp, #112	@ 0x70
 80060ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80060ec:	9002      	str	r0, [sp, #8]
 80060ee:	9006      	str	r0, [sp, #24]
 80060f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060f4:	4809      	ldr	r0, [pc, #36]	@ (800611c <siprintf+0x38>)
 80060f6:	9107      	str	r1, [sp, #28]
 80060f8:	9104      	str	r1, [sp, #16]
 80060fa:	4909      	ldr	r1, [pc, #36]	@ (8006120 <siprintf+0x3c>)
 80060fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	a902      	add	r1, sp, #8
 8006108:	f000 f994 	bl	8006434 <_svfiprintf_r>
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	b01c      	add	sp, #112	@ 0x70
 8006114:	f85d eb04 	ldr.w	lr, [sp], #4
 8006118:	b003      	add	sp, #12
 800611a:	4770      	bx	lr
 800611c:	24000028 	.word	0x24000028
 8006120:	ffff0208 	.word	0xffff0208

08006124 <memset>:
 8006124:	4402      	add	r2, r0
 8006126:	4603      	mov	r3, r0
 8006128:	4293      	cmp	r3, r2
 800612a:	d100      	bne.n	800612e <memset+0xa>
 800612c:	4770      	bx	lr
 800612e:	f803 1b01 	strb.w	r1, [r3], #1
 8006132:	e7f9      	b.n	8006128 <memset+0x4>

08006134 <__errno>:
 8006134:	4b01      	ldr	r3, [pc, #4]	@ (800613c <__errno+0x8>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	24000028 	.word	0x24000028

08006140 <__libc_init_array>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	4d0d      	ldr	r5, [pc, #52]	@ (8006178 <__libc_init_array+0x38>)
 8006144:	4c0d      	ldr	r4, [pc, #52]	@ (800617c <__libc_init_array+0x3c>)
 8006146:	1b64      	subs	r4, r4, r5
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	2600      	movs	r6, #0
 800614c:	42a6      	cmp	r6, r4
 800614e:	d109      	bne.n	8006164 <__libc_init_array+0x24>
 8006150:	4d0b      	ldr	r5, [pc, #44]	@ (8006180 <__libc_init_array+0x40>)
 8006152:	4c0c      	ldr	r4, [pc, #48]	@ (8006184 <__libc_init_array+0x44>)
 8006154:	f000 fc66 	bl	8006a24 <_init>
 8006158:	1b64      	subs	r4, r4, r5
 800615a:	10a4      	asrs	r4, r4, #2
 800615c:	2600      	movs	r6, #0
 800615e:	42a6      	cmp	r6, r4
 8006160:	d105      	bne.n	800616e <__libc_init_array+0x2e>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f855 3b04 	ldr.w	r3, [r5], #4
 8006168:	4798      	blx	r3
 800616a:	3601      	adds	r6, #1
 800616c:	e7ee      	b.n	800614c <__libc_init_array+0xc>
 800616e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006172:	4798      	blx	r3
 8006174:	3601      	adds	r6, #1
 8006176:	e7f2      	b.n	800615e <__libc_init_array+0x1e>
 8006178:	08006b00 	.word	0x08006b00
 800617c:	08006b00 	.word	0x08006b00
 8006180:	08006b00 	.word	0x08006b00
 8006184:	08006b04 	.word	0x08006b04

08006188 <__retarget_lock_acquire_recursive>:
 8006188:	4770      	bx	lr

0800618a <__retarget_lock_release_recursive>:
 800618a:	4770      	bx	lr

0800618c <_free_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4605      	mov	r5, r0
 8006190:	2900      	cmp	r1, #0
 8006192:	d041      	beq.n	8006218 <_free_r+0x8c>
 8006194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006198:	1f0c      	subs	r4, r1, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfb8      	it	lt
 800619e:	18e4      	addlt	r4, r4, r3
 80061a0:	f000 f8e0 	bl	8006364 <__malloc_lock>
 80061a4:	4a1d      	ldr	r2, [pc, #116]	@ (800621c <_free_r+0x90>)
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	b933      	cbnz	r3, 80061b8 <_free_r+0x2c>
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6014      	str	r4, [r2, #0]
 80061ae:	4628      	mov	r0, r5
 80061b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b4:	f000 b8dc 	b.w	8006370 <__malloc_unlock>
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d908      	bls.n	80061ce <_free_r+0x42>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	1821      	adds	r1, r4, r0
 80061c0:	428b      	cmp	r3, r1
 80061c2:	bf01      	itttt	eq
 80061c4:	6819      	ldreq	r1, [r3, #0]
 80061c6:	685b      	ldreq	r3, [r3, #4]
 80061c8:	1809      	addeq	r1, r1, r0
 80061ca:	6021      	streq	r1, [r4, #0]
 80061cc:	e7ed      	b.n	80061aa <_free_r+0x1e>
 80061ce:	461a      	mov	r2, r3
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b10b      	cbz	r3, 80061d8 <_free_r+0x4c>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d9fa      	bls.n	80061ce <_free_r+0x42>
 80061d8:	6811      	ldr	r1, [r2, #0]
 80061da:	1850      	adds	r0, r2, r1
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d10b      	bne.n	80061f8 <_free_r+0x6c>
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	4401      	add	r1, r0
 80061e4:	1850      	adds	r0, r2, r1
 80061e6:	4283      	cmp	r3, r0
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	d1e0      	bne.n	80061ae <_free_r+0x22>
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	4408      	add	r0, r1
 80061f4:	6010      	str	r0, [r2, #0]
 80061f6:	e7da      	b.n	80061ae <_free_r+0x22>
 80061f8:	d902      	bls.n	8006200 <_free_r+0x74>
 80061fa:	230c      	movs	r3, #12
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	e7d6      	b.n	80061ae <_free_r+0x22>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	1821      	adds	r1, r4, r0
 8006204:	428b      	cmp	r3, r1
 8006206:	bf04      	itt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	bf04      	itt	eq
 8006210:	1809      	addeq	r1, r1, r0
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	6054      	str	r4, [r2, #4]
 8006216:	e7ca      	b.n	80061ae <_free_r+0x22>
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	24000758 	.word	0x24000758

08006220 <sbrk_aligned>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4e0f      	ldr	r6, [pc, #60]	@ (8006260 <sbrk_aligned+0x40>)
 8006224:	460c      	mov	r4, r1
 8006226:	6831      	ldr	r1, [r6, #0]
 8006228:	4605      	mov	r5, r0
 800622a:	b911      	cbnz	r1, 8006232 <sbrk_aligned+0x12>
 800622c:	f000 fba6 	bl	800697c <_sbrk_r>
 8006230:	6030      	str	r0, [r6, #0]
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 fba1 	bl	800697c <_sbrk_r>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	d103      	bne.n	8006246 <sbrk_aligned+0x26>
 800623e:	f04f 34ff 	mov.w	r4, #4294967295
 8006242:	4620      	mov	r0, r4
 8006244:	bd70      	pop	{r4, r5, r6, pc}
 8006246:	1cc4      	adds	r4, r0, #3
 8006248:	f024 0403 	bic.w	r4, r4, #3
 800624c:	42a0      	cmp	r0, r4
 800624e:	d0f8      	beq.n	8006242 <sbrk_aligned+0x22>
 8006250:	1a21      	subs	r1, r4, r0
 8006252:	4628      	mov	r0, r5
 8006254:	f000 fb92 	bl	800697c <_sbrk_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d1f2      	bne.n	8006242 <sbrk_aligned+0x22>
 800625c:	e7ef      	b.n	800623e <sbrk_aligned+0x1e>
 800625e:	bf00      	nop
 8006260:	24000754 	.word	0x24000754

08006264 <_malloc_r>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	1ccd      	adds	r5, r1, #3
 800626a:	f025 0503 	bic.w	r5, r5, #3
 800626e:	3508      	adds	r5, #8
 8006270:	2d0c      	cmp	r5, #12
 8006272:	bf38      	it	cc
 8006274:	250c      	movcc	r5, #12
 8006276:	2d00      	cmp	r5, #0
 8006278:	4606      	mov	r6, r0
 800627a:	db01      	blt.n	8006280 <_malloc_r+0x1c>
 800627c:	42a9      	cmp	r1, r5
 800627e:	d904      	bls.n	800628a <_malloc_r+0x26>
 8006280:	230c      	movs	r3, #12
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	2000      	movs	r0, #0
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006360 <_malloc_r+0xfc>
 800628e:	f000 f869 	bl	8006364 <__malloc_lock>
 8006292:	f8d8 3000 	ldr.w	r3, [r8]
 8006296:	461c      	mov	r4, r3
 8006298:	bb44      	cbnz	r4, 80062ec <_malloc_r+0x88>
 800629a:	4629      	mov	r1, r5
 800629c:	4630      	mov	r0, r6
 800629e:	f7ff ffbf 	bl	8006220 <sbrk_aligned>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	4604      	mov	r4, r0
 80062a6:	d158      	bne.n	800635a <_malloc_r+0xf6>
 80062a8:	f8d8 4000 	ldr.w	r4, [r8]
 80062ac:	4627      	mov	r7, r4
 80062ae:	2f00      	cmp	r7, #0
 80062b0:	d143      	bne.n	800633a <_malloc_r+0xd6>
 80062b2:	2c00      	cmp	r4, #0
 80062b4:	d04b      	beq.n	800634e <_malloc_r+0xea>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	4639      	mov	r1, r7
 80062ba:	4630      	mov	r0, r6
 80062bc:	eb04 0903 	add.w	r9, r4, r3
 80062c0:	f000 fb5c 	bl	800697c <_sbrk_r>
 80062c4:	4581      	cmp	r9, r0
 80062c6:	d142      	bne.n	800634e <_malloc_r+0xea>
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	1a6d      	subs	r5, r5, r1
 80062cc:	4629      	mov	r1, r5
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff ffa6 	bl	8006220 <sbrk_aligned>
 80062d4:	3001      	adds	r0, #1
 80062d6:	d03a      	beq.n	800634e <_malloc_r+0xea>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	442b      	add	r3, r5
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	f8d8 3000 	ldr.w	r3, [r8]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	bb62      	cbnz	r2, 8006340 <_malloc_r+0xdc>
 80062e6:	f8c8 7000 	str.w	r7, [r8]
 80062ea:	e00f      	b.n	800630c <_malloc_r+0xa8>
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	1b52      	subs	r2, r2, r5
 80062f0:	d420      	bmi.n	8006334 <_malloc_r+0xd0>
 80062f2:	2a0b      	cmp	r2, #11
 80062f4:	d917      	bls.n	8006326 <_malloc_r+0xc2>
 80062f6:	1961      	adds	r1, r4, r5
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	6025      	str	r5, [r4, #0]
 80062fc:	bf18      	it	ne
 80062fe:	6059      	strne	r1, [r3, #4]
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	bf08      	it	eq
 8006304:	f8c8 1000 	streq.w	r1, [r8]
 8006308:	5162      	str	r2, [r4, r5]
 800630a:	604b      	str	r3, [r1, #4]
 800630c:	4630      	mov	r0, r6
 800630e:	f000 f82f 	bl	8006370 <__malloc_unlock>
 8006312:	f104 000b 	add.w	r0, r4, #11
 8006316:	1d23      	adds	r3, r4, #4
 8006318:	f020 0007 	bic.w	r0, r0, #7
 800631c:	1ac2      	subs	r2, r0, r3
 800631e:	bf1c      	itt	ne
 8006320:	1a1b      	subne	r3, r3, r0
 8006322:	50a3      	strne	r3, [r4, r2]
 8006324:	e7af      	b.n	8006286 <_malloc_r+0x22>
 8006326:	6862      	ldr	r2, [r4, #4]
 8006328:	42a3      	cmp	r3, r4
 800632a:	bf0c      	ite	eq
 800632c:	f8c8 2000 	streq.w	r2, [r8]
 8006330:	605a      	strne	r2, [r3, #4]
 8006332:	e7eb      	b.n	800630c <_malloc_r+0xa8>
 8006334:	4623      	mov	r3, r4
 8006336:	6864      	ldr	r4, [r4, #4]
 8006338:	e7ae      	b.n	8006298 <_malloc_r+0x34>
 800633a:	463c      	mov	r4, r7
 800633c:	687f      	ldr	r7, [r7, #4]
 800633e:	e7b6      	b.n	80062ae <_malloc_r+0x4a>
 8006340:	461a      	mov	r2, r3
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	42a3      	cmp	r3, r4
 8006346:	d1fb      	bne.n	8006340 <_malloc_r+0xdc>
 8006348:	2300      	movs	r3, #0
 800634a:	6053      	str	r3, [r2, #4]
 800634c:	e7de      	b.n	800630c <_malloc_r+0xa8>
 800634e:	230c      	movs	r3, #12
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	4630      	mov	r0, r6
 8006354:	f000 f80c 	bl	8006370 <__malloc_unlock>
 8006358:	e794      	b.n	8006284 <_malloc_r+0x20>
 800635a:	6005      	str	r5, [r0, #0]
 800635c:	e7d6      	b.n	800630c <_malloc_r+0xa8>
 800635e:	bf00      	nop
 8006360:	24000758 	.word	0x24000758

08006364 <__malloc_lock>:
 8006364:	4801      	ldr	r0, [pc, #4]	@ (800636c <__malloc_lock+0x8>)
 8006366:	f7ff bf0f 	b.w	8006188 <__retarget_lock_acquire_recursive>
 800636a:	bf00      	nop
 800636c:	24000750 	.word	0x24000750

08006370 <__malloc_unlock>:
 8006370:	4801      	ldr	r0, [pc, #4]	@ (8006378 <__malloc_unlock+0x8>)
 8006372:	f7ff bf0a 	b.w	800618a <__retarget_lock_release_recursive>
 8006376:	bf00      	nop
 8006378:	24000750 	.word	0x24000750

0800637c <__ssputs_r>:
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	688e      	ldr	r6, [r1, #8]
 8006382:	461f      	mov	r7, r3
 8006384:	42be      	cmp	r6, r7
 8006386:	680b      	ldr	r3, [r1, #0]
 8006388:	4682      	mov	sl, r0
 800638a:	460c      	mov	r4, r1
 800638c:	4690      	mov	r8, r2
 800638e:	d82d      	bhi.n	80063ec <__ssputs_r+0x70>
 8006390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006398:	d026      	beq.n	80063e8 <__ssputs_r+0x6c>
 800639a:	6965      	ldr	r5, [r4, #20]
 800639c:	6909      	ldr	r1, [r1, #16]
 800639e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063a2:	eba3 0901 	sub.w	r9, r3, r1
 80063a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063aa:	1c7b      	adds	r3, r7, #1
 80063ac:	444b      	add	r3, r9
 80063ae:	106d      	asrs	r5, r5, #1
 80063b0:	429d      	cmp	r5, r3
 80063b2:	bf38      	it	cc
 80063b4:	461d      	movcc	r5, r3
 80063b6:	0553      	lsls	r3, r2, #21
 80063b8:	d527      	bpl.n	800640a <__ssputs_r+0x8e>
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7ff ff52 	bl	8006264 <_malloc_r>
 80063c0:	4606      	mov	r6, r0
 80063c2:	b360      	cbz	r0, 800641e <__ssputs_r+0xa2>
 80063c4:	6921      	ldr	r1, [r4, #16]
 80063c6:	464a      	mov	r2, r9
 80063c8:	f000 fae8 	bl	800699c <memcpy>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	6126      	str	r6, [r4, #16]
 80063da:	6165      	str	r5, [r4, #20]
 80063dc:	444e      	add	r6, r9
 80063de:	eba5 0509 	sub.w	r5, r5, r9
 80063e2:	6026      	str	r6, [r4, #0]
 80063e4:	60a5      	str	r5, [r4, #8]
 80063e6:	463e      	mov	r6, r7
 80063e8:	42be      	cmp	r6, r7
 80063ea:	d900      	bls.n	80063ee <__ssputs_r+0x72>
 80063ec:	463e      	mov	r6, r7
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	4632      	mov	r2, r6
 80063f2:	4641      	mov	r1, r8
 80063f4:	f000 faa8 	bl	8006948 <memmove>
 80063f8:	68a3      	ldr	r3, [r4, #8]
 80063fa:	1b9b      	subs	r3, r3, r6
 80063fc:	60a3      	str	r3, [r4, #8]
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	4433      	add	r3, r6
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	2000      	movs	r0, #0
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	462a      	mov	r2, r5
 800640c:	f000 fad4 	bl	80069b8 <_realloc_r>
 8006410:	4606      	mov	r6, r0
 8006412:	2800      	cmp	r0, #0
 8006414:	d1e0      	bne.n	80063d8 <__ssputs_r+0x5c>
 8006416:	6921      	ldr	r1, [r4, #16]
 8006418:	4650      	mov	r0, sl
 800641a:	f7ff feb7 	bl	800618c <_free_r>
 800641e:	230c      	movs	r3, #12
 8006420:	f8ca 3000 	str.w	r3, [sl]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	e7e9      	b.n	8006406 <__ssputs_r+0x8a>
	...

08006434 <_svfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	4698      	mov	r8, r3
 800643a:	898b      	ldrh	r3, [r1, #12]
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	b09d      	sub	sp, #116	@ 0x74
 8006440:	4607      	mov	r7, r0
 8006442:	460d      	mov	r5, r1
 8006444:	4614      	mov	r4, r2
 8006446:	d510      	bpl.n	800646a <_svfiprintf_r+0x36>
 8006448:	690b      	ldr	r3, [r1, #16]
 800644a:	b973      	cbnz	r3, 800646a <_svfiprintf_r+0x36>
 800644c:	2140      	movs	r1, #64	@ 0x40
 800644e:	f7ff ff09 	bl	8006264 <_malloc_r>
 8006452:	6028      	str	r0, [r5, #0]
 8006454:	6128      	str	r0, [r5, #16]
 8006456:	b930      	cbnz	r0, 8006466 <_svfiprintf_r+0x32>
 8006458:	230c      	movs	r3, #12
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	b01d      	add	sp, #116	@ 0x74
 8006462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006466:	2340      	movs	r3, #64	@ 0x40
 8006468:	616b      	str	r3, [r5, #20]
 800646a:	2300      	movs	r3, #0
 800646c:	9309      	str	r3, [sp, #36]	@ 0x24
 800646e:	2320      	movs	r3, #32
 8006470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006474:	f8cd 800c 	str.w	r8, [sp, #12]
 8006478:	2330      	movs	r3, #48	@ 0x30
 800647a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006618 <_svfiprintf_r+0x1e4>
 800647e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006482:	f04f 0901 	mov.w	r9, #1
 8006486:	4623      	mov	r3, r4
 8006488:	469a      	mov	sl, r3
 800648a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800648e:	b10a      	cbz	r2, 8006494 <_svfiprintf_r+0x60>
 8006490:	2a25      	cmp	r2, #37	@ 0x25
 8006492:	d1f9      	bne.n	8006488 <_svfiprintf_r+0x54>
 8006494:	ebba 0b04 	subs.w	fp, sl, r4
 8006498:	d00b      	beq.n	80064b2 <_svfiprintf_r+0x7e>
 800649a:	465b      	mov	r3, fp
 800649c:	4622      	mov	r2, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	4638      	mov	r0, r7
 80064a2:	f7ff ff6b 	bl	800637c <__ssputs_r>
 80064a6:	3001      	adds	r0, #1
 80064a8:	f000 80a7 	beq.w	80065fa <_svfiprintf_r+0x1c6>
 80064ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ae:	445a      	add	r2, fp
 80064b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b2:	f89a 3000 	ldrb.w	r3, [sl]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 809f 	beq.w	80065fa <_svfiprintf_r+0x1c6>
 80064bc:	2300      	movs	r3, #0
 80064be:	f04f 32ff 	mov.w	r2, #4294967295
 80064c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064c6:	f10a 0a01 	add.w	sl, sl, #1
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	9307      	str	r3, [sp, #28]
 80064ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80064d4:	4654      	mov	r4, sl
 80064d6:	2205      	movs	r2, #5
 80064d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064dc:	484e      	ldr	r0, [pc, #312]	@ (8006618 <_svfiprintf_r+0x1e4>)
 80064de:	f7f9 ff07 	bl	80002f0 <memchr>
 80064e2:	9a04      	ldr	r2, [sp, #16]
 80064e4:	b9d8      	cbnz	r0, 800651e <_svfiprintf_r+0xea>
 80064e6:	06d0      	lsls	r0, r2, #27
 80064e8:	bf44      	itt	mi
 80064ea:	2320      	movmi	r3, #32
 80064ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f0:	0711      	lsls	r1, r2, #28
 80064f2:	bf44      	itt	mi
 80064f4:	232b      	movmi	r3, #43	@ 0x2b
 80064f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064fa:	f89a 3000 	ldrb.w	r3, [sl]
 80064fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006500:	d015      	beq.n	800652e <_svfiprintf_r+0xfa>
 8006502:	9a07      	ldr	r2, [sp, #28]
 8006504:	4654      	mov	r4, sl
 8006506:	2000      	movs	r0, #0
 8006508:	f04f 0c0a 	mov.w	ip, #10
 800650c:	4621      	mov	r1, r4
 800650e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006512:	3b30      	subs	r3, #48	@ 0x30
 8006514:	2b09      	cmp	r3, #9
 8006516:	d94b      	bls.n	80065b0 <_svfiprintf_r+0x17c>
 8006518:	b1b0      	cbz	r0, 8006548 <_svfiprintf_r+0x114>
 800651a:	9207      	str	r2, [sp, #28]
 800651c:	e014      	b.n	8006548 <_svfiprintf_r+0x114>
 800651e:	eba0 0308 	sub.w	r3, r0, r8
 8006522:	fa09 f303 	lsl.w	r3, r9, r3
 8006526:	4313      	orrs	r3, r2
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	46a2      	mov	sl, r4
 800652c:	e7d2      	b.n	80064d4 <_svfiprintf_r+0xa0>
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	1d19      	adds	r1, r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	9103      	str	r1, [sp, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	bfbb      	ittet	lt
 800653a:	425b      	neglt	r3, r3
 800653c:	f042 0202 	orrlt.w	r2, r2, #2
 8006540:	9307      	strge	r3, [sp, #28]
 8006542:	9307      	strlt	r3, [sp, #28]
 8006544:	bfb8      	it	lt
 8006546:	9204      	strlt	r2, [sp, #16]
 8006548:	7823      	ldrb	r3, [r4, #0]
 800654a:	2b2e      	cmp	r3, #46	@ 0x2e
 800654c:	d10a      	bne.n	8006564 <_svfiprintf_r+0x130>
 800654e:	7863      	ldrb	r3, [r4, #1]
 8006550:	2b2a      	cmp	r3, #42	@ 0x2a
 8006552:	d132      	bne.n	80065ba <_svfiprintf_r+0x186>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1d1a      	adds	r2, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	9203      	str	r2, [sp, #12]
 800655c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006560:	3402      	adds	r4, #2
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006628 <_svfiprintf_r+0x1f4>
 8006568:	7821      	ldrb	r1, [r4, #0]
 800656a:	2203      	movs	r2, #3
 800656c:	4650      	mov	r0, sl
 800656e:	f7f9 febf 	bl	80002f0 <memchr>
 8006572:	b138      	cbz	r0, 8006584 <_svfiprintf_r+0x150>
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	eba0 000a 	sub.w	r0, r0, sl
 800657a:	2240      	movs	r2, #64	@ 0x40
 800657c:	4082      	lsls	r2, r0
 800657e:	4313      	orrs	r3, r2
 8006580:	3401      	adds	r4, #1
 8006582:	9304      	str	r3, [sp, #16]
 8006584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006588:	4824      	ldr	r0, [pc, #144]	@ (800661c <_svfiprintf_r+0x1e8>)
 800658a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800658e:	2206      	movs	r2, #6
 8006590:	f7f9 feae 	bl	80002f0 <memchr>
 8006594:	2800      	cmp	r0, #0
 8006596:	d036      	beq.n	8006606 <_svfiprintf_r+0x1d2>
 8006598:	4b21      	ldr	r3, [pc, #132]	@ (8006620 <_svfiprintf_r+0x1ec>)
 800659a:	bb1b      	cbnz	r3, 80065e4 <_svfiprintf_r+0x1b0>
 800659c:	9b03      	ldr	r3, [sp, #12]
 800659e:	3307      	adds	r3, #7
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	3308      	adds	r3, #8
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065aa:	4433      	add	r3, r6
 80065ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ae:	e76a      	b.n	8006486 <_svfiprintf_r+0x52>
 80065b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065b4:	460c      	mov	r4, r1
 80065b6:	2001      	movs	r0, #1
 80065b8:	e7a8      	b.n	800650c <_svfiprintf_r+0xd8>
 80065ba:	2300      	movs	r3, #0
 80065bc:	3401      	adds	r4, #1
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	4619      	mov	r1, r3
 80065c2:	f04f 0c0a 	mov.w	ip, #10
 80065c6:	4620      	mov	r0, r4
 80065c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065cc:	3a30      	subs	r2, #48	@ 0x30
 80065ce:	2a09      	cmp	r2, #9
 80065d0:	d903      	bls.n	80065da <_svfiprintf_r+0x1a6>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0c6      	beq.n	8006564 <_svfiprintf_r+0x130>
 80065d6:	9105      	str	r1, [sp, #20]
 80065d8:	e7c4      	b.n	8006564 <_svfiprintf_r+0x130>
 80065da:	fb0c 2101 	mla	r1, ip, r1, r2
 80065de:	4604      	mov	r4, r0
 80065e0:	2301      	movs	r3, #1
 80065e2:	e7f0      	b.n	80065c6 <_svfiprintf_r+0x192>
 80065e4:	ab03      	add	r3, sp, #12
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006624 <_svfiprintf_r+0x1f0>)
 80065ec:	a904      	add	r1, sp, #16
 80065ee:	4638      	mov	r0, r7
 80065f0:	f3af 8000 	nop.w
 80065f4:	1c42      	adds	r2, r0, #1
 80065f6:	4606      	mov	r6, r0
 80065f8:	d1d6      	bne.n	80065a8 <_svfiprintf_r+0x174>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	065b      	lsls	r3, r3, #25
 80065fe:	f53f af2d 	bmi.w	800645c <_svfiprintf_r+0x28>
 8006602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006604:	e72c      	b.n	8006460 <_svfiprintf_r+0x2c>
 8006606:	ab03      	add	r3, sp, #12
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	462a      	mov	r2, r5
 800660c:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <_svfiprintf_r+0x1f0>)
 800660e:	a904      	add	r1, sp, #16
 8006610:	4638      	mov	r0, r7
 8006612:	f000 f879 	bl	8006708 <_printf_i>
 8006616:	e7ed      	b.n	80065f4 <_svfiprintf_r+0x1c0>
 8006618:	08006ac4 	.word	0x08006ac4
 800661c:	08006ace 	.word	0x08006ace
 8006620:	00000000 	.word	0x00000000
 8006624:	0800637d 	.word	0x0800637d
 8006628:	08006aca 	.word	0x08006aca

0800662c <_printf_common>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	4616      	mov	r6, r2
 8006632:	4698      	mov	r8, r3
 8006634:	688a      	ldr	r2, [r1, #8]
 8006636:	690b      	ldr	r3, [r1, #16]
 8006638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800663c:	4293      	cmp	r3, r2
 800663e:	bfb8      	it	lt
 8006640:	4613      	movlt	r3, r2
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006648:	4607      	mov	r7, r0
 800664a:	460c      	mov	r4, r1
 800664c:	b10a      	cbz	r2, 8006652 <_printf_common+0x26>
 800664e:	3301      	adds	r3, #1
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0699      	lsls	r1, r3, #26
 8006656:	bf42      	ittt	mi
 8006658:	6833      	ldrmi	r3, [r6, #0]
 800665a:	3302      	addmi	r3, #2
 800665c:	6033      	strmi	r3, [r6, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d106      	bne.n	8006674 <_printf_common+0x48>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	6832      	ldr	r2, [r6, #0]
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc26      	bgt.n	80066c2 <_printf_common+0x96>
 8006674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	3b00      	subs	r3, #0
 800667c:	bf18      	it	ne
 800667e:	2301      	movne	r3, #1
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d42b      	bmi.n	80066dc <_printf_common+0xb0>
 8006684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006688:	4641      	mov	r1, r8
 800668a:	4638      	mov	r0, r7
 800668c:	47c8      	blx	r9
 800668e:	3001      	adds	r0, #1
 8006690:	d01e      	beq.n	80066d0 <_printf_common+0xa4>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	6922      	ldr	r2, [r4, #16]
 8006696:	f003 0306 	and.w	r3, r3, #6
 800669a:	2b04      	cmp	r3, #4
 800669c:	bf02      	ittt	eq
 800669e:	68e5      	ldreq	r5, [r4, #12]
 80066a0:	6833      	ldreq	r3, [r6, #0]
 80066a2:	1aed      	subeq	r5, r5, r3
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	bf0c      	ite	eq
 80066a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ac:	2500      	movne	r5, #0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bfc4      	itt	gt
 80066b2:	1a9b      	subgt	r3, r3, r2
 80066b4:	18ed      	addgt	r5, r5, r3
 80066b6:	2600      	movs	r6, #0
 80066b8:	341a      	adds	r4, #26
 80066ba:	42b5      	cmp	r5, r6
 80066bc:	d11a      	bne.n	80066f4 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e008      	b.n	80066d4 <_printf_common+0xa8>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4652      	mov	r2, sl
 80066c6:	4641      	mov	r1, r8
 80066c8:	4638      	mov	r0, r7
 80066ca:	47c8      	blx	r9
 80066cc:	3001      	adds	r0, #1
 80066ce:	d103      	bne.n	80066d8 <_printf_common+0xac>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	3501      	adds	r5, #1
 80066da:	e7c6      	b.n	800666a <_printf_common+0x3e>
 80066dc:	18e1      	adds	r1, r4, r3
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	2030      	movs	r0, #48	@ 0x30
 80066e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066e6:	4422      	add	r2, r4
 80066e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066f0:	3302      	adds	r3, #2
 80066f2:	e7c7      	b.n	8006684 <_printf_common+0x58>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4622      	mov	r2, r4
 80066f8:	4641      	mov	r1, r8
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c8      	blx	r9
 80066fe:	3001      	adds	r0, #1
 8006700:	d0e6      	beq.n	80066d0 <_printf_common+0xa4>
 8006702:	3601      	adds	r6, #1
 8006704:	e7d9      	b.n	80066ba <_printf_common+0x8e>
	...

08006708 <_printf_i>:
 8006708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	7e0f      	ldrb	r7, [r1, #24]
 800670e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006710:	2f78      	cmp	r7, #120	@ 0x78
 8006712:	4691      	mov	r9, r2
 8006714:	4680      	mov	r8, r0
 8006716:	460c      	mov	r4, r1
 8006718:	469a      	mov	sl, r3
 800671a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800671e:	d807      	bhi.n	8006730 <_printf_i+0x28>
 8006720:	2f62      	cmp	r7, #98	@ 0x62
 8006722:	d80a      	bhi.n	800673a <_printf_i+0x32>
 8006724:	2f00      	cmp	r7, #0
 8006726:	f000 80d2 	beq.w	80068ce <_printf_i+0x1c6>
 800672a:	2f58      	cmp	r7, #88	@ 0x58
 800672c:	f000 80b9 	beq.w	80068a2 <_printf_i+0x19a>
 8006730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006738:	e03a      	b.n	80067b0 <_printf_i+0xa8>
 800673a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800673e:	2b15      	cmp	r3, #21
 8006740:	d8f6      	bhi.n	8006730 <_printf_i+0x28>
 8006742:	a101      	add	r1, pc, #4	@ (adr r1, 8006748 <_printf_i+0x40>)
 8006744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067b5 	.word	0x080067b5
 8006750:	08006731 	.word	0x08006731
 8006754:	08006731 	.word	0x08006731
 8006758:	08006731 	.word	0x08006731
 800675c:	08006731 	.word	0x08006731
 8006760:	080067b5 	.word	0x080067b5
 8006764:	08006731 	.word	0x08006731
 8006768:	08006731 	.word	0x08006731
 800676c:	08006731 	.word	0x08006731
 8006770:	08006731 	.word	0x08006731
 8006774:	080068b5 	.word	0x080068b5
 8006778:	080067df 	.word	0x080067df
 800677c:	0800686f 	.word	0x0800686f
 8006780:	08006731 	.word	0x08006731
 8006784:	08006731 	.word	0x08006731
 8006788:	080068d7 	.word	0x080068d7
 800678c:	08006731 	.word	0x08006731
 8006790:	080067df 	.word	0x080067df
 8006794:	08006731 	.word	0x08006731
 8006798:	08006731 	.word	0x08006731
 800679c:	08006877 	.word	0x08006877
 80067a0:	6833      	ldr	r3, [r6, #0]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6032      	str	r2, [r6, #0]
 80067a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067b0:	2301      	movs	r3, #1
 80067b2:	e09d      	b.n	80068f0 <_printf_i+0x1e8>
 80067b4:	6833      	ldr	r3, [r6, #0]
 80067b6:	6820      	ldr	r0, [r4, #0]
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	6031      	str	r1, [r6, #0]
 80067bc:	0606      	lsls	r6, r0, #24
 80067be:	d501      	bpl.n	80067c4 <_printf_i+0xbc>
 80067c0:	681d      	ldr	r5, [r3, #0]
 80067c2:	e003      	b.n	80067cc <_printf_i+0xc4>
 80067c4:	0645      	lsls	r5, r0, #25
 80067c6:	d5fb      	bpl.n	80067c0 <_printf_i+0xb8>
 80067c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	da03      	bge.n	80067d8 <_printf_i+0xd0>
 80067d0:	232d      	movs	r3, #45	@ 0x2d
 80067d2:	426d      	negs	r5, r5
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067d8:	4859      	ldr	r0, [pc, #356]	@ (8006940 <_printf_i+0x238>)
 80067da:	230a      	movs	r3, #10
 80067dc:	e011      	b.n	8006802 <_printf_i+0xfa>
 80067de:	6821      	ldr	r1, [r4, #0]
 80067e0:	6833      	ldr	r3, [r6, #0]
 80067e2:	0608      	lsls	r0, r1, #24
 80067e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067e8:	d402      	bmi.n	80067f0 <_printf_i+0xe8>
 80067ea:	0649      	lsls	r1, r1, #25
 80067ec:	bf48      	it	mi
 80067ee:	b2ad      	uxthmi	r5, r5
 80067f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067f2:	4853      	ldr	r0, [pc, #332]	@ (8006940 <_printf_i+0x238>)
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	bf14      	ite	ne
 80067f8:	230a      	movne	r3, #10
 80067fa:	2308      	moveq	r3, #8
 80067fc:	2100      	movs	r1, #0
 80067fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006802:	6866      	ldr	r6, [r4, #4]
 8006804:	60a6      	str	r6, [r4, #8]
 8006806:	2e00      	cmp	r6, #0
 8006808:	bfa2      	ittt	ge
 800680a:	6821      	ldrge	r1, [r4, #0]
 800680c:	f021 0104 	bicge.w	r1, r1, #4
 8006810:	6021      	strge	r1, [r4, #0]
 8006812:	b90d      	cbnz	r5, 8006818 <_printf_i+0x110>
 8006814:	2e00      	cmp	r6, #0
 8006816:	d04b      	beq.n	80068b0 <_printf_i+0x1a8>
 8006818:	4616      	mov	r6, r2
 800681a:	fbb5 f1f3 	udiv	r1, r5, r3
 800681e:	fb03 5711 	mls	r7, r3, r1, r5
 8006822:	5dc7      	ldrb	r7, [r0, r7]
 8006824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006828:	462f      	mov	r7, r5
 800682a:	42bb      	cmp	r3, r7
 800682c:	460d      	mov	r5, r1
 800682e:	d9f4      	bls.n	800681a <_printf_i+0x112>
 8006830:	2b08      	cmp	r3, #8
 8006832:	d10b      	bne.n	800684c <_printf_i+0x144>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	07df      	lsls	r7, r3, #31
 8006838:	d508      	bpl.n	800684c <_printf_i+0x144>
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	6861      	ldr	r1, [r4, #4]
 800683e:	4299      	cmp	r1, r3
 8006840:	bfde      	ittt	le
 8006842:	2330      	movle	r3, #48	@ 0x30
 8006844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800684c:	1b92      	subs	r2, r2, r6
 800684e:	6122      	str	r2, [r4, #16]
 8006850:	f8cd a000 	str.w	sl, [sp]
 8006854:	464b      	mov	r3, r9
 8006856:	aa03      	add	r2, sp, #12
 8006858:	4621      	mov	r1, r4
 800685a:	4640      	mov	r0, r8
 800685c:	f7ff fee6 	bl	800662c <_printf_common>
 8006860:	3001      	adds	r0, #1
 8006862:	d14a      	bne.n	80068fa <_printf_i+0x1f2>
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	b004      	add	sp, #16
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	f043 0320 	orr.w	r3, r3, #32
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	4833      	ldr	r0, [pc, #204]	@ (8006944 <_printf_i+0x23c>)
 8006878:	2778      	movs	r7, #120	@ 0x78
 800687a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	6831      	ldr	r1, [r6, #0]
 8006882:	061f      	lsls	r7, r3, #24
 8006884:	f851 5b04 	ldr.w	r5, [r1], #4
 8006888:	d402      	bmi.n	8006890 <_printf_i+0x188>
 800688a:	065f      	lsls	r7, r3, #25
 800688c:	bf48      	it	mi
 800688e:	b2ad      	uxthmi	r5, r5
 8006890:	6031      	str	r1, [r6, #0]
 8006892:	07d9      	lsls	r1, r3, #31
 8006894:	bf44      	itt	mi
 8006896:	f043 0320 	orrmi.w	r3, r3, #32
 800689a:	6023      	strmi	r3, [r4, #0]
 800689c:	b11d      	cbz	r5, 80068a6 <_printf_i+0x19e>
 800689e:	2310      	movs	r3, #16
 80068a0:	e7ac      	b.n	80067fc <_printf_i+0xf4>
 80068a2:	4827      	ldr	r0, [pc, #156]	@ (8006940 <_printf_i+0x238>)
 80068a4:	e7e9      	b.n	800687a <_printf_i+0x172>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	f023 0320 	bic.w	r3, r3, #32
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	e7f6      	b.n	800689e <_printf_i+0x196>
 80068b0:	4616      	mov	r6, r2
 80068b2:	e7bd      	b.n	8006830 <_printf_i+0x128>
 80068b4:	6833      	ldr	r3, [r6, #0]
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	6961      	ldr	r1, [r4, #20]
 80068ba:	1d18      	adds	r0, r3, #4
 80068bc:	6030      	str	r0, [r6, #0]
 80068be:	062e      	lsls	r6, r5, #24
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0x1c0>
 80068c4:	6019      	str	r1, [r3, #0]
 80068c6:	e002      	b.n	80068ce <_printf_i+0x1c6>
 80068c8:	0668      	lsls	r0, r5, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0x1bc>
 80068cc:	8019      	strh	r1, [r3, #0]
 80068ce:	2300      	movs	r3, #0
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	4616      	mov	r6, r2
 80068d4:	e7bc      	b.n	8006850 <_printf_i+0x148>
 80068d6:	6833      	ldr	r3, [r6, #0]
 80068d8:	1d1a      	adds	r2, r3, #4
 80068da:	6032      	str	r2, [r6, #0]
 80068dc:	681e      	ldr	r6, [r3, #0]
 80068de:	6862      	ldr	r2, [r4, #4]
 80068e0:	2100      	movs	r1, #0
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7f9 fd04 	bl	80002f0 <memchr>
 80068e8:	b108      	cbz	r0, 80068ee <_printf_i+0x1e6>
 80068ea:	1b80      	subs	r0, r0, r6
 80068ec:	6060      	str	r0, [r4, #4]
 80068ee:	6863      	ldr	r3, [r4, #4]
 80068f0:	6123      	str	r3, [r4, #16]
 80068f2:	2300      	movs	r3, #0
 80068f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f8:	e7aa      	b.n	8006850 <_printf_i+0x148>
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	4632      	mov	r2, r6
 80068fe:	4649      	mov	r1, r9
 8006900:	4640      	mov	r0, r8
 8006902:	47d0      	blx	sl
 8006904:	3001      	adds	r0, #1
 8006906:	d0ad      	beq.n	8006864 <_printf_i+0x15c>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	079b      	lsls	r3, r3, #30
 800690c:	d413      	bmi.n	8006936 <_printf_i+0x22e>
 800690e:	68e0      	ldr	r0, [r4, #12]
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	4298      	cmp	r0, r3
 8006914:	bfb8      	it	lt
 8006916:	4618      	movlt	r0, r3
 8006918:	e7a6      	b.n	8006868 <_printf_i+0x160>
 800691a:	2301      	movs	r3, #1
 800691c:	4632      	mov	r2, r6
 800691e:	4649      	mov	r1, r9
 8006920:	4640      	mov	r0, r8
 8006922:	47d0      	blx	sl
 8006924:	3001      	adds	r0, #1
 8006926:	d09d      	beq.n	8006864 <_printf_i+0x15c>
 8006928:	3501      	adds	r5, #1
 800692a:	68e3      	ldr	r3, [r4, #12]
 800692c:	9903      	ldr	r1, [sp, #12]
 800692e:	1a5b      	subs	r3, r3, r1
 8006930:	42ab      	cmp	r3, r5
 8006932:	dcf2      	bgt.n	800691a <_printf_i+0x212>
 8006934:	e7eb      	b.n	800690e <_printf_i+0x206>
 8006936:	2500      	movs	r5, #0
 8006938:	f104 0619 	add.w	r6, r4, #25
 800693c:	e7f5      	b.n	800692a <_printf_i+0x222>
 800693e:	bf00      	nop
 8006940:	08006ad5 	.word	0x08006ad5
 8006944:	08006ae6 	.word	0x08006ae6

08006948 <memmove>:
 8006948:	4288      	cmp	r0, r1
 800694a:	b510      	push	{r4, lr}
 800694c:	eb01 0402 	add.w	r4, r1, r2
 8006950:	d902      	bls.n	8006958 <memmove+0x10>
 8006952:	4284      	cmp	r4, r0
 8006954:	4623      	mov	r3, r4
 8006956:	d807      	bhi.n	8006968 <memmove+0x20>
 8006958:	1e43      	subs	r3, r0, #1
 800695a:	42a1      	cmp	r1, r4
 800695c:	d008      	beq.n	8006970 <memmove+0x28>
 800695e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006966:	e7f8      	b.n	800695a <memmove+0x12>
 8006968:	4402      	add	r2, r0
 800696a:	4601      	mov	r1, r0
 800696c:	428a      	cmp	r2, r1
 800696e:	d100      	bne.n	8006972 <memmove+0x2a>
 8006970:	bd10      	pop	{r4, pc}
 8006972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800697a:	e7f7      	b.n	800696c <memmove+0x24>

0800697c <_sbrk_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d06      	ldr	r5, [pc, #24]	@ (8006998 <_sbrk_r+0x1c>)
 8006980:	2300      	movs	r3, #0
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	f7fa f91c 	bl	8000bc4 <_sbrk>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_sbrk_r+0x1a>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_sbrk_r+0x1a>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	2400074c 	.word	0x2400074c

0800699c <memcpy>:
 800699c:	440a      	add	r2, r1
 800699e:	4291      	cmp	r1, r2
 80069a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a4:	d100      	bne.n	80069a8 <memcpy+0xc>
 80069a6:	4770      	bx	lr
 80069a8:	b510      	push	{r4, lr}
 80069aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069b2:	4291      	cmp	r1, r2
 80069b4:	d1f9      	bne.n	80069aa <memcpy+0xe>
 80069b6:	bd10      	pop	{r4, pc}

080069b8 <_realloc_r>:
 80069b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	4680      	mov	r8, r0
 80069be:	4615      	mov	r5, r2
 80069c0:	460c      	mov	r4, r1
 80069c2:	b921      	cbnz	r1, 80069ce <_realloc_r+0x16>
 80069c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c8:	4611      	mov	r1, r2
 80069ca:	f7ff bc4b 	b.w	8006264 <_malloc_r>
 80069ce:	b92a      	cbnz	r2, 80069dc <_realloc_r+0x24>
 80069d0:	f7ff fbdc 	bl	800618c <_free_r>
 80069d4:	2400      	movs	r4, #0
 80069d6:	4620      	mov	r0, r4
 80069d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069dc:	f000 f81a 	bl	8006a14 <_malloc_usable_size_r>
 80069e0:	4285      	cmp	r5, r0
 80069e2:	4606      	mov	r6, r0
 80069e4:	d802      	bhi.n	80069ec <_realloc_r+0x34>
 80069e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069ea:	d8f4      	bhi.n	80069d6 <_realloc_r+0x1e>
 80069ec:	4629      	mov	r1, r5
 80069ee:	4640      	mov	r0, r8
 80069f0:	f7ff fc38 	bl	8006264 <_malloc_r>
 80069f4:	4607      	mov	r7, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d0ec      	beq.n	80069d4 <_realloc_r+0x1c>
 80069fa:	42b5      	cmp	r5, r6
 80069fc:	462a      	mov	r2, r5
 80069fe:	4621      	mov	r1, r4
 8006a00:	bf28      	it	cs
 8006a02:	4632      	movcs	r2, r6
 8006a04:	f7ff ffca 	bl	800699c <memcpy>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f7ff fbbe 	bl	800618c <_free_r>
 8006a10:	463c      	mov	r4, r7
 8006a12:	e7e0      	b.n	80069d6 <_realloc_r+0x1e>

08006a14 <_malloc_usable_size_r>:
 8006a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a18:	1f18      	subs	r0, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfbc      	itt	lt
 8006a1e:	580b      	ldrlt	r3, [r1, r0]
 8006a20:	18c0      	addlt	r0, r0, r3
 8006a22:	4770      	bx	lr

08006a24 <_init>:
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	bf00      	nop
 8006a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2a:	bc08      	pop	{r3}
 8006a2c:	469e      	mov	lr, r3
 8006a2e:	4770      	bx	lr

08006a30 <_fini>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr
