
BlueToothSpeaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c0c  08006c0c  00007c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c14  08006c14  00007c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c18  08006c18  00007c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08006c1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f4  24000078  08006c94  00008078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400076c  08006c94  0000876c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014f02  00000000  00000000  000080a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c1f  00000000  00000000  0001cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e08  00000000  00000000  0001fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ab8  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003746e  00000000  00000000  00021488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014885  00000000  00000000  000588f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a622  00000000  00000000  0006d17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c779d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003edc  00000000  00000000  001c77e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001cb6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006b3c 	.word	0x08006b3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08006b3c 	.word	0x08006b3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <MX_GPIO_Init+0xf4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <MX_GPIO_Init+0xf4>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a26      	ldr	r2, [pc, #152]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000774 <MX_GPIO_Init+0xf4>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_GPIO_Init+0xf4>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000714:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_GPIO_Init+0xf8>)
 8000726:	f000 ff6f 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 800072a:	f248 0360 	movw	r3, #32864	@ 0x8060
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480f      	ldr	r0, [pc, #60]	@ (800077c <MX_GPIO_Init+0xfc>)
 8000740:	f000 ff62 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_GPIO_Init+0x100>)
 8000758:	f000 ff56 	bl	8001608 <HAL_GPIO_Init>



/* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	2028      	movs	r0, #40	@ 0x28
 8000762:	f000 fea4 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000766:	2028      	movs	r0, #40	@ 0x28
 8000768:	f000 febb 	bl	80014e2 <HAL_NVIC_EnableIRQ>
/* USER CODE END 2 */
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58024400 	.word	0x58024400
 8000778:	58020800 	.word	0x58020800
 800077c:	58020000 	.word	0x58020000
 8000780:	58020400 	.word	0x58020400

08000784 <InputOutputPinAssignment>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
void InputOutputPinAssignment(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = activePin.pin;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <InputOutputPinAssignment+0x4c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
	if (m18InProcess){
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <InputOutputPinAssignment+0x50>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <InputOutputPinAssignment+0x2c>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	e003      	b.n	80007b8 <InputOutputPinAssignment+0x34>

	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
	}
	HAL_GPIO_Init(activePin.port, &GPIO_InitStruct);
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <InputOutputPinAssignment+0x4c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1d3a      	adds	r2, r7, #4
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ff21 	bl	8001608 <HAL_GPIO_Init>


}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000000 	.word	0x24000000
 80007d4:	240000a1 	.word	0x240000a1

080007d8 <m18TaskTrigger>:
void m18TaskTrigger(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	InputOutputPinAssignment();
 80007dc:	f7ff ffd2 	bl	8000784 <InputOutputPinAssignment>
	HAL_GPIO_WritePin(activePin.port,activePin.pin,GPIO_PIN_RESET);
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <m18TaskTrigger+0x30>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <m18TaskTrigger+0x30>)
 80007e6:	6852      	ldr	r2, [r2, #4]
 80007e8:	b291      	uxth	r1, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f8d3 	bl	8001998 <HAL_GPIO_WritePin>
	m18InProcess = true;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <m18TaskTrigger+0x34>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	m18StartTime = HAL_GetTick();
 80007f8:	f000 fd42 	bl	8001280 <HAL_GetTick>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a04      	ldr	r2, [pc, #16]	@ (8000810 <m18TaskTrigger+0x38>)
 8000800:	6013      	str	r3, [r2, #0]
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	24000000 	.word	0x24000000
 800080c:	240000a1 	.word	0x240000a1
 8000810:	2400009c 	.word	0x2400009c

08000814 <m18TaskCompletionCheck>:

void m18TaskCompletionCheck(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b09a      	sub	sp, #104	@ 0x68
 8000818:	af00      	add	r7, sp, #0
	char buff[50];

	if (HAL_GetTick()-m18StartTime>M18_DELAY_MS){
 800081a:	f000 fd31 	bl	8001280 <HAL_GetTick>
 800081e:	4602      	mov	r2, r0
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <m18TaskCompletionCheck+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <m18TaskCompletionCheck+0x44>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	d90e      	bls.n	800084c <m18TaskCompletionCheck+0x38>
		char buff2[50];
		HAL_GPIO_WritePin(activePin.port, activePin.pin,GPIO_PIN_SET);
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <m18TaskCompletionCheck+0x48>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <m18TaskCompletionCheck+0x48>)
 8000834:	6852      	ldr	r2, [r2, #4]
 8000836:	b291      	uxth	r1, r2
 8000838:	2201      	movs	r2, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f8ac 	bl	8001998 <HAL_GPIO_WritePin>
		InputOutputPinAssignment();
 8000840:	f7ff ffa0 	bl	8000784 <InputOutputPinAssignment>
		m18InProcess = false;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <m18TaskCompletionCheck+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	}
	return;
 800084a:	bf00      	nop
 800084c:	bf00      	nop

}
 800084e:	3768      	adds	r7, #104	@ 0x68
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2400009c 	.word	0x2400009c
 8000858:	2400000c 	.word	0x2400000c
 800085c:	24000000 	.word	0x24000000
 8000860:	240000a1 	.word	0x240000a1

08000864 <stateUpdate>:


void stateUpdate(inputState previousState){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	if (previousState!= activeStatePtr->currentState){
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <stateUpdate+0xa8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	429a      	cmp	r2, r3
 800087a:	d02f      	beq.n	80008dc <stateUpdate+0x78>
		switch(activeStatePtr->currentState){
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <stateUpdate+0xa8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3b01      	subs	r3, #1
 8000886:	2b03      	cmp	r3, #3
 8000888:	d827      	bhi.n	80008da <stateUpdate+0x76>
 800088a:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <stateUpdate+0x2c>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	080008a1 	.word	0x080008a1
 8000894:	080008af 	.word	0x080008af
 8000898:	080008bf 	.word	0x080008bf
 800089c:	080008cd 	.word	0x080008cd
			case STATE_PAUSE_PLAY:
				activePin.port = TRACK_OPTIONS_PORT;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <stateUpdate+0xac>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <stateUpdate+0xb0>)
 80008a4:	601a      	str	r2, [r3, #0]
				activePin.pin = PAUSE_PLAY_PIN;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <stateUpdate+0xac>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	605a      	str	r2, [r3, #4]
				break;
 80008ac:	e016      	b.n	80008dc <stateUpdate+0x78>
			case STATE_PREV_TRACK:
				activePin.port = TRACK_OPTIONS_PORT;
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <stateUpdate+0xac>)
 80008b0:	4a18      	ldr	r2, [pc, #96]	@ (8000914 <stateUpdate+0xb0>)
 80008b2:	601a      	str	r2, [r3, #0]
				activePin.pin = PREV_TRACK_PIN;
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <stateUpdate+0xac>)
 80008b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008ba:	605a      	str	r2, [r3, #4]
				break;
 80008bc:	e00e      	b.n	80008dc <stateUpdate+0x78>
			case STATE_NEXT_TRACK:
				activePin.port = TRACK_OPTIONS_PORT;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <stateUpdate+0xac>)
 80008c0:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <stateUpdate+0xb0>)
 80008c2:	601a      	str	r2, [r3, #0]
				activePin.pin = NEXT_TRACK_PIN;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <stateUpdate+0xac>)
 80008c6:	2240      	movs	r2, #64	@ 0x40
 80008c8:	605a      	str	r2, [r3, #4]
				break;
 80008ca:	e007      	b.n	80008dc <stateUpdate+0x78>
			case STATE_POWER_OFF_ON:
				activePin.port = M18_POWER_PORT;
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <stateUpdate+0xac>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <stateUpdate+0xb4>)
 80008d0:	601a      	str	r2, [r3, #0]
				activePin.pin = M18_POWER_PIN;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <stateUpdate+0xac>)
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	605a      	str	r2, [r3, #4]
				break;
 80008d8:	e000      	b.n	80008dc <stateUpdate+0x78>
			default:
				break;
 80008da:	bf00      	nop
		}
	}

	if (m18InProcess){
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <stateUpdate+0xb8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00d      	beq.n	8000900 <stateUpdate+0x9c>

		m18TaskCompletionCheck();
 80008e4:	f7ff ff96 	bl	8000814 <m18TaskCompletionCheck>
		if(m18InProcess==false){
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <stateUpdate+0xb8>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	f083 0301 	eor.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <stateUpdate+0xa0>
			activeStatePtr->currentState = STATE_IDLE;
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <stateUpdate+0xa8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		}
	}else{
		m18TaskTrigger();
	}

}
 80008fe:	e001      	b.n	8000904 <stateUpdate+0xa0>
		m18TaskTrigger();
 8000900:	f7ff ff6a 	bl	80007d8 <m18TaskTrigger>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	24000008 	.word	0x24000008
 8000910:	24000000 	.word	0x24000000
 8000914:	58020000 	.word	0x58020000
 8000918:	58020400 	.word	0x58020400
 800091c:	240000a1 	.word	0x240000a1

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000926:	f000 f89d 	bl	8000a64 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fc23 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f82d 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f7ff fea5 	bl	8000680 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000936:	f000 fa8f 	bl	8000e58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800093a:	f000 fb43 	bl	8000fc4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  const char startMsg[] = "mainStart\r\n";
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <main+0x5c>)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	ca07      	ldmia	r2, {r0, r1, r2}
 8000944:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart3, &startMsg, sizeof(startMsg)-1,1000);
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094e:	220b      	movs	r2, #11
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <main+0x60>)
 8000952:	f004 f831 	bl	80049b8 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/* if action isnt idle then run m18_function
 */
	  if (activeStatePtr->currentState!= STATE_IDLE){
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <main+0x64>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <main+0x4c>
		  stateUpdate(previousState);
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <main+0x68>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff7c 	bl	8000864 <stateUpdate>

	  }
	  previousState = activeStatePtr->currentState;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <main+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <main+0x68>)
 8000976:	701a      	strb	r2, [r3, #0]
	  if (activeStatePtr->currentState!= STATE_IDLE){
 8000978:	e7ed      	b.n	8000956 <main+0x36>
 800097a:	bf00      	nop
 800097c:	08006b54 	.word	0x08006b54
 8000980:	240000a8 	.word	0x240000a8
 8000984:	24000008 	.word	0x24000008
 8000988:	240000a0 	.word	0x240000a0

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	@ 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	224c      	movs	r2, #76	@ 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fc4e 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 fc48 	bl	800623c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ac:	2002      	movs	r0, #2
 80009ae:	f001 f957 	bl	8001c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemClock_Config+0xd0>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	4a28      	ldr	r2, [pc, #160]	@ (8000a5c <SystemClock_Config+0xd0>)
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemClock_Config+0xd0>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <SystemClock_Config+0xd4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <SystemClock_Config+0xd4>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <SystemClock_Config+0xd4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e8:	bf00      	nop
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <SystemClock_Config+0xd4>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f6:	d1f8      	bne.n	80009ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80009f8:	2322      	movs	r3, #34	@ 0x22
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a00:	2340      	movs	r3, #64	@ 0x40
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 f96f 	bl	8001cf4 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a1c:	f000 f84e 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	233f      	movs	r3, #63	@ 0x3f
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a34:	2340      	movs	r3, #64	@ 0x40
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2101      	movs	r1, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fdaf 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a50:	f000 f834 	bl	8000abc <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3770      	adds	r7, #112	@ 0x70
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800

08000a64 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a76:	f000 fd4f 	bl	8001518 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a86:	231f      	movs	r3, #31
 8000a88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a8a:	2387      	movs	r3, #135	@ 0x87
 8000a8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fd6d 	bl	8001588 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f000 fd4a 	bl	8001548 <HAL_MPU_Enable>

}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <Error_Handler+0x8>

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad4:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x30>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x30>)
 8000ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	58024400 	.word	0x58024400

08000afc <updateState>:
uint16_t MAX_UART_DELAY = 1000;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void updateState(uint32_t duration_ms){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if(duration_ms < PAUSE_PLAY_LIMIT_MS){
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <updateState+0x60>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d204      	bcs.n	8000b1a <updateState+0x1e>
		activeStatePtr->currentState = STATE_PAUSE_PLAY;
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <updateState+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
		}
	else{
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
		}

}
 8000b18:	e019      	b.n	8000b4e <updateState+0x52>
	else if (duration_ms < PREV_TRACK_LIMIT_MS){
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <updateState+0x68>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d204      	bcs.n	8000b30 <updateState+0x34>
			activeStatePtr->currentState = STATE_PREV_TRACK;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <updateState+0x64>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	701a      	strb	r2, [r3, #0]
}
 8000b2e:	e00e      	b.n	8000b4e <updateState+0x52>
	else if(duration_ms < NEXT_TRACK_LIMIT_MS){
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <updateState+0x6c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d204      	bcs.n	8000b46 <updateState+0x4a>
			activeStatePtr->currentState = STATE_NEXT_TRACK;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <updateState+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2203      	movs	r2, #3
 8000b42:	701a      	strb	r2, [r3, #0]
}
 8000b44:	e003      	b.n	8000b4e <updateState+0x52>
			activeStatePtr->currentState = STATE_POWER_OFF_ON;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <updateState+0x64>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	701a      	strb	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	24000010 	.word	0x24000010
 8000b60:	24000008 	.word	0x24000008
 8000b64:	24000012 	.word	0x24000012
 8000b68:	24000014 	.word	0x24000014

08000b6c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b09b      	sub	sp, #108	@ 0x6c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
	if (activeStatePtr->currentState!= STATE_IDLE){
 8000b76:	4b36      	ldr	r3, [pc, #216]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d161      	bne.n	8000c46 <HAL_GPIO_EXTI_Callback+0xda>
		return;

	}
	uint8_t msg[] = "Interrupt\r\n";
 8000b82:	4a34      	ldr	r2, [pc, #208]	@ (8000c54 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b84:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, &msg, strlen(msg),MAX_UART_DELAY);
 8000b8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fba4 	bl	80002e0 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000ba4:	482d      	ldr	r0, [pc, #180]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0xf0>)
 8000ba6:	f003 ff07 	bl	80049b8 <HAL_UART_Transmit>
	if (GPIO_Pin == USER_BUTTON_PIN){
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bb0:	d14a      	bne.n	8000c48 <HAL_GPIO_EXTI_Callback+0xdc>
		if (HAL_GPIO_ReadPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == GPIO_PIN_SET){
 8000bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb6:	482a      	ldr	r0, [pc, #168]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000bb8:	f000 fed6 	bl	8001968 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d11d      	bne.n	8000bfe <HAL_GPIO_EXTI_Callback+0x92>
			char buff[50];
			activeStatePtr->lastPress = HAL_GetTick();
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000bc4:	681c      	ldr	r4, [r3, #0]
 8000bc6:	f000 fb5b 	bl	8001280 <HAL_GetTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6063      	str	r3, [r4, #4]
			sprintf(buff, "PressTime: %d ms \r\n", activeStatePtr->lastPress);
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4922      	ldr	r1, [pc, #136]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f005 fb0e 	bl	80061fc <siprintf>
			HAL_UART_Transmit(&huart3, buff, strlen(buff), MAX_UART_DELAY);
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb7b 	bl	80002e0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0xec>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	f107 0108 	add.w	r1, r7, #8
 8000bf6:	4819      	ldr	r0, [pc, #100]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0xf0>)
 8000bf8:	f003 fede 	bl	80049b8 <HAL_UART_Transmit>
 8000bfc:	e024      	b.n	8000c48 <HAL_GPIO_EXTI_Callback+0xdc>

		}else{
			char buff2[80];
			uint32_t duration_ms = HAL_GetTick()-activeStatePtr->lastPress;
 8000bfe:	f000 fb3f 	bl	8001280 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	667b      	str	r3, [r7, #100]	@ 0x64
			updateState(duration_ms);
 8000c0e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c10:	f7ff ff74 	bl	8000afc <updateState>
			sprintf(buff2, "Duration: %d ms State: %d \r\n",duration_ms, activeStatePtr->currentState);
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f107 0008 	add.w	r0, r7, #8
 8000c20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c22:	4911      	ldr	r1, [pc, #68]	@ (8000c68 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c24:	f005 faea 	bl	80061fc <siprintf>
			HAL_UART_Transmit(&huart3, buff2, strlen(buff2), MAX_UART_DELAY);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fb57 	bl	80002e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0xec>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	f107 0108 	add.w	r1, r7, #8
 8000c3e:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c40:	f003 feba 	bl	80049b8 <HAL_UART_Transmit>
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_EXTI_Callback+0xdc>
		return;
 8000c46:	bf00      	nop
			}
		}

	}
 8000c48:	376c      	adds	r7, #108	@ 0x6c
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	24000008 	.word	0x24000008
 8000c54:	08006b94 	.word	0x08006b94
 8000c58:	24000016 	.word	0x24000016
 8000c5c:	240000a8 	.word	0x240000a8
 8000c60:	58020800 	.word	0x58020800
 8000c64:	08006b60 	.word	0x08006b60
 8000c68:	08006b74 	.word	0x08006b74

08000c6c <EXTI15_10_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI15_10_IRQHandler(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);  // Calls HAL EXTI handler for PC13
 8000c70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c74:	f000 fea9 	bl	80019ca <HAL_GPIO_EXTI_IRQHandler>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 fac1 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f005 fa9e 	bl	800624c <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24080000 	.word	0x24080000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	240000a4 	.word	0x240000a4
 8000d44:	24000770 	.word	0x24000770

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <SystemInit+0xe4>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a36      	ldr	r2, [pc, #216]	@ (8000e2c <SystemInit+0xe4>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5c:	4b34      	ldr	r3, [pc, #208]	@ (8000e30 <SystemInit+0xe8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d807      	bhi.n	8000d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d68:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <SystemInit+0xe8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 030f 	bic.w	r3, r3, #15
 8000d70:	4a2f      	ldr	r2, [pc, #188]	@ (8000e30 <SystemInit+0xe8>)
 8000d72:	f043 0307 	orr.w	r3, r3, #7
 8000d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	@ (8000e34 <SystemInit+0xec>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000e34 <SystemInit+0xec>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <SystemInit+0xec>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <SystemInit+0xec>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4929      	ldr	r1, [pc, #164]	@ (8000e34 <SystemInit+0xec>)
 8000d90:	4b29      	ldr	r3, [pc, #164]	@ (8000e38 <SystemInit+0xf0>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <SystemInit+0xe8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da2:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <SystemInit+0xe8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 030f 	bic.w	r3, r3, #15
 8000daa:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <SystemInit+0xe8>)
 8000dac:	f043 0307 	orr.w	r3, r3, #7
 8000db0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000db2:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <SystemInit+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <SystemInit+0xec>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <SystemInit+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <SystemInit+0xec>)
 8000dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e3c <SystemInit+0xf4>)
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <SystemInit+0xec>)
 8000dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e40 <SystemInit+0xf8>)
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <SystemInit+0xec>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <SystemInit+0xfc>)
 8000dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <SystemInit+0xec>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <SystemInit+0xec>)
 8000dde:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <SystemInit+0xfc>)
 8000de0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <SystemInit+0xec>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <SystemInit+0xec>)
 8000dea:	4a16      	ldr	r2, [pc, #88]	@ (8000e44 <SystemInit+0xfc>)
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <SystemInit+0xec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <SystemInit+0xec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e34 <SystemInit+0xec>)
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <SystemInit+0xec>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <SystemInit+0x100>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <SystemInit+0x104>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e12:	d202      	bcs.n	8000e1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <SystemInit+0x108>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <SystemInit+0x10c>)
 8000e1c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	52002000 	.word	0x52002000
 8000e34:	58024400 	.word	0x58024400
 8000e38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e3c:	02020200 	.word	0x02020200
 8000e40:	01ff0000 	.word	0x01ff0000
 8000e44:	01010280 	.word	0x01010280
 8000e48:	5c001000 	.word	0x5c001000
 8000e4c:	ffff0000 	.word	0xffff0000
 8000e50:	51008108 	.word	0x51008108
 8000e54:	52004000 	.word	0x52004000

08000e58 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e5e:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <MX_USART3_UART_Init+0x94>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea0:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000ea2:	f003 fd39 	bl	8004918 <HAL_UART_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000eac:	f7ff fe06 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000eb4:	f004 fdcf 	bl	8005a56 <HAL_UARTEx_SetTxFifoThreshold>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ebe:	f7ff fdfd 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000ec6:	f004 fe04 	bl	8005ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed0:	f7ff fdf4 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <MX_USART3_UART_Init+0x90>)
 8000ed6:	f004 fd85 	bl	80059e4 <HAL_UARTEx_DisableFifoMode>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f7ff fdec 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	240000a8 	.word	0x240000a8
 8000eec:	40004800 	.word	0x40004800

08000ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	22c0      	movs	r2, #192	@ 0xc0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 f993 	bl	800623c <memset>
  if(uartHandle->Instance==USART3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <HAL_UART_MspInit+0xc8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d146      	bne.n	8000fae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f20:	f04f 0202 	mov.w	r2, #2
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fec2 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f42:	f7ff fdbb 	bl	8000abc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_UART_MspInit+0xcc>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <HAL_UART_MspInit+0xcc>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_UART_MspInit+0xcc>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_UART_MspInit+0xcc>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <HAL_UART_MspInit+0xcc>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <HAL_UART_MspInit+0xcc>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <HAL_UART_MspInit+0xd0>)
 8000faa:	f000 fb2d 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	37e8      	adds	r7, #232	@ 0xe8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020c00 	.word	0x58020c00

08000fc4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd0:	2209      	movs	r2, #9
 8000fd2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001000:	2201      	movs	r2, #1
 8001002:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001006:	2200      	movs	r2, #0
 8001008:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800100c:	f000 fcf7 	bl	80019fe <HAL_PCD_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001016:	f7ff fd51 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2400013c 	.word	0x2400013c
 8001024:	40080000 	.word	0x40080000

08001028 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ba      	sub	sp, #232	@ 0xe8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	22c0      	movs	r2, #192	@ 0xc0
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f005 f8f7 	bl	800623c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a30      	ldr	r2, [pc, #192]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d159      	bne.n	800110c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001058:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001064:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fe25 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800107c:	f7ff fd1e 	bl	8000abc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001080:	f000 fe28 	bl	8001cd4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a23      	ldr	r2, [pc, #140]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010a2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80010a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010bc:	230a      	movs	r3, #10
 80010be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4814      	ldr	r0, [pc, #80]	@ (800111c <HAL_PCD_MspInit+0xf4>)
 80010ca:	f000 fa9d 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <HAL_PCD_MspInit+0xf4>)
 80010ea:	f000 fa8d 	bl	8001608 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 80010f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010f4:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 80010f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 8001100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	37e8      	adds	r7, #232	@ 0xe8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40080000 	.word	0x40080000
 8001118:	58024400 	.word	0x58024400
 800111c:	58020000 	.word	0x58020000

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff fe10 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	@ (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f005 f883 	bl	8006258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fbe5 	bl	8000920 <main>
  bx  lr
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800115c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001160:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001164:	08006c1c 	.word	0x08006c1c
  ldr r2, =_sbss
 8001168:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800116c:	2400076c 	.word	0x2400076c

08001170 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC3_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f98c 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001180:	f001 fbc8 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8001184:	4602      	mov	r2, r0
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_Init+0x68>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	4913      	ldr	r1, [pc, #76]	@ (80011e0 <HAL_Init+0x6c>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <HAL_Init+0x68>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_Init+0x6c>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_Init+0x70>)
 80011b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b8:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <HAL_Init+0x74>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f814 	bl	80011ec <HAL_InitTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e002      	b.n	80011d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ce:	f7ff fc7b 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58024400 	.word	0x58024400
 80011e0:	08006ba0 	.word	0x08006ba0
 80011e4:	2400001c 	.word	0x2400001c
 80011e8:	24000018 	.word	0x24000018

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e021      	b.n	8001244 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_InitTick+0x64>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f971 	bl	80014fe <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f93b 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_InitTick+0x68>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	24000024 	.word	0x24000024
 8001250:	24000018 	.word	0x24000018
 8001254:	24000020 	.word	0x24000020

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	24000024 	.word	0x24000024
 800127c:	24000620 	.word	0x24000620

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	24000620 	.word	0x24000620

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24000024 	.word	0x24000024

080012e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetREVID+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0c1b      	lsrs	r3, r3, #16
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	5c001000 	.word	0x5c001000

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	4313      	orrs	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	05fa0000 	.word	0x05fa0000

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	@ (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff40 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff33 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa4 	bl	8001454 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800151c:	f3bf 8f5f 	dmb	sy
}
 8001520:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_MPU_Disable+0x28>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <HAL_MPU_Disable+0x28>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_MPU_Disable+0x2c>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	e000ed90 	.word	0xe000ed90

08001548 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_MPU_Enable+0x38>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_MPU_Enable+0x3c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_MPU_Enable+0x3c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156c:	f3bf 8f6f 	isb	sy
}
 8001570:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed90 	.word	0xe000ed90
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785a      	ldrb	r2, [r3, #1]
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 8001596:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015a4:	4a17      	ldr	r2, [pc, #92]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7adb      	ldrb	r3, [r3, #11]
 80015b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7a9b      	ldrb	r3, [r3, #10]
 80015be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7b5b      	ldrb	r3, [r3, #13]
 80015c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7b9b      	ldrb	r3, [r3, #14]
 80015ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7bdb      	ldrb	r3, [r3, #15]
 80015d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7a5b      	ldrb	r3, [r3, #9]
 80015de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7a1b      	ldrb	r3, [r3, #8]
 80015e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f4:	6113      	str	r3, [r2, #16]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed90 	.word	0xe000ed90

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001616:	4b89      	ldr	r3, [pc, #548]	@ (800183c <HAL_GPIO_Init+0x234>)
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800161a:	e194      	b.n	8001946 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8186 	beq.w	8001940 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d005      	beq.n	800164c <HAL_GPIO_Init+0x44>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d130      	bne.n	80016ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001682:	2201      	movs	r2, #1
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0201 	and.w	r2, r3, #1
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d017      	beq.n	80016ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d123      	bne.n	800173e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	69b9      	ldr	r1, [r7, #24]
 800173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80e0 	beq.w	8001940 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_GPIO_Init+0x238>)
 8001782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001786:	4a2e      	ldr	r2, [pc, #184]	@ (8001840 <HAL_GPIO_Init+0x238>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_GPIO_Init+0x238>)
 8001792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179e:	4a29      	ldr	r2, [pc, #164]	@ (8001844 <HAL_GPIO_Init+0x23c>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a20      	ldr	r2, [pc, #128]	@ (8001848 <HAL_GPIO_Init+0x240>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d052      	beq.n	8001870 <HAL_GPIO_Init+0x268>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1f      	ldr	r2, [pc, #124]	@ (800184c <HAL_GPIO_Init+0x244>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d031      	beq.n	8001836 <HAL_GPIO_Init+0x22e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <HAL_GPIO_Init+0x248>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d02b      	beq.n	8001832 <HAL_GPIO_Init+0x22a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001854 <HAL_GPIO_Init+0x24c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d025      	beq.n	800182e <HAL_GPIO_Init+0x226>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <HAL_GPIO_Init+0x250>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01f      	beq.n	800182a <HAL_GPIO_Init+0x222>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1b      	ldr	r2, [pc, #108]	@ (800185c <HAL_GPIO_Init+0x254>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x21e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001860 <HAL_GPIO_Init+0x258>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x21a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <HAL_GPIO_Init+0x25c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x216>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a18      	ldr	r2, [pc, #96]	@ (8001868 <HAL_GPIO_Init+0x260>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x212>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a17      	ldr	r2, [pc, #92]	@ (800186c <HAL_GPIO_Init+0x264>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x20e>
 8001812:	2309      	movs	r3, #9
 8001814:	e02d      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 8001816:	230a      	movs	r3, #10
 8001818:	e02b      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 800181a:	2308      	movs	r3, #8
 800181c:	e029      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 800181e:	2307      	movs	r3, #7
 8001820:	e027      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 8001822:	2306      	movs	r3, #6
 8001824:	e025      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 8001826:	2305      	movs	r3, #5
 8001828:	e023      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 800182a:	2304      	movs	r3, #4
 800182c:	e021      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 800182e:	2303      	movs	r3, #3
 8001830:	e01f      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 8001832:	2302      	movs	r3, #2
 8001834:	e01d      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 8001836:	2301      	movs	r3, #1
 8001838:	e01b      	b.n	8001872 <HAL_GPIO_Init+0x26a>
 800183a:	bf00      	nop
 800183c:	58000080 	.word	0x58000080
 8001840:	58024400 	.word	0x58024400
 8001844:	58000400 	.word	0x58000400
 8001848:	58020000 	.word	0x58020000
 800184c:	58020400 	.word	0x58020400
 8001850:	58020800 	.word	0x58020800
 8001854:	58020c00 	.word	0x58020c00
 8001858:	58021000 	.word	0x58021000
 800185c:	58021400 	.word	0x58021400
 8001860:	58021800 	.word	0x58021800
 8001864:	58021c00 	.word	0x58021c00
 8001868:	58022000 	.word	0x58022000
 800186c:	58022400 	.word	0x58022400
 8001870:	2300      	movs	r3, #0
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001882:	4938      	ldr	r1, [pc, #224]	@ (8001964 <HAL_GPIO_Init+0x35c>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3301      	adds	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	f47f ae63 	bne.w	800161c <HAL_GPIO_Init+0x14>
  }
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3724      	adds	r7, #36	@ 0x24
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	58000400 	.word	0x58000400

08001968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e001      	b.n	800198a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f8bb 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af02      	add	r7, sp, #8
 8001a04:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0fe      	b.n	8001c0e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d106      	bne.n	8001a2a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff faff 	bl	8001028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 f94a 	bl	8005cd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7c1a      	ldrb	r2, [r3, #16]
 8001a44:	f88d 2000 	strb.w	r2, [sp]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4c:	f004 f8ce 	bl	8005bec <USB_CoreInit>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0d5      	b.n	8001c0e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f004 f942 	bl	8005cf2 <USB_SetCurrentMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0c6      	b.n	8001c0e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e04a      	b.n	8001b1c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3315      	adds	r3, #21
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3314      	adds	r3, #20
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	332e      	adds	r3, #46	@ 0x2e
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	331c      	adds	r3, #28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	3320      	adds	r3, #32
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	3324      	adds	r3, #36	@ 0x24
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	791b      	ldrb	r3, [r3, #4]
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d3af      	bcc.n	8001a86 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e044      	b.n	8001bb6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3b5      	bcc.n	8001b2c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7c1a      	ldrb	r2, [r3, #16]
 8001bc8:	f88d 2000 	strb.w	r2, [sp]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd0:	f004 f8dc 	bl	8005d8c <USB_DevInit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e013      	b.n	8001c0e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7b1b      	ldrb	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d102      	bne.n	8001c02 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f80b 	bl	8001c18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fa97 	bl	800613a <USB_DevDisconnect>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_PCDEx_ActivateLPM+0x44>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	10000003 	.word	0x10000003

08001c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00a      	beq.n	8001c8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01f      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e01d      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	490f      	ldr	r1, [pc, #60]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c9a:	f7ff faf1 	bl	8001280 <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ca0:	e009      	b.n	8001cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ca2:	f7ff faed 	bl	8001280 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cb0:	d901      	bls.n	8001cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58024800 	.word	0x58024800

08001cd4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	58024800 	.word	0x58024800

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	@ 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f000 bc48 	b.w	8002598 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8088 	beq.w	8001e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b99      	ldr	r3, [pc, #612]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d20:	4b96      	ldr	r3, [pc, #600]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	d007      	beq.n	8001d3c <HAL_RCC_OscConfig+0x48>
 8001d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2e:	2b18      	cmp	r3, #24
 8001d30:	d111      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62>
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d06d      	beq.n	8001e24 <HAL_RCC_OscConfig+0x130>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d169      	bne.n	8001e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f000 bc21 	b.w	8002598 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7a>
 8001d60:	4b86      	ldr	r3, [pc, #536]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a85      	ldr	r2, [pc, #532]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x9c>
 8001d76:	4b81      	ldr	r3, [pc, #516]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a80      	ldr	r2, [pc, #512]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b7e      	ldr	r3, [pc, #504]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7d      	ldr	r2, [pc, #500]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001d9a:	4b78      	ldr	r3, [pc, #480]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a77      	ldr	r2, [pc, #476]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b75      	ldr	r3, [pc, #468]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a74      	ldr	r2, [pc, #464]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001db4:	4b71      	ldr	r3, [pc, #452]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a70      	ldr	r2, [pc, #448]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fa54 	bl	8001280 <HAL_GetTick>
 8001dd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fa50 	bl	8001280 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e3d4      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dee:	4b63      	ldr	r3, [pc, #396]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa40 	bl	8001280 <HAL_GetTick>
 8001e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fa3c 	bl	8001280 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e3c0      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e16:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x110>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80ca 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e34:	4b51      	ldr	r3, [pc, #324]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_RCC_OscConfig+0x166>
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	2b18      	cmp	r3, #24
 8001e4e:	d156      	bne.n	8001efe <HAL_RCC_OscConfig+0x20a>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d151      	bne.n	8001efe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e5a:	4b48      	ldr	r3, [pc, #288]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e392      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e72:	4b42      	ldr	r3, [pc, #264]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0219 	bic.w	r2, r3, #25
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	493f      	ldr	r1, [pc, #252]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f9fc 	bl	8001280 <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f9f8 	bl	8001280 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e37c      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9e:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	f7ff fa19 	bl	80012e0 <HAL_GetREVID>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d817      	bhi.n	8001ee8 <HAL_RCC_OscConfig+0x1f4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b40      	cmp	r3, #64	@ 0x40
 8001ebe:	d108      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ece:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed0:	e07a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	031b      	lsls	r3, r3, #12
 8001ee0:	4926      	ldr	r1, [pc, #152]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee6:	e06f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	4921      	ldr	r1, [pc, #132]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001efc:	e064      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d047      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f06:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0219 	bic.w	r2, r3, #25
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	491a      	ldr	r1, [pc, #104]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f9b2 	bl	8001280 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff f9ae 	bl	8001280 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e332      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	f7ff f9cf 	bl	80012e0 <HAL_GetREVID>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d819      	bhi.n	8001f80 <HAL_RCC_OscConfig+0x28c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b40      	cmp	r3, #64	@ 0x40
 8001f52:	d108      	bne.n	8001f66 <HAL_RCC_OscConfig+0x272>
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f62:	6053      	str	r3, [r2, #4]
 8001f64:	e030      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	031b      	lsls	r3, r3, #12
 8001f74:	4901      	ldr	r1, [pc, #4]	@ (8001f7c <HAL_RCC_OscConfig+0x288>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
 8001f7a:	e025      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	4b9a      	ldr	r3, [pc, #616]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	4997      	ldr	r1, [pc, #604]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e018      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b95      	ldr	r3, [pc, #596]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a94      	ldr	r2, [pc, #592]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f96d 	bl	8001280 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff f969 	bl	8001280 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e2ed      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fbc:	4b8b      	ldr	r3, [pc, #556]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a9 	beq.w	8002128 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd6:	4b85      	ldr	r3, [pc, #532]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fde:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fe0:	4b82      	ldr	r3, [pc, #520]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d007      	beq.n	8001ffc <HAL_RCC_OscConfig+0x308>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b18      	cmp	r3, #24
 8001ff0:	d13a      	bne.n	8002068 <HAL_RCC_OscConfig+0x374>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d135      	bne.n	8002068 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_OscConfig+0x320>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b80      	cmp	r3, #128	@ 0x80
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e2c1      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002014:	f7ff f964 	bl	80012e0 <HAL_GetREVID>
 8002018:	4603      	mov	r3, r0
 800201a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800201e:	4293      	cmp	r3, r2
 8002020:	d817      	bhi.n	8002052 <HAL_RCC_OscConfig+0x35e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	2b20      	cmp	r3, #32
 8002028:	d108      	bne.n	800203c <HAL_RCC_OscConfig+0x348>
 800202a:	4b70      	ldr	r3, [pc, #448]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002032:	4a6e      	ldr	r2, [pc, #440]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002034:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002038:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800203a:	e075      	b.n	8002128 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800203c:	4b6b      	ldr	r3, [pc, #428]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	069b      	lsls	r3, r3, #26
 800204a:	4968      	ldr	r1, [pc, #416]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002050:	e06a      	b.n	8002128 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002052:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	4962      	ldr	r1, [pc, #392]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002066:	e05f      	b.n	8002128 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d042      	beq.n	80020f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002070:	4b5e      	ldr	r3, [pc, #376]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5d      	ldr	r2, [pc, #372]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff f900 	bl	8001280 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002084:	f7ff f8fc 	bl	8001280 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e280      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002096:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020a2:	f7ff f91d 	bl	80012e0 <HAL_GetREVID>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d817      	bhi.n	80020e0 <HAL_RCC_OscConfig+0x3ec>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d108      	bne.n	80020ca <HAL_RCC_OscConfig+0x3d6>
 80020b8:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020c0:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020c6:	6053      	str	r3, [r2, #4]
 80020c8:	e02e      	b.n	8002128 <HAL_RCC_OscConfig+0x434>
 80020ca:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	069b      	lsls	r3, r3, #26
 80020d8:	4944      	ldr	r1, [pc, #272]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
 80020de:	e023      	b.n	8002128 <HAL_RCC_OscConfig+0x434>
 80020e0:	4b42      	ldr	r3, [pc, #264]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	493f      	ldr	r1, [pc, #252]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e018      	b.n	8002128 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020f6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a3c      	ldr	r2, [pc, #240]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f8bd 	bl	8001280 <HAL_GetTick>
 8002106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800210a:	f7ff f8b9 	bl	8001280 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e23d      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d036      	beq.n	80021a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d019      	beq.n	8002170 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002140:	4a2a      	ldr	r2, [pc, #168]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff f89a 	bl	8001280 <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff f896 	bl	8001280 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e21a      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x45c>
 800216e:	e018      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002170:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff f880 	bl	8001280 <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff f87c 	bl	8001280 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e200      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d039      	beq.n	8002222 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80021bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021c2:	f7ff f85d 	bl	8001280 <HAL_GetTick>
 80021c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ca:	f7ff f859 	bl	8001280 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1dd      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_OscConfig+0x4f8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x4d6>
 80021e8:	e01b      	b.n	8002222 <HAL_RCC_OscConfig+0x52e>
 80021ea:	bf00      	nop
 80021ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a9a      	ldr	r2, [pc, #616]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80021f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021fc:	f7ff f840 	bl	8001280 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002204:	f7ff f83c 	bl	8001280 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1c0      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002216:	4b92      	ldr	r3, [pc, #584]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8081 	beq.w	8002332 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002230:	4b8c      	ldr	r3, [pc, #560]	@ (8002464 <HAL_RCC_OscConfig+0x770>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a8b      	ldr	r2, [pc, #556]	@ (8002464 <HAL_RCC_OscConfig+0x770>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800223c:	f7ff f820 	bl	8001280 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7ff f81c 	bl	8001280 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1a0      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002256:	4b83      	ldr	r3, [pc, #524]	@ (8002464 <HAL_RCC_OscConfig+0x770>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x584>
 800226a:	4b7d      	ldr	r3, [pc, #500]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226e:	4a7c      	ldr	r2, [pc, #496]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6713      	str	r3, [r2, #112]	@ 0x70
 8002276:	e02d      	b.n	80022d4 <HAL_RCC_OscConfig+0x5e0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10c      	bne.n	800229a <HAL_RCC_OscConfig+0x5a6>
 8002280:	4b77      	ldr	r3, [pc, #476]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	4a76      	ldr	r2, [pc, #472]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	@ 0x70
 800228c:	4b74      	ldr	r3, [pc, #464]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002290:	4a73      	ldr	r2, [pc, #460]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	@ 0x70
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x5e0>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x5c8>
 80022a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x5e0>
 80022bc:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	4a67      	ldr	r2, [pc, #412]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c8:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a64      	ldr	r2, [pc, #400]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe ffd0 	bl	8001280 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe ffcc 	bl	8001280 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e14e      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ee      	beq.n	80022e4 <HAL_RCC_OscConfig+0x5f0>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7fe ffba 	bl	8001280 <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe ffb6 	bl	8001280 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e138      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002326:	4b4e      	ldr	r3, [pc, #312]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ee      	bne.n	8002310 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 812d 	beq.w	8002596 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800233c:	4b48      	ldr	r3, [pc, #288]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002344:	2b18      	cmp	r3, #24
 8002346:	f000 80bd 	beq.w	80024c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	2b02      	cmp	r3, #2
 8002350:	f040 809e 	bne.w	8002490 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b42      	ldr	r3, [pc, #264]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a41      	ldr	r2, [pc, #260]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ff8e 	bl	8001280 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff8a 	bl	8001280 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e10e      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800237a:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002386:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCC_OscConfig+0x774>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	430a      	orrs	r2, r1
 800239a:	4931      	ldr	r1, [pc, #196]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	628b      	str	r3, [r1, #40]	@ 0x28
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	3b01      	subs	r3, #1
 80023a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ae:	3b01      	subs	r3, #1
 80023b0:	025b      	lsls	r3, r3, #9
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ba:	3b01      	subs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	3b01      	subs	r3, #1
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023d0:	4923      	ldr	r1, [pc, #140]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023d6:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e6:	4b21      	ldr	r3, [pc, #132]	@ (800246c <HAL_RCC_OscConfig+0x778>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ee:	00d2      	lsls	r2, r2, #3
 80023f0:	491b      	ldr	r1, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	f023 020c 	bic.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4917      	ldr	r1, [pc, #92]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002408:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f023 0202 	bic.w	r2, r3, #2
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	4912      	ldr	r1, [pc, #72]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	4a10      	ldr	r2, [pc, #64]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002426:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	4a0d      	ldr	r2, [pc, #52]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_RCC_OscConfig+0x76c>)
 8002450:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe ff13 	bl	8001280 <HAL_GetTick>
 800245a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800245c:	e011      	b.n	8002482 <HAL_RCC_OscConfig+0x78e>
 800245e:	bf00      	nop
 8002460:	58024400 	.word	0x58024400
 8002464:	58024800 	.word	0x58024800
 8002468:	fffffc0c 	.word	0xfffffc0c
 800246c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe ff06 	bl	8001280 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e08a      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002482:	4b47      	ldr	r3, [pc, #284]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x77c>
 800248e:	e082      	b.n	8002596 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a42      	ldr	r2, [pc, #264]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fef0 	bl	8001280 <HAL_GetTick>
 80024a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe feec 	bl	8001280 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e070      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b6:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x7b0>
 80024c2:	e068      	b.n	8002596 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024c4:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024ca:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d031      	beq.n	800253c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d12a      	bne.n	800253c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d122      	bne.n	800253c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002500:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d11a      	bne.n	800253c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0a5b      	lsrs	r3, r3, #9
 800250a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d111      	bne.n	800253c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002524:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0e1b      	lsrs	r3, r3, #24
 800252e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002536:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e02b      	b.n	8002598 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800254a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	429a      	cmp	r2, r3
 8002554:	d01f      	beq.n	8002596 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	4a11      	ldr	r2, [pc, #68]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002562:	f7fe fe8d 	bl	8001280 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002568:	bf00      	nop
 800256a:	f7fe fe89 	bl	8001280 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	4293      	cmp	r3, r2
 8002574:	d0f9      	beq.n	800256a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCC_OscConfig+0x8b0>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002582:	00d2      	lsls	r2, r2, #3
 8002584:	4906      	ldr	r1, [pc, #24]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002586:	4313      	orrs	r3, r2
 8002588:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 800258c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <HAL_RCC_OscConfig+0x8ac>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3730      	adds	r7, #48	@ 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58024400 	.word	0x58024400
 80025a4:	ffff0007 	.word	0xffff0007

080025a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e19c      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b8a      	ldr	r3, [pc, #552]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d910      	bls.n	80025ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b87      	ldr	r3, [pc, #540]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 020f 	bic.w	r2, r3, #15
 80025d2:	4985      	ldr	r1, [pc, #532]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b83      	ldr	r3, [pc, #524]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e184      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002604:	429a      	cmp	r2, r3
 8002606:	d908      	bls.n	800261a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002608:	4b78      	ldr	r3, [pc, #480]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4975      	ldr	r1, [pc, #468]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002616:	4313      	orrs	r3, r2
 8002618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d010      	beq.n	8002648 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	4b70      	ldr	r3, [pc, #448]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002632:	429a      	cmp	r2, r3
 8002634:	d908      	bls.n	8002648 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002636:	4b6d      	ldr	r3, [pc, #436]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	496a      	ldr	r1, [pc, #424]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002644:	4313      	orrs	r3, r2
 8002646:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d010      	beq.n	8002676 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	4b64      	ldr	r3, [pc, #400]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002660:	429a      	cmp	r2, r3
 8002662:	d908      	bls.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002664:	4b61      	ldr	r3, [pc, #388]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	495e      	ldr	r1, [pc, #376]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002672:	4313      	orrs	r3, r2
 8002674:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d010      	beq.n	80026a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268e:	429a      	cmp	r2, r3
 8002690:	d908      	bls.n	80026a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002692:	4b56      	ldr	r3, [pc, #344]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4953      	ldr	r1, [pc, #332]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	4b4d      	ldr	r3, [pc, #308]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	429a      	cmp	r2, r3
 80026be:	d908      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b4a      	ldr	r3, [pc, #296]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f023 020f 	bic.w	r2, r3, #15
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4947      	ldr	r1, [pc, #284]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d055      	beq.n	800278a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026de:	4b43      	ldr	r3, [pc, #268]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4940      	ldr	r1, [pc, #256]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d121      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0f6      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002710:	4b36      	ldr	r3, [pc, #216]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d115      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0ea      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002728:	4b30      	ldr	r3, [pc, #192]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0de      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002738:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0d6      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002748:	4b28      	ldr	r3, [pc, #160]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f023 0207 	bic.w	r2, r3, #7
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4925      	ldr	r1, [pc, #148]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 8002756:	4313      	orrs	r3, r2
 8002758:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275a:	f7fe fd91 	bl	8001280 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002760:	e00a      	b.n	8002778 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fd8d 	bl	8001280 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0be      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	429a      	cmp	r2, r3
 8002788:	d1eb      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d010      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d208      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f023 020f 	bic.w	r2, r3, #15
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	490e      	ldr	r1, [pc, #56]	@ (80027ec <HAL_RCC_ClockConfig+0x244>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d214      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 020f 	bic.w	r2, r3, #15
 80027ce:	4906      	ldr	r1, [pc, #24]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <HAL_RCC_ClockConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e086      	b.n	80028f6 <HAL_RCC_ClockConfig+0x34e>
 80027e8:	52002000 	.word	0x52002000
 80027ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b3f      	ldr	r3, [pc, #252]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002808:	429a      	cmp	r2, r3
 800280a:	d208      	bcs.n	800281e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800280c:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4939      	ldr	r1, [pc, #228]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 800281a:	4313      	orrs	r3, r2
 800281c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002836:	429a      	cmp	r2, r3
 8002838:	d208      	bcs.n	800284c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800283a:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	492e      	ldr	r1, [pc, #184]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 8002848:	4313      	orrs	r3, r2
 800284a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	4b28      	ldr	r3, [pc, #160]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002864:	429a      	cmp	r2, r3
 8002866:	d208      	bcs.n	800287a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002868:	4b25      	ldr	r3, [pc, #148]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4922      	ldr	r1, [pc, #136]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 8002876:	4313      	orrs	r3, r2
 8002878:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002892:	429a      	cmp	r2, r3
 8002894:	d208      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002896:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4917      	ldr	r1, [pc, #92]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a8:	f000 f834 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	4912      	ldr	r1, [pc, #72]	@ (8002904 <HAL_RCC_ClockConfig+0x35c>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_RCC_ClockConfig+0x358>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002904 <HAL_RCC_ClockConfig+0x35c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x360>)
 80028de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e0:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <HAL_RCC_ClockConfig+0x364>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_RCC_ClockConfig+0x368>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fc7e 	bl	80011ec <HAL_InitTick>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	58024400 	.word	0x58024400
 8002904:	08006ba0 	.word	0x08006ba0
 8002908:	2400001c 	.word	0x2400001c
 800290c:	24000018 	.word	0x24000018
 8002910:	24000020 	.word	0x24000020

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	@ 0x24
 8002918:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291a:	4bb3      	ldr	r3, [pc, #716]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002922:	2b18      	cmp	r3, #24
 8002924:	f200 8155 	bhi.w	8002bd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002928:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <HAL_RCC_GetSysClockFreq+0x1c>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002995 	.word	0x08002995
 8002934:	08002bd3 	.word	0x08002bd3
 8002938:	08002bd3 	.word	0x08002bd3
 800293c:	08002bd3 	.word	0x08002bd3
 8002940:	08002bd3 	.word	0x08002bd3
 8002944:	08002bd3 	.word	0x08002bd3
 8002948:	08002bd3 	.word	0x08002bd3
 800294c:	08002bd3 	.word	0x08002bd3
 8002950:	080029bb 	.word	0x080029bb
 8002954:	08002bd3 	.word	0x08002bd3
 8002958:	08002bd3 	.word	0x08002bd3
 800295c:	08002bd3 	.word	0x08002bd3
 8002960:	08002bd3 	.word	0x08002bd3
 8002964:	08002bd3 	.word	0x08002bd3
 8002968:	08002bd3 	.word	0x08002bd3
 800296c:	08002bd3 	.word	0x08002bd3
 8002970:	080029c1 	.word	0x080029c1
 8002974:	08002bd3 	.word	0x08002bd3
 8002978:	08002bd3 	.word	0x08002bd3
 800297c:	08002bd3 	.word	0x08002bd3
 8002980:	08002bd3 	.word	0x08002bd3
 8002984:	08002bd3 	.word	0x08002bd3
 8002988:	08002bd3 	.word	0x08002bd3
 800298c:	08002bd3 	.word	0x08002bd3
 8002990:	080029c7 	.word	0x080029c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002994:	4b94      	ldr	r3, [pc, #592]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029a0:	4b91      	ldr	r3, [pc, #580]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	4a90      	ldr	r2, [pc, #576]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029b2:	e111      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029b4:	4b8d      	ldr	r3, [pc, #564]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029b6:	61bb      	str	r3, [r7, #24]
      break;
 80029b8:	e10e      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029ba:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029bc:	61bb      	str	r3, [r7, #24]
      break;
 80029be:	e10b      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029c2:	61bb      	str	r3, [r7, #24]
      break;
 80029c4:	e108      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029d0:	4b85      	ldr	r3, [pc, #532]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029dc:	4b82      	ldr	r3, [pc, #520]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029e6:	4b80      	ldr	r3, [pc, #512]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80e1 	beq.w	8002bcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	f000 8083 	beq.w	8002b18 <HAL_RCC_GetSysClockFreq+0x204>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	f200 80a1 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x248>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x114>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d056      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a26:	e099      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a28:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02d      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a34:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	4a6b      	ldr	r2, [pc, #428]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a5e:	4b62      	ldr	r3, [pc, #392]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a8e:	e087      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa2:	4b51      	ldr	r3, [pc, #324]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ab6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ace:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ad2:	e065      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ade:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae6:	4b40      	ldr	r3, [pc, #256]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b16:	e043      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b5a:	e021      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b66:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b82:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	0a5b      	lsrs	r3, r3, #9
 8002ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002baa:	3301      	adds	r3, #1
 8002bac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 3a90 	vmov	r3, s15
 8002bc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bca:	e005      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
      break;
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bd2:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bd4:	61bb      	str	r3, [r7, #24]
      break;
 8002bd6:	bf00      	nop
  }

  return sysclockfreq;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	@ 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	58024400 	.word	0x58024400
 8002bec:	03d09000 	.word	0x03d09000
 8002bf0:	003d0900 	.word	0x003d0900
 8002bf4:	017d7840 	.word	0x017d7840
 8002bf8:	46000000 	.word	0x46000000
 8002bfc:	4c742400 	.word	0x4c742400
 8002c00:	4a742400 	.word	0x4a742400
 8002c04:	4bbebc20 	.word	0x4bbebc20

08002c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c0e:	f7ff fe81 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490f      	ldr	r1, [pc, #60]	@ (8002c5c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	4a09      	ldr	r2, [pc, #36]	@ (8002c5c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c42:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c46:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	08006ba0 	.word	0x08006ba0
 8002c60:	2400001c 	.word	0x2400001c
 8002c64:	24000018 	.word	0x24000018

08002c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c6c:	f7ff ffcc 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4904      	ldr	r1, [pc, #16]	@ (8002c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	08006ba0 	.word	0x08006ba0

08002c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c98:	f7ff ffb6 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	08006ba0 	.word	0x08006ba0

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc4:	b0ca      	sub	sp, #296	@ 0x128
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ce4:	2500      	movs	r5, #0
 8002ce6:	ea54 0305 	orrs.w	r3, r4, r5
 8002cea:	d049      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cf6:	d02f      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002cf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cfc:	d828      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d02:	d01a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d08:	d822      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d12:	d007      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d14:	e01c      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d16:	4bb8      	ldr	r3, [pc, #736]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	4ab7      	ldr	r2, [pc, #732]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d22:	e01a      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d28:	3308      	adds	r3, #8
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 fc8f 	bl	8004650 <RCCEx_PLL2_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d38:	e00f      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3e:	3328      	adds	r3, #40	@ 0x28
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fd36 	bl	80047b4 <RCCEx_PLL3_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d4e:	e004      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d62:	4ba5      	ldr	r3, [pc, #660]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d70:	4aa1      	ldr	r2, [pc, #644]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d72:	430b      	orrs	r3, r1
 8002d74:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d76:	e003      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002d8c:	f04f 0900 	mov.w	r9, #0
 8002d90:	ea58 0309 	orrs.w	r3, r8, r9
 8002d94:	d047      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d82a      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002da0:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002dbd 	.word	0x08002dbd
 8002dac:	08002dcb 	.word	0x08002dcb
 8002db0:	08002de1 	.word	0x08002de1
 8002db4:	08002dff 	.word	0x08002dff
 8002db8:	08002dff 	.word	0x08002dff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	4a8d      	ldr	r2, [pc, #564]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dc8:	e01a      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dce:	3308      	adds	r3, #8
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fc3c 	bl	8004650 <RCCEx_PLL2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dde:	e00f      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de4:	3328      	adds	r3, #40	@ 0x28
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 fce3 	bl	80047b4 <RCCEx_PLL3_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002df4:	e004      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e08:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	f023 0107 	bic.w	r1, r3, #7
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	4a78      	ldr	r2, [pc, #480]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e1c:	e003      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002e32:	f04f 0b00 	mov.w	fp, #0
 8002e36:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e3a:	d04c      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e46:	d030      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4c:	d829      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e50:	d02d      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e54:	d825      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e56:	2b80      	cmp	r3, #128	@ 0x80
 8002e58:	d018      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e5a:	2b80      	cmp	r3, #128	@ 0x80
 8002e5c:	d821      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e62:	2b40      	cmp	r3, #64	@ 0x40
 8002e64:	d007      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e66:	e01c      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e68:	4b63      	ldr	r3, [pc, #396]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	4a62      	ldr	r2, [pc, #392]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 fbe6 	bl	8004650 <RCCEx_PLL2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e8a:	e011      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e90:	3328      	adds	r3, #40	@ 0x28
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fc8d 	bl	80047b4 <RCCEx_PLL3_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ea0:	e006      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ecc:	e003      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002ee2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002eec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	d053      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002efe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f02:	d035      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f08:	d82e      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f0e:	d031      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f14:	d828      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1a:	d01a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f20:	d822      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f2a:	d007      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f2c:	e01c      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2e:	4b32      	ldr	r3, [pc, #200]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f32:	4a31      	ldr	r2, [pc, #196]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f3a:	e01c      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f40:	3308      	adds	r3, #8
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fb83 	bl	8004650 <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f50:	e011      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f56:	3328      	adds	r3, #40	@ 0x28
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fc2a 	bl	80047b4 <RCCEx_PLL3_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f66:	e006      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f70:	bf00      	nop
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f94:	e003      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002faa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fb4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	d056      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002fc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fca:	d038      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002fcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fd0:	d831      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fd6:	d034      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002fd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fdc:	d82b      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fe2:	d01d      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002fe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fe8:	d825      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002fee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ff4:	e01f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffc:	4ba2      	ldr	r3, [pc, #648]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	4aa1      	ldr	r2, [pc, #644]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003008:	e01c      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300e:	3308      	adds	r3, #8
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fb1c 	bl	8004650 <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800301e:	e011      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	3328      	adds	r3, #40	@ 0x28
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fbc3 	bl	80047b4 <RCCEx_PLL3_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800304c:	4b8e      	ldr	r3, [pc, #568]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003058:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800305c:	4a8a      	ldr	r2, [pc, #552]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800305e:	430b      	orrs	r3, r1
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58
 8003062:	e003      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003082:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003086:	460b      	mov	r3, r1
 8003088:	4313      	orrs	r3, r2
 800308a:	d03a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800308c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003092:	2b30      	cmp	r3, #48	@ 0x30
 8003094:	d01f      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003096:	2b30      	cmp	r3, #48	@ 0x30
 8003098:	d819      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800309a:	2b20      	cmp	r3, #32
 800309c:	d00c      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d815      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d111      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030aa:	4b77      	ldr	r3, [pc, #476]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	4a76      	ldr	r2, [pc, #472]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030b6:	e011      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030bc:	3308      	adds	r3, #8
 80030be:	2102      	movs	r1, #2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 fac5 	bl	8004650 <RCCEx_PLL2_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030cc:	e006      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030d4:	e002      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030e4:	4b68      	ldr	r3, [pc, #416]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80030ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030f8:	e003      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800310e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003118:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800311c:	460b      	mov	r3, r1
 800311e:	4313      	orrs	r3, r2
 8003120:	d051      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800312c:	d035      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800312e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003132:	d82e      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003138:	d031      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800313a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800313e:	d828      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003144:	d01a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800314a:	d822      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003154:	d007      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003156:	e01c      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003158:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	4a4a      	ldr	r2, [pc, #296]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003164:	e01c      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	3308      	adds	r3, #8
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fa6e 	bl	8004650 <RCCEx_PLL2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800317a:	e011      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	3328      	adds	r3, #40	@ 0x28
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f001 fb15 	bl	80047b4 <RCCEx_PLL3_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003190:	e006      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003198:	e002      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800319e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031a8:	4b37      	ldr	r3, [pc, #220]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	4a34      	ldr	r2, [pc, #208]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80031dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80031e0:	460b      	mov	r3, r1
 80031e2:	4313      	orrs	r3, r2
 80031e4:	d056      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f0:	d033      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80031f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f6:	d82c      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031fc:	d02f      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80031fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003202:	d826      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003204:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003208:	d02b      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800320a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800320e:	d820      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003214:	d012      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800321a:	d81a      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d022      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003224:	d115      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	3308      	adds	r3, #8
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fa0e 	bl	8004650 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800323a:	e015      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003240:	3328      	adds	r3, #40	@ 0x28
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fab5 	bl	80047b4 <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003250:	e00a      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800325a:	bf00      	nop
 800325c:	e004      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003274:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800327e:	4a02      	ldr	r2, [pc, #8]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003280:	430b      	orrs	r3, r1
 8003282:	6513      	str	r3, [r2, #80]	@ 0x50
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003286:	bf00      	nop
 8003288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4313      	orrs	r3, r2
 80032b2:	d055      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80032bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c0:	d033      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c6:	d82c      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032cc:	d02f      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d2:	d826      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032d8:	d02b      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80032da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032de:	d820      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032e4:	d012      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80032e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ea:	d81a      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d022      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80032f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f4:	d115      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fa:	3308      	adds	r3, #8
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f9a6 	bl	8004650 <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800330a:	e015      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	3328      	adds	r3, #40	@ 0x28
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fa4d 	bl	80047b4 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003320:	e00a      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800332a:	bf00      	nop
 800332c:	e004      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003340:	4ba3      	ldr	r3, [pc, #652]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003350:	4a9f      	ldr	r2, [pc, #636]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003352:	430b      	orrs	r3, r1
 8003354:	6593      	str	r3, [r2, #88]	@ 0x58
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	d037      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800338a:	d00e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800338c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003390:	d816      	bhi.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d018      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800339a:	d111      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800339c:	4b8c      	ldr	r3, [pc, #560]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	4a8b      	ldr	r2, [pc, #556]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033a8:	e00f      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ae:	3308      	adds	r3, #8
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 f94c 	bl	8004650 <RCCEx_PLL2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033be:	e004      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80033c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033d2:	4b7f      	ldr	r3, [pc, #508]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	4a7b      	ldr	r2, [pc, #492]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80033fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003406:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d039      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003416:	2b03      	cmp	r3, #3
 8003418:	d81c      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	0800345d 	.word	0x0800345d
 8003424:	08003431 	.word	0x08003431
 8003428:	0800343f 	.word	0x0800343f
 800342c:	0800345d 	.word	0x0800345d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4b67      	ldr	r3, [pc, #412]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4a66      	ldr	r2, [pc, #408]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800343c:	e00f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3308      	adds	r3, #8
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f001 f902 	bl	8004650 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003466:	4b5a      	ldr	r3, [pc, #360]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	f023 0103 	bic.w	r1, r3, #3
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003474:	4a56      	ldr	r2, [pc, #344]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003476:	430b      	orrs	r3, r1
 8003478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800347a:	e003      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800349a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800349e:	460b      	mov	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f000 809f 	beq.w	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a6:	4b4b      	ldr	r3, [pc, #300]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4a      	ldr	r2, [pc, #296]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b2:	f7fd fee5 	bl	8001280 <HAL_GetTick>
 80034b6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fd fee0 	bl	8001280 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	@ 0x64
 80034ca:	d903      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d2:	e005      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d4:	4b3f      	ldr	r3, [pc, #252]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ed      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80034e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d179      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034e8:	4b39      	ldr	r3, [pc, #228]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034f4:	4053      	eors	r3, r2
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034fe:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003506:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350e:	4a30      	ldr	r2, [pc, #192]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003514:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003516:	4b2e      	ldr	r3, [pc, #184]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003520:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003522:	4a2b      	ldr	r2, [pc, #172]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003528:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003536:	d118      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fea2 	bl	8001280 <HAL_GetTick>
 800353c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003540:	e00d      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fd fe9d 	bl	8001280 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800354c:	1ad2      	subs	r2, r2, r3
 800354e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003552:	429a      	cmp	r2, r3
 8003554:	d903      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800355c:	e005      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355e:	4b1c      	ldr	r3, [pc, #112]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0eb      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356e:	2b00      	cmp	r3, #0
 8003570:	d129      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800357a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003582:	d10e      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003584:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003594:	091a      	lsrs	r2, r3, #4
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003598:	4013      	ands	r3, r2
 800359a:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6113      	str	r3, [r2, #16]
 80035a0:	e005      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80035a2:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035ac:	6113      	str	r3, [r2, #16]
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	4a04      	ldr	r2, [pc, #16]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c4:	e00e      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80035ce:	e009      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80035d0:	58024400 	.word	0x58024400
 80035d4:	58024800 	.word	0x58024800
 80035d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 0301 	and.w	r3, r2, #1
 80035f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	f000 8089 	beq.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800360c:	2b28      	cmp	r3, #40	@ 0x28
 800360e:	d86b      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	080036f1 	.word	0x080036f1
 800361c:	080036e9 	.word	0x080036e9
 8003620:	080036e9 	.word	0x080036e9
 8003624:	080036e9 	.word	0x080036e9
 8003628:	080036e9 	.word	0x080036e9
 800362c:	080036e9 	.word	0x080036e9
 8003630:	080036e9 	.word	0x080036e9
 8003634:	080036e9 	.word	0x080036e9
 8003638:	080036bd 	.word	0x080036bd
 800363c:	080036e9 	.word	0x080036e9
 8003640:	080036e9 	.word	0x080036e9
 8003644:	080036e9 	.word	0x080036e9
 8003648:	080036e9 	.word	0x080036e9
 800364c:	080036e9 	.word	0x080036e9
 8003650:	080036e9 	.word	0x080036e9
 8003654:	080036e9 	.word	0x080036e9
 8003658:	080036d3 	.word	0x080036d3
 800365c:	080036e9 	.word	0x080036e9
 8003660:	080036e9 	.word	0x080036e9
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036e9 	.word	0x080036e9
 800366c:	080036e9 	.word	0x080036e9
 8003670:	080036e9 	.word	0x080036e9
 8003674:	080036e9 	.word	0x080036e9
 8003678:	080036f1 	.word	0x080036f1
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080036e9 	.word	0x080036e9
 8003684:	080036e9 	.word	0x080036e9
 8003688:	080036e9 	.word	0x080036e9
 800368c:	080036e9 	.word	0x080036e9
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036e9 	.word	0x080036e9
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036e9 	.word	0x080036e9
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036e9 	.word	0x080036e9
 80036b0:	080036e9 	.word	0x080036e9
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	080036f1 	.word	0x080036f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	3308      	adds	r3, #8
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 ffc3 	bl	8004650 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036d0:	e00f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	3328      	adds	r3, #40	@ 0x28
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 f86a 	bl	80047b4 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80036f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036fa:	4bbf      	ldr	r3, [pc, #764]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003708:	4abb      	ldr	r2, [pc, #748]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6553      	str	r3, [r2, #84]	@ 0x54
 800370e:	e003      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 0302 	and.w	r3, r2, #2
 8003724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800372e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003732:	460b      	mov	r3, r1
 8003734:	4313      	orrs	r3, r2
 8003736:	d041      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800373e:	2b05      	cmp	r3, #5
 8003740:	d824      	bhi.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003742:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003795 	.word	0x08003795
 800374c:	08003761 	.word	0x08003761
 8003750:	08003777 	.word	0x08003777
 8003754:	08003795 	.word	0x08003795
 8003758:	08003795 	.word	0x08003795
 800375c:	08003795 	.word	0x08003795
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003764:	3308      	adds	r3, #8
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 ff71 	bl	8004650 <RCCEx_PLL2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003774:	e00f      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	3328      	adds	r3, #40	@ 0x28
 800377c:	2101      	movs	r1, #1
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f818 	bl	80047b4 <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800378a:	e004      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800379e:	4b96      	ldr	r3, [pc, #600]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	f023 0107 	bic.w	r1, r3, #7
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ac:	4a92      	ldr	r2, [pc, #584]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80037b2:	e003      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f002 0304 	and.w	r3, r2, #4
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4313      	orrs	r3, r2
 80037da:	d044      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d825      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80037e8:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	0800383d 	.word	0x0800383d
 80037f4:	08003809 	.word	0x08003809
 80037f8:	0800381f 	.word	0x0800381f
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800383d 	.word	0x0800383d
 8003804:	0800383d 	.word	0x0800383d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	3308      	adds	r3, #8
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 ff1d 	bl	8004650 <RCCEx_PLL2_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800381c:	e00f      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	3328      	adds	r3, #40	@ 0x28
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f000 ffc4 	bl	80047b4 <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003832:	e004      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800383a:	e000      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800383c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003846:	4b6c      	ldr	r3, [pc, #432]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384a:	f023 0107 	bic.w	r1, r3, #7
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003856:	4a68      	ldr	r2, [pc, #416]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003858:	430b      	orrs	r3, r1
 800385a:	6593      	str	r3, [r2, #88]	@ 0x58
 800385c:	e003      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f002 0320 	and.w	r3, r2, #32
 8003872:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800387c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003880:	460b      	mov	r3, r1
 8003882:	4313      	orrs	r3, r2
 8003884:	d055      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003892:	d033      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003898:	d82c      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389e:	d02f      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d826      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038aa:	d02b      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80038ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038b0:	d820      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038b6:	d012      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80038b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038bc:	d81a      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d022      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80038c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038c6:	d115      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	3308      	adds	r3, #8
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 febd 	bl	8004650 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038dc:	e015      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	3328      	adds	r3, #40	@ 0x28
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 ff64 	bl	80047b4 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038f2:	e00a      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fa:	e006      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038fc:	bf00      	nop
 80038fe:	e004      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003900:	bf00      	nop
 8003902:	e002      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003912:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	4a35      	ldr	r2, [pc, #212]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003924:	430b      	orrs	r3, r1
 8003926:	6553      	str	r3, [r2, #84]	@ 0x54
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800393e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003948:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800394c:	460b      	mov	r3, r1
 800394e:	4313      	orrs	r3, r2
 8003950:	d058      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800395a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800395e:	d033      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003960:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003964:	d82c      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800396a:	d02f      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003970:	d826      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003976:	d02b      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800397c:	d820      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003982:	d012      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003988:	d81a      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d022      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003992:	d115      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	3308      	adds	r3, #8
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fe57 	bl	8004650 <RCCEx_PLL2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039a8:	e015      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	3328      	adds	r3, #40	@ 0x28
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fefe 	bl	80047b4 <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039be:	e00a      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c6:	e006      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039c8:	bf00      	nop
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039cc:	bf00      	nop
 80039ce:	e002      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10e      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ee:	4a02      	ldr	r2, [pc, #8]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f4:	e006      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d055      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a30:	d033      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a36:	d82c      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	d02f      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a42:	d826      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a48:	d02b      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a4e:	d820      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a54:	d012      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5a:	d81a      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d022      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a64:	d115      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fdee 	bl	8004650 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a7a:	e015      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	3328      	adds	r3, #40	@ 0x28
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fe95 	bl	80047b4 <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a98:	e006      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e004      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a9e:	bf00      	nop
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ab0:	4ba1      	ldr	r3, [pc, #644]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ac0:	4a9d      	ldr	r2, [pc, #628]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ac6:	e003      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f002 0308 	and.w	r3, r2, #8
 8003adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ae6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d01e      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	3328      	adds	r3, #40	@ 0x28
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fe54 	bl	80047b4 <RCCEx_PLL3_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b18:	4b87      	ldr	r3, [pc, #540]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b28:	4a83      	ldr	r2, [pc, #524]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f002 0310 	and.w	r3, r2, #16
 8003b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d01e      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	3328      	adds	r3, #40	@ 0x28
 8003b62:	2102      	movs	r1, #2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fe25 	bl	80047b4 <RCCEx_PLL3_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b76:	4b70      	ldr	r3, [pc, #448]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b86:	4a6c      	ldr	r2, [pc, #432]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ba2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d03e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb8:	d022      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bbe:	d81b      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc8:	d00b      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003bca:	e015      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fd3b 	bl	8004650 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fde2 	bl	80047b4 <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c1a:	4a47      	ldr	r2, [pc, #284]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c20:	e003      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c38:	2300      	movs	r3, #0
 8003c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c40:	460b      	mov	r3, r1
 8003c42:	4313      	orrs	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c52:	d01f      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c58:	d818      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c64:	d007      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c66:	e011      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c68:	4b33      	ldr	r3, [pc, #204]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	4a32      	ldr	r2, [pc, #200]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c74:	e00f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3328      	adds	r3, #40	@ 0x28
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fd98 	bl	80047b4 <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c8a:	e004      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c9e:	4b26      	ldr	r3, [pc, #152]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cca:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ccc:	2300      	movs	r3, #0
 8003cce:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	d034      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce8:	d007      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003cea:	e011      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cec:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	4a11      	ldr	r2, [pc, #68]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cf8:	e00e      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	3308      	adds	r3, #8
 8003d00:	2102      	movs	r1, #2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fca4 	bl	8004650 <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2e:	4a02      	ldr	r2, [pc, #8]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d34:	e006      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d52:	2300      	movs	r3, #0
 8003d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	d00c      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	3328      	adds	r3, #40	@ 0x28
 8003d66:	2102      	movs	r1, #2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fd23 	bl	80047b4 <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d86:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d88:	2300      	movs	r3, #0
 8003d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d038      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da2:	d018      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003da4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da8:	d811      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dae:	d014      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db4:	d80b      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d011      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dbe:	d106      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc0:	4bc3      	ldr	r3, [pc, #780]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	4ac2      	ldr	r2, [pc, #776]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dcc:	e008      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd4:	e004      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003de8:	4bb9      	ldr	r3, [pc, #740]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df8:	4ab5      	ldr	r2, [pc, #724]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e16:	2300      	movs	r3, #0
 8003e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e24:	4baa      	ldr	r3, [pc, #680]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e32:	4aa7      	ldr	r2, [pc, #668]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e46:	2300      	movs	r3, #0
 8003e48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e54:	4b9e      	ldr	r3, [pc, #632]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e64:	4a9a      	ldr	r2, [pc, #616]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e66:	430b      	orrs	r3, r1
 8003e68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e80:	460b      	mov	r3, r1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e86:	4b92      	ldr	r3, [pc, #584]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e94:	4a8e      	ldr	r2, [pc, #568]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb6:	4b86      	ldr	r3, [pc, #536]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	4a85      	ldr	r2, [pc, #532]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ebc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ec0:	6113      	str	r3, [r2, #16]
 8003ec2:	4b83      	ldr	r3, [pc, #524]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ece:	4a80      	ldr	r2, [pc, #512]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ee6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ef0:	4b77      	ldr	r3, [pc, #476]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	4a74      	ldr	r2, [pc, #464]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f12:	2300      	movs	r3, #0
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f20:	4b6b      	ldr	r3, [pc, #428]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f30:	4a67      	ldr	r2, [pc, #412]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	d011      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3308      	adds	r3, #8
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb78 	bl	8004650 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	6239      	str	r1, [r7, #32]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d011      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	3308      	adds	r3, #8
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb58 	bl	8004650 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	61b9      	str	r1, [r7, #24]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d011      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fb38 	bl	8004650 <RCCEx_PLL2_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	2100      	movs	r1, #0
 8004000:	6139      	str	r1, [r7, #16]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d011      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	3328      	adds	r3, #40	@ 0x28
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fbca 	bl	80047b4 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	2100      	movs	r1, #0
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d011      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	3328      	adds	r3, #40	@ 0x28
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fbaa 	bl	80047b4 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	2100      	movs	r1, #0
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	e9d7 1200 	ldrd	r1, r2, [r7]
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d011      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	3328      	adds	r3, #40	@ 0x28
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb8a 	bl	80047b4 <RCCEx_PLL3_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80040b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80040ca:	46bd      	mov	sp, r7
 80040cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d0:	58024400 	.word	0x58024400

080040d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040d8:	f7fe fd96 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	@ (80040fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	58024400 	.word	0x58024400
 80040fc:	08006ba0 	.word	0x08006ba0

08004100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	@ 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004108:	4ba1      	ldr	r3, [pc, #644]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004112:	4b9f      	ldr	r3, [pc, #636]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	0b1b      	lsrs	r3, r3, #12
 8004118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800411c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800411e:	4b9c      	ldr	r3, [pc, #624]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800412a:	4b99      	ldr	r3, [pc, #612]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8111 	beq.w	8004370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b02      	cmp	r3, #2
 8004152:	f000 8083 	beq.w	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b02      	cmp	r3, #2
 800415a:	f200 80a1 	bhi.w	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d056      	beq.n	8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800416a:	e099      	b.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800416c:	4b88      	ldr	r3, [pc, #544]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02d      	beq.n	80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004178:	4b85      	ldr	r3, [pc, #532]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	08db      	lsrs	r3, r3, #3
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	4a84      	ldr	r2, [pc, #528]	@ (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
 8004188:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041d2:	e087      	b.n	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004216:	e065      	b.n	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b59      	ldr	r3, [pc, #356]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a03 	vldr	s12, [r7, #12]
 800423e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425a:	e043      	b.n	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b48      	ldr	r3, [pc, #288]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004282:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800429e:	e021      	b.n	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b2:	4b37      	ldr	r3, [pc, #220]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	0a5b      	lsrs	r3, r3, #9
 80042ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430a:	ee17 2a90 	vmov	r2, s15
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004312:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800432c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004338:	ee17 2a90 	vmov	r2, s15
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004340:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004344:	0e1b      	lsrs	r3, r3, #24
 8004346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800435a:	edd7 6a07 	vldr	s13, [r7, #28]
 800435e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004366:	ee17 2a90 	vmov	r2, s15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800436e:	e008      	b.n	8004382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
}
 8004382:	bf00      	nop
 8004384:	3724      	adds	r7, #36	@ 0x24
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
 8004394:	03d09000 	.word	0x03d09000
 8004398:	46000000 	.word	0x46000000
 800439c:	4c742400 	.word	0x4c742400
 80043a0:	4a742400 	.word	0x4a742400
 80043a4:	4bbebc20 	.word	0x4bbebc20

080043a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	@ 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043ba:	4b9f      	ldr	r3, [pc, #636]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	0d1b      	lsrs	r3, r3, #20
 80043c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043d2:	4b99      	ldr	r3, [pc, #612]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	08db      	lsrs	r3, r3, #3
 80043d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8111 	beq.w	8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	f000 8083 	beq.w	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b02      	cmp	r3, #2
 8004402:	f200 80a1 	bhi.w	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d056      	beq.n	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004412:	e099      	b.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004414:	4b88      	ldr	r3, [pc, #544]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02d      	beq.n	800447c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004420:	4b85      	ldr	r3, [pc, #532]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	4a84      	ldr	r2, [pc, #528]	@ (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444a:	4b7b      	ldr	r3, [pc, #492]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445a:	ed97 6a03 	vldr	s12, [r7, #12]
 800445e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800446e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800447a:	e087      	b.n	800458c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b6a      	ldr	r3, [pc, #424]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044be:	e065      	b.n	800458c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b59      	ldr	r3, [pc, #356]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004502:	e043      	b.n	800458c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800464c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b48      	ldr	r3, [pc, #288]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004546:	e021      	b.n	800458c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b37      	ldr	r3, [pc, #220]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a03 	vldr	s12, [r7, #12]
 800456e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800458c:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b2:	ee17 2a90 	vmov	r2, s15
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e0:	ee17 2a90 	vmov	r2, s15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045e8:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004602:	edd7 6a07 	vldr	s13, [r7, #28]
 8004606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460e:	ee17 2a90 	vmov	r2, s15
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004616:	e008      	b.n	800462a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
}
 800462a:	bf00      	nop
 800462c:	3724      	adds	r7, #36	@ 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400
 800463c:	03d09000 	.word	0x03d09000
 8004640:	46000000 	.word	0x46000000
 8004644:	4c742400 	.word	0x4c742400
 8004648:	4a742400 	.word	0x4a742400
 800464c:	4bbebc20 	.word	0x4bbebc20

08004650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800465e:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b03      	cmp	r3, #3
 8004668:	d101      	bne.n	800466e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e099      	b.n	80047a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800466e:	4b4f      	ldr	r3, [pc, #316]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a4e      	ldr	r2, [pc, #312]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004674:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467a:	f7fc fe01 	bl	8001280 <HAL_GetTick>
 800467e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004680:	e008      	b.n	8004694 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004682:	f7fc fdfd 	bl	8001280 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e086      	b.n	80047a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004694:	4b45      	ldr	r3, [pc, #276]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046a0:	4b42      	ldr	r3, [pc, #264]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	493f      	ldr	r1, [pc, #252]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	025b      	lsls	r3, r3, #9
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	3b01      	subs	r3, #1
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046e4:	4931      	ldr	r1, [pc, #196]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046ea:	4b30      	ldr	r3, [pc, #192]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	492d      	ldr	r1, [pc, #180]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046fc:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f023 0220 	bic.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	4928      	ldr	r1, [pc, #160]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800470e:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	4a26      	ldr	r2, [pc, #152]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800471a:	4b24      	ldr	r3, [pc, #144]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 800471c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800471e:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <RCCEx_PLL2_Config+0x160>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	69d2      	ldr	r2, [r2, #28]
 8004726:	00d2      	lsls	r2, r2, #3
 8004728:	4920      	ldr	r1, [pc, #128]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800472e:	4b1f      	ldr	r3, [pc, #124]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004734:	f043 0310 	orr.w	r3, r3, #16
 8004738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004740:	4b1a      	ldr	r3, [pc, #104]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	4a19      	ldr	r2, [pc, #100]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004746:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800474a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800474c:	e00f      	b.n	800476e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d106      	bne.n	8004762 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004754:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a14      	ldr	r2, [pc, #80]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 800475a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004760:	e005      	b.n	800476e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	4a11      	ldr	r2, [pc, #68]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004768:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800476c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800476e:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a0e      	ldr	r2, [pc, #56]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004774:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477a:	f7fc fd81 	bl	8001280 <HAL_GetTick>
 800477e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004780:	e008      	b.n	8004794 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004782:	f7fc fd7d 	bl	8001280 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e006      	b.n	80047a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <RCCEx_PLL2_Config+0x15c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400
 80047b0:	ffff0007 	.word	0xffff0007

080047b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047c2:	4b53      	ldr	r3, [pc, #332]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d101      	bne.n	80047d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e099      	b.n	8004906 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047de:	f7fc fd4f 	bl	8001280 <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047e6:	f7fc fd4b 	bl	8001280 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e086      	b.n	8004906 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047f8:	4b45      	ldr	r3, [pc, #276]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004804:	4b42      	ldr	r3, [pc, #264]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	051b      	lsls	r3, r3, #20
 8004812:	493f      	ldr	r1, [pc, #252]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	628b      	str	r3, [r1, #40]	@ 0x28
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	3b01      	subs	r3, #1
 800481e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	3b01      	subs	r3, #1
 8004828:	025b      	lsls	r3, r3, #9
 800482a:	b29b      	uxth	r3, r3
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	3b01      	subs	r3, #1
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004848:	4931      	ldr	r1, [pc, #196]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800484e:	4b30      	ldr	r3, [pc, #192]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004852:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	492d      	ldr	r1, [pc, #180]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004860:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4928      	ldr	r1, [pc, #160]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004872:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800487c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004882:	4b24      	ldr	r3, [pc, #144]	@ (8004914 <RCCEx_PLL3_Config+0x160>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	69d2      	ldr	r2, [r2, #28]
 800488a:	00d2      	lsls	r2, r2, #3
 800488c:	4920      	ldr	r1, [pc, #128]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004892:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	4a1e      	ldr	r2, [pc, #120]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	4a19      	ldr	r2, [pc, #100]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048b0:	e00f      	b.n	80048d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d106      	bne.n	80048c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048b8:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048c4:	e005      	b.n	80048d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048c6:	4b12      	ldr	r3, [pc, #72]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	4a11      	ldr	r2, [pc, #68]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048de:	f7fc fccf 	bl	8001280 <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048e4:	e008      	b.n	80048f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048e6:	f7fc fccb 	bl	8001280 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e006      	b.n	8004906 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <RCCEx_PLL3_Config+0x15c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400
 8004914:	ffff0007 	.word	0xffff0007

08004918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e042      	b.n	80049b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc fad7 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	@ 0x24
 8004946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fe1e 	bl	80055a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8b3 	bl	8004ad4 <UART_SetConfig>
 800496e:	4603      	mov	r3, r0
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e01b      	b.n	80049b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fe9d 	bl	80056e8 <UART_CheckIdleState>
 80049ae:	4603      	mov	r3, r0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	@ 0x28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d17b      	bne.n	8004aca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_Transmit+0x26>
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e074      	b.n	8004acc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	@ 0x21
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f2:	f7fc fc45 	bl	8001280 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a10:	d108      	bne.n	8004a24 <HAL_UART_Transmit+0x6c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e003      	b.n	8004a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a2c:	e030      	b.n	8004a90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2180      	movs	r1, #128	@ 0x80
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 feff 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e03d      	b.n	8004acc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	e007      	b.n	8004a7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1c8      	bne.n	8004a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2140      	movs	r1, #64	@ 0x40
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fec8 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e006      	b.n	8004acc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b092      	sub	sp, #72	@ 0x48
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4bbe      	ldr	r3, [pc, #760]	@ (8004dfc <UART_SetConfig+0x328>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4ab3      	ldr	r2, [pc, #716]	@ (8004e00 <UART_SetConfig+0x32c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	4baf      	ldr	r3, [pc, #700]	@ (8004e04 <UART_SetConfig+0x330>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	f023 010f 	bic.w	r1, r3, #15
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4aa6      	ldr	r2, [pc, #664]	@ (8004e08 <UART_SetConfig+0x334>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d177      	bne.n	8004c64 <UART_SetConfig+0x190>
 8004b74:	4ba5      	ldr	r3, [pc, #660]	@ (8004e0c <UART_SetConfig+0x338>)
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b7c:	2b28      	cmp	r3, #40	@ 0x28
 8004b7e:	d86d      	bhi.n	8004c5c <UART_SetConfig+0x188>
 8004b80:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <UART_SetConfig+0xb4>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004c2d 	.word	0x08004c2d
 8004b8c:	08004c5d 	.word	0x08004c5d
 8004b90:	08004c5d 	.word	0x08004c5d
 8004b94:	08004c5d 	.word	0x08004c5d
 8004b98:	08004c5d 	.word	0x08004c5d
 8004b9c:	08004c5d 	.word	0x08004c5d
 8004ba0:	08004c5d 	.word	0x08004c5d
 8004ba4:	08004c5d 	.word	0x08004c5d
 8004ba8:	08004c35 	.word	0x08004c35
 8004bac:	08004c5d 	.word	0x08004c5d
 8004bb0:	08004c5d 	.word	0x08004c5d
 8004bb4:	08004c5d 	.word	0x08004c5d
 8004bb8:	08004c5d 	.word	0x08004c5d
 8004bbc:	08004c5d 	.word	0x08004c5d
 8004bc0:	08004c5d 	.word	0x08004c5d
 8004bc4:	08004c5d 	.word	0x08004c5d
 8004bc8:	08004c3d 	.word	0x08004c3d
 8004bcc:	08004c5d 	.word	0x08004c5d
 8004bd0:	08004c5d 	.word	0x08004c5d
 8004bd4:	08004c5d 	.word	0x08004c5d
 8004bd8:	08004c5d 	.word	0x08004c5d
 8004bdc:	08004c5d 	.word	0x08004c5d
 8004be0:	08004c5d 	.word	0x08004c5d
 8004be4:	08004c5d 	.word	0x08004c5d
 8004be8:	08004c45 	.word	0x08004c45
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c5d 	.word	0x08004c5d
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c5d 	.word	0x08004c5d
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c4d 	.word	0x08004c4d
 8004c0c:	08004c5d 	.word	0x08004c5d
 8004c10:	08004c5d 	.word	0x08004c5d
 8004c14:	08004c5d 	.word	0x08004c5d
 8004c18:	08004c5d 	.word	0x08004c5d
 8004c1c:	08004c5d 	.word	0x08004c5d
 8004c20:	08004c5d 	.word	0x08004c5d
 8004c24:	08004c5d 	.word	0x08004c5d
 8004c28:	08004c55 	.word	0x08004c55
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e222      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c34:	2304      	movs	r3, #4
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	e21e      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e21a      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c44:	2310      	movs	r3, #16
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e216      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e212      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c54:	2340      	movs	r3, #64	@ 0x40
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e20e      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c5c:	2380      	movs	r3, #128	@ 0x80
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e20a      	b.n	800507a <UART_SetConfig+0x5a6>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a69      	ldr	r2, [pc, #420]	@ (8004e10 <UART_SetConfig+0x33c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d130      	bne.n	8004cd0 <UART_SetConfig+0x1fc>
 8004c6e:	4b67      	ldr	r3, [pc, #412]	@ (8004e0c <UART_SetConfig+0x338>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d826      	bhi.n	8004cc8 <UART_SetConfig+0x1f4>
 8004c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c80 <UART_SetConfig+0x1ac>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004c99 	.word	0x08004c99
 8004c84:	08004ca1 	.word	0x08004ca1
 8004c88:	08004ca9 	.word	0x08004ca9
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cc1 	.word	0x08004cc1
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e1ec      	b.n	800507a <UART_SetConfig+0x5a6>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e1e8      	b.n	800507a <UART_SetConfig+0x5a6>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e1e4      	b.n	800507a <UART_SetConfig+0x5a6>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e1e0      	b.n	800507a <UART_SetConfig+0x5a6>
 8004cb8:	2320      	movs	r3, #32
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e1dc      	b.n	800507a <UART_SetConfig+0x5a6>
 8004cc0:	2340      	movs	r3, #64	@ 0x40
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e1d8      	b.n	800507a <UART_SetConfig+0x5a6>
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e1d4      	b.n	800507a <UART_SetConfig+0x5a6>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8004e14 <UART_SetConfig+0x340>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d130      	bne.n	8004d3c <UART_SetConfig+0x268>
 8004cda:	4b4c      	ldr	r3, [pc, #304]	@ (8004e0c <UART_SetConfig+0x338>)
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	2b05      	cmp	r3, #5
 8004ce4:	d826      	bhi.n	8004d34 <UART_SetConfig+0x260>
 8004ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <UART_SetConfig+0x218>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d05 	.word	0x08004d05
 8004cf0:	08004d0d 	.word	0x08004d0d
 8004cf4:	08004d15 	.word	0x08004d15
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d2d 	.word	0x08004d2d
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e1b6      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e1b2      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d14:	2308      	movs	r3, #8
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e1ae      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e1aa      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d24:	2320      	movs	r3, #32
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e1a6      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d2c:	2340      	movs	r3, #64	@ 0x40
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e1a2      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d34:	2380      	movs	r3, #128	@ 0x80
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e19e      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a35      	ldr	r2, [pc, #212]	@ (8004e18 <UART_SetConfig+0x344>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d130      	bne.n	8004da8 <UART_SetConfig+0x2d4>
 8004d46:	4b31      	ldr	r3, [pc, #196]	@ (8004e0c <UART_SetConfig+0x338>)
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d826      	bhi.n	8004da0 <UART_SetConfig+0x2cc>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <UART_SetConfig+0x284>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d71 	.word	0x08004d71
 8004d5c:	08004d79 	.word	0x08004d79
 8004d60:	08004d81 	.word	0x08004d81
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e180      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e17c      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d80:	2308      	movs	r3, #8
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e178      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e174      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d90:	2320      	movs	r3, #32
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d96:	e170      	b.n	800507a <UART_SetConfig+0x5a6>
 8004d98:	2340      	movs	r3, #64	@ 0x40
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e16c      	b.n	800507a <UART_SetConfig+0x5a6>
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e168      	b.n	800507a <UART_SetConfig+0x5a6>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1b      	ldr	r2, [pc, #108]	@ (8004e1c <UART_SetConfig+0x348>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d142      	bne.n	8004e38 <UART_SetConfig+0x364>
 8004db2:	4b16      	ldr	r3, [pc, #88]	@ (8004e0c <UART_SetConfig+0x338>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d838      	bhi.n	8004e30 <UART_SetConfig+0x35c>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <UART_SetConfig+0x2f0>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004ddd 	.word	0x08004ddd
 8004dc8:	08004de5 	.word	0x08004de5
 8004dcc:	08004ded 	.word	0x08004ded
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004e21 	.word	0x08004e21
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e14a      	b.n	800507a <UART_SetConfig+0x5a6>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dea:	e146      	b.n	800507a <UART_SetConfig+0x5a6>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e142      	b.n	800507a <UART_SetConfig+0x5a6>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfa:	e13e      	b.n	800507a <UART_SetConfig+0x5a6>
 8004dfc:	cfff69f3 	.word	0xcfff69f3
 8004e00:	58000c00 	.word	0x58000c00
 8004e04:	11fff4ff 	.word	0x11fff4ff
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	40004400 	.word	0x40004400
 8004e14:	40004800 	.word	0x40004800
 8004e18:	40004c00 	.word	0x40004c00
 8004e1c:	40005000 	.word	0x40005000
 8004e20:	2320      	movs	r3, #32
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e26:	e128      	b.n	800507a <UART_SetConfig+0x5a6>
 8004e28:	2340      	movs	r3, #64	@ 0x40
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2e:	e124      	b.n	800507a <UART_SetConfig+0x5a6>
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e36:	e120      	b.n	800507a <UART_SetConfig+0x5a6>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4acb      	ldr	r2, [pc, #812]	@ (800516c <UART_SetConfig+0x698>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d176      	bne.n	8004f30 <UART_SetConfig+0x45c>
 8004e42:	4bcb      	ldr	r3, [pc, #812]	@ (8005170 <UART_SetConfig+0x69c>)
 8004e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e4a:	2b28      	cmp	r3, #40	@ 0x28
 8004e4c:	d86c      	bhi.n	8004f28 <UART_SetConfig+0x454>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <UART_SetConfig+0x380>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004ef9 	.word	0x08004ef9
 8004e58:	08004f29 	.word	0x08004f29
 8004e5c:	08004f29 	.word	0x08004f29
 8004e60:	08004f29 	.word	0x08004f29
 8004e64:	08004f29 	.word	0x08004f29
 8004e68:	08004f29 	.word	0x08004f29
 8004e6c:	08004f29 	.word	0x08004f29
 8004e70:	08004f29 	.word	0x08004f29
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f29 	.word	0x08004f29
 8004e7c:	08004f29 	.word	0x08004f29
 8004e80:	08004f29 	.word	0x08004f29
 8004e84:	08004f29 	.word	0x08004f29
 8004e88:	08004f29 	.word	0x08004f29
 8004e8c:	08004f29 	.word	0x08004f29
 8004e90:	08004f29 	.word	0x08004f29
 8004e94:	08004f09 	.word	0x08004f09
 8004e98:	08004f29 	.word	0x08004f29
 8004e9c:	08004f29 	.word	0x08004f29
 8004ea0:	08004f29 	.word	0x08004f29
 8004ea4:	08004f29 	.word	0x08004f29
 8004ea8:	08004f29 	.word	0x08004f29
 8004eac:	08004f29 	.word	0x08004f29
 8004eb0:	08004f29 	.word	0x08004f29
 8004eb4:	08004f11 	.word	0x08004f11
 8004eb8:	08004f29 	.word	0x08004f29
 8004ebc:	08004f29 	.word	0x08004f29
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f29 	.word	0x08004f29
 8004ecc:	08004f29 	.word	0x08004f29
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f19 	.word	0x08004f19
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f29 	.word	0x08004f29
 8004ee0:	08004f29 	.word	0x08004f29
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	08004f29 	.word	0x08004f29
 8004eec:	08004f29 	.word	0x08004f29
 8004ef0:	08004f29 	.word	0x08004f29
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efe:	e0bc      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f00:	2304      	movs	r3, #4
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f06:	e0b8      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e0b4      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f16:	e0b0      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f18:	2320      	movs	r3, #32
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e0ac      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f20:	2340      	movs	r3, #64	@ 0x40
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e0a8      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e0a4      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a8f      	ldr	r2, [pc, #572]	@ (8005174 <UART_SetConfig+0x6a0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d130      	bne.n	8004f9c <UART_SetConfig+0x4c8>
 8004f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005170 <UART_SetConfig+0x69c>)
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d826      	bhi.n	8004f94 <UART_SetConfig+0x4c0>
 8004f46:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <UART_SetConfig+0x478>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f65 	.word	0x08004f65
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	08004f75 	.word	0x08004f75
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6a:	e086      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f72:	e082      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f74:	2308      	movs	r3, #8
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e07e      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e07a      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f84:	2320      	movs	r3, #32
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e076      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f8c:	2340      	movs	r3, #64	@ 0x40
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e072      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f94:	2380      	movs	r3, #128	@ 0x80
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e06e      	b.n	800507a <UART_SetConfig+0x5a6>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a75      	ldr	r2, [pc, #468]	@ (8005178 <UART_SetConfig+0x6a4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d130      	bne.n	8005008 <UART_SetConfig+0x534>
 8004fa6:	4b72      	ldr	r3, [pc, #456]	@ (8005170 <UART_SetConfig+0x69c>)
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d826      	bhi.n	8005000 <UART_SetConfig+0x52c>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0x4e4>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fd1 	.word	0x08004fd1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fe1 	.word	0x08004fe1
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd6:	e050      	b.n	800507a <UART_SetConfig+0x5a6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fde:	e04c      	b.n	800507a <UART_SetConfig+0x5a6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e048      	b.n	800507a <UART_SetConfig+0x5a6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e044      	b.n	800507a <UART_SetConfig+0x5a6>
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e040      	b.n	800507a <UART_SetConfig+0x5a6>
 8004ff8:	2340      	movs	r3, #64	@ 0x40
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e03c      	b.n	800507a <UART_SetConfig+0x5a6>
 8005000:	2380      	movs	r3, #128	@ 0x80
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e038      	b.n	800507a <UART_SetConfig+0x5a6>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5b      	ldr	r2, [pc, #364]	@ (800517c <UART_SetConfig+0x6a8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d130      	bne.n	8005074 <UART_SetConfig+0x5a0>
 8005012:	4b57      	ldr	r3, [pc, #348]	@ (8005170 <UART_SetConfig+0x69c>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b05      	cmp	r3, #5
 800501c:	d826      	bhi.n	800506c <UART_SetConfig+0x598>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x550>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005045 	.word	0x08005045
 800502c:	0800504d 	.word	0x0800504d
 8005030:	08005055 	.word	0x08005055
 8005034:	0800505d 	.word	0x0800505d
 8005038:	08005065 	.word	0x08005065
 800503c:	2302      	movs	r3, #2
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005042:	e01a      	b.n	800507a <UART_SetConfig+0x5a6>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504a:	e016      	b.n	800507a <UART_SetConfig+0x5a6>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005052:	e012      	b.n	800507a <UART_SetConfig+0x5a6>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e00e      	b.n	800507a <UART_SetConfig+0x5a6>
 800505c:	2320      	movs	r3, #32
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e00a      	b.n	800507a <UART_SetConfig+0x5a6>
 8005064:	2340      	movs	r3, #64	@ 0x40
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e006      	b.n	800507a <UART_SetConfig+0x5a6>
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e002      	b.n	800507a <UART_SetConfig+0x5a6>
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3f      	ldr	r2, [pc, #252]	@ (800517c <UART_SetConfig+0x6a8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	f040 80f8 	bne.w	8005276 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005086:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800508a:	2b20      	cmp	r3, #32
 800508c:	dc46      	bgt.n	800511c <UART_SetConfig+0x648>
 800508e:	2b02      	cmp	r3, #2
 8005090:	f2c0 8082 	blt.w	8005198 <UART_SetConfig+0x6c4>
 8005094:	3b02      	subs	r3, #2
 8005096:	2b1e      	cmp	r3, #30
 8005098:	d87e      	bhi.n	8005198 <UART_SetConfig+0x6c4>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <UART_SetConfig+0x5cc>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	08005123 	.word	0x08005123
 80050a4:	08005199 	.word	0x08005199
 80050a8:	0800512b 	.word	0x0800512b
 80050ac:	08005199 	.word	0x08005199
 80050b0:	08005199 	.word	0x08005199
 80050b4:	08005199 	.word	0x08005199
 80050b8:	0800513b 	.word	0x0800513b
 80050bc:	08005199 	.word	0x08005199
 80050c0:	08005199 	.word	0x08005199
 80050c4:	08005199 	.word	0x08005199
 80050c8:	08005199 	.word	0x08005199
 80050cc:	08005199 	.word	0x08005199
 80050d0:	08005199 	.word	0x08005199
 80050d4:	08005199 	.word	0x08005199
 80050d8:	0800514b 	.word	0x0800514b
 80050dc:	08005199 	.word	0x08005199
 80050e0:	08005199 	.word	0x08005199
 80050e4:	08005199 	.word	0x08005199
 80050e8:	08005199 	.word	0x08005199
 80050ec:	08005199 	.word	0x08005199
 80050f0:	08005199 	.word	0x08005199
 80050f4:	08005199 	.word	0x08005199
 80050f8:	08005199 	.word	0x08005199
 80050fc:	08005199 	.word	0x08005199
 8005100:	08005199 	.word	0x08005199
 8005104:	08005199 	.word	0x08005199
 8005108:	08005199 	.word	0x08005199
 800510c:	08005199 	.word	0x08005199
 8005110:	08005199 	.word	0x08005199
 8005114:	08005199 	.word	0x08005199
 8005118:	0800518b 	.word	0x0800518b
 800511c:	2b40      	cmp	r3, #64	@ 0x40
 800511e:	d037      	beq.n	8005190 <UART_SetConfig+0x6bc>
 8005120:	e03a      	b.n	8005198 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005122:	f7fe ffd7 	bl	80040d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005128:	e03c      	b.n	80051a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800512a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe ffe6 	bl	8004100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005138:	e034      	b.n	80051a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800513a:	f107 0318 	add.w	r3, r7, #24
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff f932 	bl	80043a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005148:	e02c      	b.n	80051a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514a:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <UART_SetConfig+0x69c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <UART_SetConfig+0x69c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	08db      	lsrs	r3, r3, #3
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	4a07      	ldr	r2, [pc, #28]	@ (8005180 <UART_SetConfig+0x6ac>)
 8005162:	fa22 f303 	lsr.w	r3, r2, r3
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005168:	e01c      	b.n	80051a4 <UART_SetConfig+0x6d0>
 800516a:	bf00      	nop
 800516c:	40011400 	.word	0x40011400
 8005170:	58024400 	.word	0x58024400
 8005174:	40007800 	.word	0x40007800
 8005178:	40007c00 	.word	0x40007c00
 800517c:	58000c00 	.word	0x58000c00
 8005180:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005184:	4b9d      	ldr	r3, [pc, #628]	@ (80053fc <UART_SetConfig+0x928>)
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005188:	e00c      	b.n	80051a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800518a:	4b9d      	ldr	r3, [pc, #628]	@ (8005400 <UART_SetConfig+0x92c>)
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800518e:	e009      	b.n	80051a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005190:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005196:	e005      	b.n	80051a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80051a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 81de 	beq.w	8005568 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	4a94      	ldr	r2, [pc, #592]	@ (8005404 <UART_SetConfig+0x930>)
 80051b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b6:	461a      	mov	r2, r3
 80051b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80051be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d305      	bcc.n	80051dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d8:	429a      	cmp	r2, r3
 80051da:	d903      	bls.n	80051e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80051e2:	e1c1      	b.n	8005568 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e6:	2200      	movs	r2, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	60fa      	str	r2, [r7, #12]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	4a84      	ldr	r2, [pc, #528]	@ (8005404 <UART_SetConfig+0x930>)
 80051f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005206:	f7fb f8c3 	bl	8000390 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	020b      	lsls	r3, r1, #8
 800521c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005220:	0202      	lsls	r2, r0, #8
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	6849      	ldr	r1, [r1, #4]
 8005226:	0849      	lsrs	r1, r1, #1
 8005228:	2000      	movs	r0, #0
 800522a:	460c      	mov	r4, r1
 800522c:	4605      	mov	r5, r0
 800522e:	eb12 0804 	adds.w	r8, r2, r4
 8005232:	eb43 0905 	adc.w	r9, r3, r5
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	469a      	mov	sl, r3
 800523e:	4693      	mov	fp, r2
 8005240:	4652      	mov	r2, sl
 8005242:	465b      	mov	r3, fp
 8005244:	4640      	mov	r0, r8
 8005246:	4649      	mov	r1, r9
 8005248:	f7fb f8a2 	bl	8000390 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525a:	d308      	bcc.n	800526e <UART_SetConfig+0x79a>
 800525c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005262:	d204      	bcs.n	800526e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e17c      	b.n	8005568 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005274:	e178      	b.n	8005568 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527e:	f040 80c5 	bne.w	800540c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005282:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005286:	2b20      	cmp	r3, #32
 8005288:	dc48      	bgt.n	800531c <UART_SetConfig+0x848>
 800528a:	2b00      	cmp	r3, #0
 800528c:	db7b      	blt.n	8005386 <UART_SetConfig+0x8b2>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d879      	bhi.n	8005386 <UART_SetConfig+0x8b2>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x7c4>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	08005323 	.word	0x08005323
 800529c:	0800532b 	.word	0x0800532b
 80052a0:	08005387 	.word	0x08005387
 80052a4:	08005387 	.word	0x08005387
 80052a8:	08005333 	.word	0x08005333
 80052ac:	08005387 	.word	0x08005387
 80052b0:	08005387 	.word	0x08005387
 80052b4:	08005387 	.word	0x08005387
 80052b8:	08005343 	.word	0x08005343
 80052bc:	08005387 	.word	0x08005387
 80052c0:	08005387 	.word	0x08005387
 80052c4:	08005387 	.word	0x08005387
 80052c8:	08005387 	.word	0x08005387
 80052cc:	08005387 	.word	0x08005387
 80052d0:	08005387 	.word	0x08005387
 80052d4:	08005387 	.word	0x08005387
 80052d8:	08005353 	.word	0x08005353
 80052dc:	08005387 	.word	0x08005387
 80052e0:	08005387 	.word	0x08005387
 80052e4:	08005387 	.word	0x08005387
 80052e8:	08005387 	.word	0x08005387
 80052ec:	08005387 	.word	0x08005387
 80052f0:	08005387 	.word	0x08005387
 80052f4:	08005387 	.word	0x08005387
 80052f8:	08005387 	.word	0x08005387
 80052fc:	08005387 	.word	0x08005387
 8005300:	08005387 	.word	0x08005387
 8005304:	08005387 	.word	0x08005387
 8005308:	08005387 	.word	0x08005387
 800530c:	08005387 	.word	0x08005387
 8005310:	08005387 	.word	0x08005387
 8005314:	08005387 	.word	0x08005387
 8005318:	08005379 	.word	0x08005379
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d02e      	beq.n	800537e <UART_SetConfig+0x8aa>
 8005320:	e031      	b.n	8005386 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005322:	f7fd fca1 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8005326:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005328:	e033      	b.n	8005392 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800532a:	f7fd fcb3 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 800532e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005330:	e02f      	b.n	8005392 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fee2 	bl	8004100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005340:	e027      	b.n	8005392 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005342:	f107 0318 	add.w	r3, r7, #24
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff f82e 	bl	80043a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005350:	e01f      	b.n	8005392 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005352:	4b2d      	ldr	r3, [pc, #180]	@ (8005408 <UART_SetConfig+0x934>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800535e:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <UART_SetConfig+0x934>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	08db      	lsrs	r3, r3, #3
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	4a24      	ldr	r2, [pc, #144]	@ (80053fc <UART_SetConfig+0x928>)
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005370:	e00f      	b.n	8005392 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005372:	4b22      	ldr	r3, [pc, #136]	@ (80053fc <UART_SetConfig+0x928>)
 8005374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005376:	e00c      	b.n	8005392 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005378:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <UART_SetConfig+0x92c>)
 800537a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800537c:	e009      	b.n	8005392 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005384:	e005      	b.n	8005392 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80e7 	beq.w	8005568 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539e:	4a19      	ldr	r2, [pc, #100]	@ (8005404 <UART_SetConfig+0x930>)
 80053a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ac:	005a      	lsls	r2, r3, #1
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	441a      	add	r2, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	d916      	bls.n	80053f4 <UART_SetConfig+0x920>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053cc:	d212      	bcs.n	80053f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f023 030f 	bic.w	r3, r3, #15
 80053d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053e6:	4313      	orrs	r3, r2
 80053e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	e0b9      	b.n	8005568 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80053fa:	e0b5      	b.n	8005568 <UART_SetConfig+0xa94>
 80053fc:	03d09000 	.word	0x03d09000
 8005400:	003d0900 	.word	0x003d0900
 8005404:	08006bb0 	.word	0x08006bb0
 8005408:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800540c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005410:	2b20      	cmp	r3, #32
 8005412:	dc49      	bgt.n	80054a8 <UART_SetConfig+0x9d4>
 8005414:	2b00      	cmp	r3, #0
 8005416:	db7c      	blt.n	8005512 <UART_SetConfig+0xa3e>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d87a      	bhi.n	8005512 <UART_SetConfig+0xa3e>
 800541c:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <UART_SetConfig+0x950>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	080054af 	.word	0x080054af
 8005428:	080054b7 	.word	0x080054b7
 800542c:	08005513 	.word	0x08005513
 8005430:	08005513 	.word	0x08005513
 8005434:	080054bf 	.word	0x080054bf
 8005438:	08005513 	.word	0x08005513
 800543c:	08005513 	.word	0x08005513
 8005440:	08005513 	.word	0x08005513
 8005444:	080054cf 	.word	0x080054cf
 8005448:	08005513 	.word	0x08005513
 800544c:	08005513 	.word	0x08005513
 8005450:	08005513 	.word	0x08005513
 8005454:	08005513 	.word	0x08005513
 8005458:	08005513 	.word	0x08005513
 800545c:	08005513 	.word	0x08005513
 8005460:	08005513 	.word	0x08005513
 8005464:	080054df 	.word	0x080054df
 8005468:	08005513 	.word	0x08005513
 800546c:	08005513 	.word	0x08005513
 8005470:	08005513 	.word	0x08005513
 8005474:	08005513 	.word	0x08005513
 8005478:	08005513 	.word	0x08005513
 800547c:	08005513 	.word	0x08005513
 8005480:	08005513 	.word	0x08005513
 8005484:	08005513 	.word	0x08005513
 8005488:	08005513 	.word	0x08005513
 800548c:	08005513 	.word	0x08005513
 8005490:	08005513 	.word	0x08005513
 8005494:	08005513 	.word	0x08005513
 8005498:	08005513 	.word	0x08005513
 800549c:	08005513 	.word	0x08005513
 80054a0:	08005513 	.word	0x08005513
 80054a4:	08005505 	.word	0x08005505
 80054a8:	2b40      	cmp	r3, #64	@ 0x40
 80054aa:	d02e      	beq.n	800550a <UART_SetConfig+0xa36>
 80054ac:	e031      	b.n	8005512 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ae:	f7fd fbdb 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 80054b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054b4:	e033      	b.n	800551e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b6:	f7fd fbed 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80054ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054bc:	e02f      	b.n	800551e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe fe1c 	bl	8004100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054cc:	e027      	b.n	800551e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ce:	f107 0318 	add.w	r3, r7, #24
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe ff68 	bl	80043a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054dc:	e01f      	b.n	800551e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054de:	4b2d      	ldr	r3, [pc, #180]	@ (8005594 <UART_SetConfig+0xac0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005594 <UART_SetConfig+0xac0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	08db      	lsrs	r3, r3, #3
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	4a28      	ldr	r2, [pc, #160]	@ (8005598 <UART_SetConfig+0xac4>)
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054fc:	e00f      	b.n	800551e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80054fe:	4b26      	ldr	r3, [pc, #152]	@ (8005598 <UART_SetConfig+0xac4>)
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005502:	e00c      	b.n	800551e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005504:	4b25      	ldr	r3, [pc, #148]	@ (800559c <UART_SetConfig+0xac8>)
 8005506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005508:	e009      	b.n	800551e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005510:	e005      	b.n	800551e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800551c:	bf00      	nop
    }

    if (pclk != 0U)
 800551e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d021      	beq.n	8005568 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <UART_SetConfig+0xacc>)
 800552a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552e:	461a      	mov	r2, r3
 8005530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005532:	fbb3 f2f2 	udiv	r2, r3, r2
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	441a      	add	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554a:	2b0f      	cmp	r3, #15
 800554c:	d909      	bls.n	8005562 <UART_SetConfig+0xa8e>
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005554:	d205      	bcs.n	8005562 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	b29a      	uxth	r2, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60da      	str	r2, [r3, #12]
 8005560:	e002      	b.n	8005568 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2201      	movs	r2, #1
 800556c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2201      	movs	r2, #1
 8005574:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005584:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005588:	4618      	mov	r0, r3
 800558a:	3748      	adds	r7, #72	@ 0x48
 800558c:	46bd      	mov	sp, r7
 800558e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
 8005598:	03d09000 	.word	0x03d09000
 800559c:	003d0900 	.word	0x003d0900
 80055a0:	08006bb0 	.word	0x08006bb0

080055a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01a      	beq.n	80056ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a2:	d10a      	bne.n	80056ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b098      	sub	sp, #96	@ 0x60
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f8:	f7fb fdc2 	bl	8001280 <HAL_GetTick>
 80056fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d12f      	bne.n	800576c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005714:	2200      	movs	r2, #0
 8005716:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f88e 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d022      	beq.n	800576c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573a:	653b      	str	r3, [r7, #80]	@ 0x50
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005744:	647b      	str	r3, [r7, #68]	@ 0x44
 8005746:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800574a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e063      	b.n	8005834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d149      	bne.n	800580e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005782:	2200      	movs	r2, #0
 8005784:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f857 	bl	800583c <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d03c      	beq.n	800580e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3308      	adds	r3, #8
 80057e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e6:	61fa      	str	r2, [r7, #28]
 80057e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	69b9      	ldr	r1, [r7, #24]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	617b      	str	r3, [r7, #20]
   return(result);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e012      	b.n	8005834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3758      	adds	r7, #88	@ 0x58
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584c:	e04f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d04b      	beq.n	80058ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fb fd13 	bl	8001280 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <UART_WaitOnFlagUntilTimeout+0x30>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e04e      	b.n	800590e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	d037      	beq.n	80058ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b80      	cmp	r3, #128	@ 0x80
 8005882:	d034      	beq.n	80058ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d031      	beq.n	80058ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d110      	bne.n	80058ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2208      	movs	r2, #8
 800589e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f839 	bl	8005918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2208      	movs	r2, #8
 80058aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e029      	b.n	800590e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c8:	d111      	bne.n	80058ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f81f 	bl	8005918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e00f      	b.n	800590e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4013      	ands	r3, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	429a      	cmp	r2, r3
 800590a:	d0a0      	beq.n	800584e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b095      	sub	sp, #84	@ 0x54
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005940:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e6      	bne.n	8005920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	61fb      	str	r3, [r7, #28]
   return(result);
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <UART_EndRxTransfer+0xc8>)
 8005966:	4013      	ands	r3, r2
 8005968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800598a:	2b01      	cmp	r3, #1
 800598c:	d118      	bne.n	80059c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60bb      	str	r3, [r7, #8]
   return(result);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059d4:	bf00      	nop
 80059d6:	3754      	adds	r7, #84	@ 0x54
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	effffffe 	.word	0xeffffffe

080059e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_UARTEx_DisableFifoMode+0x16>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e027      	b.n	8005a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2224      	movs	r2, #36	@ 0x24
 8005a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e02d      	b.n	8005aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2224      	movs	r2, #36	@ 0x24
 8005a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f850 	bl	8005b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e02d      	b.n	8005b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2224      	movs	r2, #36	@ 0x24
 8005af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f812 	bl	8005b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d108      	bne.n	8005b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b70:	e031      	b.n	8005bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b72:	2310      	movs	r3, #16
 8005b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b76:	2310      	movs	r3, #16
 8005b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	0e5b      	lsrs	r3, r3, #25
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	0f5b      	lsrs	r3, r3, #29
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	7b3a      	ldrb	r2, [r7, #12]
 8005b9e:	4911      	ldr	r1, [pc, #68]	@ (8005be4 <UARTEx_SetNbDataToProcess+0x94>)
 8005ba0:	5c8a      	ldrb	r2, [r1, r2]
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ba6:	7b3a      	ldrb	r2, [r7, #12]
 8005ba8:	490f      	ldr	r1, [pc, #60]	@ (8005be8 <UARTEx_SetNbDataToProcess+0x98>)
 8005baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	7b7a      	ldrb	r2, [r7, #13]
 8005bbc:	4909      	ldr	r1, [pc, #36]	@ (8005be4 <UARTEx_SetNbDataToProcess+0x94>)
 8005bbe:	5c8a      	ldrb	r2, [r1, r2]
 8005bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bc4:	7b7a      	ldrb	r2, [r7, #13]
 8005bc6:	4908      	ldr	r1, [pc, #32]	@ (8005be8 <UARTEx_SetNbDataToProcess+0x98>)
 8005bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	08006bc8 	.word	0x08006bc8
 8005be8:	08006bd0 	.word	0x08006bd0

08005bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bec:	b084      	sub	sp, #16
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	f107 001c 	add.w	r0, r7, #28
 8005bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d121      	bne.n	8005c4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc8 <USB_CoreInit+0xdc>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d105      	bne.n	8005c3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 faaa 	bl	8006198 <USB_CoreReset>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e01b      	b.n	8005c82 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa9e 	bl	8006198 <USB_CoreReset>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c74:	e005      	b.n	8005c82 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c82:	7fbb      	ldrb	r3, [r7, #30]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d116      	bne.n	8005cb6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <USB_CoreInit+0xe0>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f043 0206 	orr.w	r2, r3, #6
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f043 0220 	orr.w	r2, r3, #32
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cc2:	b004      	add	sp, #16
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	ffbdffbf 	.word	0xffbdffbf
 8005ccc:	03ee0000 	.word	0x03ee0000

08005cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f023 0201 	bic.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d115      	bne.n	8005d40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d20:	200a      	movs	r0, #10
 8005d22:	f7fb fab9 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	330a      	adds	r3, #10
 8005d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fa25 	bl	800617c <USB_GetMode>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d01e      	beq.n	8005d76 <USB_SetCurrentMode+0x84>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d3c:	d9f0      	bls.n	8005d20 <USB_SetCurrentMode+0x2e>
 8005d3e:	e01a      	b.n	8005d76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d115      	bne.n	8005d72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d52:	200a      	movs	r0, #10
 8005d54:	f7fb faa0 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	330a      	adds	r3, #10
 8005d5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa0c 	bl	800617c <USB_GetMode>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <USB_SetCurrentMode+0x84>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d6e:	d9f0      	bls.n	8005d52 <USB_SetCurrentMode+0x60>
 8005d70:	e001      	b.n	8005d76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e005      	b.n	8005d82 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d7a:	d101      	bne.n	8005d80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b086      	sub	sp, #24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e009      	b.n	8005dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3340      	adds	r3, #64	@ 0x40
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b0e      	cmp	r3, #14
 8005dc4:	d9f2      	bls.n	8005dac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11c      	bne.n	8005e08 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ddc:	f043 0302 	orr.w	r3, r3, #2
 8005de0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e005      	b.n	8005e14 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e20:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10d      	bne.n	8005e44 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e30:	2100      	movs	r1, #0
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f968 	bl	8006108 <USB_SetDevSpeed>
 8005e38:	e008      	b.n	8005e4c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f963 	bl	8006108 <USB_SetDevSpeed>
 8005e42:	e003      	b.n	8005e4c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e44:	2103      	movs	r1, #3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f95e 	bl	8006108 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e4c:	2110      	movs	r1, #16
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8fa 	bl	8006048 <USB_FlushTxFifo>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f924 	bl	80060ac <USB_FlushRxFifo>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	e043      	b.n	8005f20 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eae:	d118      	bne.n	8005ee2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e013      	b.n	8005ef4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e008      	b.n	8005ef4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	461a      	mov	r2, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f12:	461a      	mov	r2, r3
 8005f14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f24:	461a      	mov	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d3b5      	bcc.n	8005e98 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e043      	b.n	8005fba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f48:	d118      	bne.n	8005f7c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e013      	b.n	8005f8e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f72:	461a      	mov	r2, r3
 8005f74:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e008      	b.n	8005f8e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fac:	461a      	mov	r2, r3
 8005fae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d3b5      	bcc.n	8005f32 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005fe6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fe8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f043 0210 	orr.w	r2, r3, #16
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <USB_DevInit+0x2b4>)
 8006002:	4313      	orrs	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006008:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f043 0208 	orr.w	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800601c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <USB_DevInit+0x2b8>)
 800602a:	4313      	orrs	r3, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800603c:	b004      	add	sp, #16
 800603e:	4770      	bx	lr
 8006040:	803c3800 	.word	0x803c3800
 8006044:	40000004 	.word	0x40000004

08006048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3301      	adds	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006062:	d901      	bls.n	8006068 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e01b      	b.n	80060a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	daf2      	bge.n	8006056 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	019b      	lsls	r3, r3, #6
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800608c:	d901      	bls.n	8006092 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e006      	b.n	80060a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b20      	cmp	r3, #32
 800609c:	d0f0      	beq.n	8006080 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c4:	d901      	bls.n	80060ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e018      	b.n	80060fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	daf2      	bge.n	80060b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2210      	movs	r2, #16
 80060da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e8:	d901      	bls.n	80060ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e006      	b.n	80060fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b10      	cmp	r3, #16
 80060f8:	d0f0      	beq.n	80060dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006154:	f023 0303 	bic.w	r3, r3, #3
 8006158:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0301 	and.w	r3, r3, #1
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b0:	d901      	bls.n	80061b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e01b      	b.n	80061ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	daf2      	bge.n	80061a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f043 0201 	orr.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061da:	d901      	bls.n	80061e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e006      	b.n	80061ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d0f0      	beq.n	80061ce <USB_CoreReset+0x36>

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <siprintf>:
 80061fc:	b40e      	push	{r1, r2, r3}
 80061fe:	b500      	push	{lr}
 8006200:	b09c      	sub	sp, #112	@ 0x70
 8006202:	ab1d      	add	r3, sp, #116	@ 0x74
 8006204:	9002      	str	r0, [sp, #8]
 8006206:	9006      	str	r0, [sp, #24]
 8006208:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800620c:	4809      	ldr	r0, [pc, #36]	@ (8006234 <siprintf+0x38>)
 800620e:	9107      	str	r1, [sp, #28]
 8006210:	9104      	str	r1, [sp, #16]
 8006212:	4909      	ldr	r1, [pc, #36]	@ (8006238 <siprintf+0x3c>)
 8006214:	f853 2b04 	ldr.w	r2, [r3], #4
 8006218:	9105      	str	r1, [sp, #20]
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	a902      	add	r1, sp, #8
 8006220:	f000 f994 	bl	800654c <_svfiprintf_r>
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	b01c      	add	sp, #112	@ 0x70
 800622c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006230:	b003      	add	sp, #12
 8006232:	4770      	bx	lr
 8006234:	24000028 	.word	0x24000028
 8006238:	ffff0208 	.word	0xffff0208

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <__errno>:
 800624c:	4b01      	ldr	r3, [pc, #4]	@ (8006254 <__errno+0x8>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	24000028 	.word	0x24000028

08006258 <__libc_init_array>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4d0d      	ldr	r5, [pc, #52]	@ (8006290 <__libc_init_array+0x38>)
 800625c:	4c0d      	ldr	r4, [pc, #52]	@ (8006294 <__libc_init_array+0x3c>)
 800625e:	1b64      	subs	r4, r4, r5
 8006260:	10a4      	asrs	r4, r4, #2
 8006262:	2600      	movs	r6, #0
 8006264:	42a6      	cmp	r6, r4
 8006266:	d109      	bne.n	800627c <__libc_init_array+0x24>
 8006268:	4d0b      	ldr	r5, [pc, #44]	@ (8006298 <__libc_init_array+0x40>)
 800626a:	4c0c      	ldr	r4, [pc, #48]	@ (800629c <__libc_init_array+0x44>)
 800626c:	f000 fc66 	bl	8006b3c <_init>
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	2600      	movs	r6, #0
 8006276:	42a6      	cmp	r6, r4
 8006278:	d105      	bne.n	8006286 <__libc_init_array+0x2e>
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006280:	4798      	blx	r3
 8006282:	3601      	adds	r6, #1
 8006284:	e7ee      	b.n	8006264 <__libc_init_array+0xc>
 8006286:	f855 3b04 	ldr.w	r3, [r5], #4
 800628a:	4798      	blx	r3
 800628c:	3601      	adds	r6, #1
 800628e:	e7f2      	b.n	8006276 <__libc_init_array+0x1e>
 8006290:	08006c14 	.word	0x08006c14
 8006294:	08006c14 	.word	0x08006c14
 8006298:	08006c14 	.word	0x08006c14
 800629c:	08006c18 	.word	0x08006c18

080062a0 <__retarget_lock_acquire_recursive>:
 80062a0:	4770      	bx	lr

080062a2 <__retarget_lock_release_recursive>:
 80062a2:	4770      	bx	lr

080062a4 <_free_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4605      	mov	r5, r0
 80062a8:	2900      	cmp	r1, #0
 80062aa:	d041      	beq.n	8006330 <_free_r+0x8c>
 80062ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b0:	1f0c      	subs	r4, r1, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfb8      	it	lt
 80062b6:	18e4      	addlt	r4, r4, r3
 80062b8:	f000 f8e0 	bl	800647c <__malloc_lock>
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <_free_r+0x90>)
 80062be:	6813      	ldr	r3, [r2, #0]
 80062c0:	b933      	cbnz	r3, 80062d0 <_free_r+0x2c>
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	6014      	str	r4, [r2, #0]
 80062c6:	4628      	mov	r0, r5
 80062c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062cc:	f000 b8dc 	b.w	8006488 <__malloc_unlock>
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d908      	bls.n	80062e6 <_free_r+0x42>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	1821      	adds	r1, r4, r0
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf01      	itttt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	e7ed      	b.n	80062c2 <_free_r+0x1e>
 80062e6:	461a      	mov	r2, r3
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	b10b      	cbz	r3, 80062f0 <_free_r+0x4c>
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	d9fa      	bls.n	80062e6 <_free_r+0x42>
 80062f0:	6811      	ldr	r1, [r2, #0]
 80062f2:	1850      	adds	r0, r2, r1
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d10b      	bne.n	8006310 <_free_r+0x6c>
 80062f8:	6820      	ldr	r0, [r4, #0]
 80062fa:	4401      	add	r1, r0
 80062fc:	1850      	adds	r0, r2, r1
 80062fe:	4283      	cmp	r3, r0
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	d1e0      	bne.n	80062c6 <_free_r+0x22>
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	6053      	str	r3, [r2, #4]
 800630a:	4408      	add	r0, r1
 800630c:	6010      	str	r0, [r2, #0]
 800630e:	e7da      	b.n	80062c6 <_free_r+0x22>
 8006310:	d902      	bls.n	8006318 <_free_r+0x74>
 8006312:	230c      	movs	r3, #12
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	e7d6      	b.n	80062c6 <_free_r+0x22>
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	1821      	adds	r1, r4, r0
 800631c:	428b      	cmp	r3, r1
 800631e:	bf04      	itt	eq
 8006320:	6819      	ldreq	r1, [r3, #0]
 8006322:	685b      	ldreq	r3, [r3, #4]
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	bf04      	itt	eq
 8006328:	1809      	addeq	r1, r1, r0
 800632a:	6021      	streq	r1, [r4, #0]
 800632c:	6054      	str	r4, [r2, #4]
 800632e:	e7ca      	b.n	80062c6 <_free_r+0x22>
 8006330:	bd38      	pop	{r3, r4, r5, pc}
 8006332:	bf00      	nop
 8006334:	24000768 	.word	0x24000768

08006338 <sbrk_aligned>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	4e0f      	ldr	r6, [pc, #60]	@ (8006378 <sbrk_aligned+0x40>)
 800633c:	460c      	mov	r4, r1
 800633e:	6831      	ldr	r1, [r6, #0]
 8006340:	4605      	mov	r5, r0
 8006342:	b911      	cbnz	r1, 800634a <sbrk_aligned+0x12>
 8006344:	f000 fba6 	bl	8006a94 <_sbrk_r>
 8006348:	6030      	str	r0, [r6, #0]
 800634a:	4621      	mov	r1, r4
 800634c:	4628      	mov	r0, r5
 800634e:	f000 fba1 	bl	8006a94 <_sbrk_r>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	d103      	bne.n	800635e <sbrk_aligned+0x26>
 8006356:	f04f 34ff 	mov.w	r4, #4294967295
 800635a:	4620      	mov	r0, r4
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	1cc4      	adds	r4, r0, #3
 8006360:	f024 0403 	bic.w	r4, r4, #3
 8006364:	42a0      	cmp	r0, r4
 8006366:	d0f8      	beq.n	800635a <sbrk_aligned+0x22>
 8006368:	1a21      	subs	r1, r4, r0
 800636a:	4628      	mov	r0, r5
 800636c:	f000 fb92 	bl	8006a94 <_sbrk_r>
 8006370:	3001      	adds	r0, #1
 8006372:	d1f2      	bne.n	800635a <sbrk_aligned+0x22>
 8006374:	e7ef      	b.n	8006356 <sbrk_aligned+0x1e>
 8006376:	bf00      	nop
 8006378:	24000764 	.word	0x24000764

0800637c <_malloc_r>:
 800637c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006380:	1ccd      	adds	r5, r1, #3
 8006382:	f025 0503 	bic.w	r5, r5, #3
 8006386:	3508      	adds	r5, #8
 8006388:	2d0c      	cmp	r5, #12
 800638a:	bf38      	it	cc
 800638c:	250c      	movcc	r5, #12
 800638e:	2d00      	cmp	r5, #0
 8006390:	4606      	mov	r6, r0
 8006392:	db01      	blt.n	8006398 <_malloc_r+0x1c>
 8006394:	42a9      	cmp	r1, r5
 8006396:	d904      	bls.n	80063a2 <_malloc_r+0x26>
 8006398:	230c      	movs	r3, #12
 800639a:	6033      	str	r3, [r6, #0]
 800639c:	2000      	movs	r0, #0
 800639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006478 <_malloc_r+0xfc>
 80063a6:	f000 f869 	bl	800647c <__malloc_lock>
 80063aa:	f8d8 3000 	ldr.w	r3, [r8]
 80063ae:	461c      	mov	r4, r3
 80063b0:	bb44      	cbnz	r4, 8006404 <_malloc_r+0x88>
 80063b2:	4629      	mov	r1, r5
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff ffbf 	bl	8006338 <sbrk_aligned>
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	4604      	mov	r4, r0
 80063be:	d158      	bne.n	8006472 <_malloc_r+0xf6>
 80063c0:	f8d8 4000 	ldr.w	r4, [r8]
 80063c4:	4627      	mov	r7, r4
 80063c6:	2f00      	cmp	r7, #0
 80063c8:	d143      	bne.n	8006452 <_malloc_r+0xd6>
 80063ca:	2c00      	cmp	r4, #0
 80063cc:	d04b      	beq.n	8006466 <_malloc_r+0xea>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	4639      	mov	r1, r7
 80063d2:	4630      	mov	r0, r6
 80063d4:	eb04 0903 	add.w	r9, r4, r3
 80063d8:	f000 fb5c 	bl	8006a94 <_sbrk_r>
 80063dc:	4581      	cmp	r9, r0
 80063de:	d142      	bne.n	8006466 <_malloc_r+0xea>
 80063e0:	6821      	ldr	r1, [r4, #0]
 80063e2:	1a6d      	subs	r5, r5, r1
 80063e4:	4629      	mov	r1, r5
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7ff ffa6 	bl	8006338 <sbrk_aligned>
 80063ec:	3001      	adds	r0, #1
 80063ee:	d03a      	beq.n	8006466 <_malloc_r+0xea>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	442b      	add	r3, r5
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	f8d8 3000 	ldr.w	r3, [r8]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	bb62      	cbnz	r2, 8006458 <_malloc_r+0xdc>
 80063fe:	f8c8 7000 	str.w	r7, [r8]
 8006402:	e00f      	b.n	8006424 <_malloc_r+0xa8>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	1b52      	subs	r2, r2, r5
 8006408:	d420      	bmi.n	800644c <_malloc_r+0xd0>
 800640a:	2a0b      	cmp	r2, #11
 800640c:	d917      	bls.n	800643e <_malloc_r+0xc2>
 800640e:	1961      	adds	r1, r4, r5
 8006410:	42a3      	cmp	r3, r4
 8006412:	6025      	str	r5, [r4, #0]
 8006414:	bf18      	it	ne
 8006416:	6059      	strne	r1, [r3, #4]
 8006418:	6863      	ldr	r3, [r4, #4]
 800641a:	bf08      	it	eq
 800641c:	f8c8 1000 	streq.w	r1, [r8]
 8006420:	5162      	str	r2, [r4, r5]
 8006422:	604b      	str	r3, [r1, #4]
 8006424:	4630      	mov	r0, r6
 8006426:	f000 f82f 	bl	8006488 <__malloc_unlock>
 800642a:	f104 000b 	add.w	r0, r4, #11
 800642e:	1d23      	adds	r3, r4, #4
 8006430:	f020 0007 	bic.w	r0, r0, #7
 8006434:	1ac2      	subs	r2, r0, r3
 8006436:	bf1c      	itt	ne
 8006438:	1a1b      	subne	r3, r3, r0
 800643a:	50a3      	strne	r3, [r4, r2]
 800643c:	e7af      	b.n	800639e <_malloc_r+0x22>
 800643e:	6862      	ldr	r2, [r4, #4]
 8006440:	42a3      	cmp	r3, r4
 8006442:	bf0c      	ite	eq
 8006444:	f8c8 2000 	streq.w	r2, [r8]
 8006448:	605a      	strne	r2, [r3, #4]
 800644a:	e7eb      	b.n	8006424 <_malloc_r+0xa8>
 800644c:	4623      	mov	r3, r4
 800644e:	6864      	ldr	r4, [r4, #4]
 8006450:	e7ae      	b.n	80063b0 <_malloc_r+0x34>
 8006452:	463c      	mov	r4, r7
 8006454:	687f      	ldr	r7, [r7, #4]
 8006456:	e7b6      	b.n	80063c6 <_malloc_r+0x4a>
 8006458:	461a      	mov	r2, r3
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	42a3      	cmp	r3, r4
 800645e:	d1fb      	bne.n	8006458 <_malloc_r+0xdc>
 8006460:	2300      	movs	r3, #0
 8006462:	6053      	str	r3, [r2, #4]
 8006464:	e7de      	b.n	8006424 <_malloc_r+0xa8>
 8006466:	230c      	movs	r3, #12
 8006468:	6033      	str	r3, [r6, #0]
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f80c 	bl	8006488 <__malloc_unlock>
 8006470:	e794      	b.n	800639c <_malloc_r+0x20>
 8006472:	6005      	str	r5, [r0, #0]
 8006474:	e7d6      	b.n	8006424 <_malloc_r+0xa8>
 8006476:	bf00      	nop
 8006478:	24000768 	.word	0x24000768

0800647c <__malloc_lock>:
 800647c:	4801      	ldr	r0, [pc, #4]	@ (8006484 <__malloc_lock+0x8>)
 800647e:	f7ff bf0f 	b.w	80062a0 <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	24000760 	.word	0x24000760

08006488 <__malloc_unlock>:
 8006488:	4801      	ldr	r0, [pc, #4]	@ (8006490 <__malloc_unlock+0x8>)
 800648a:	f7ff bf0a 	b.w	80062a2 <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	24000760 	.word	0x24000760

08006494 <__ssputs_r>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	688e      	ldr	r6, [r1, #8]
 800649a:	461f      	mov	r7, r3
 800649c:	42be      	cmp	r6, r7
 800649e:	680b      	ldr	r3, [r1, #0]
 80064a0:	4682      	mov	sl, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4690      	mov	r8, r2
 80064a6:	d82d      	bhi.n	8006504 <__ssputs_r+0x70>
 80064a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064b0:	d026      	beq.n	8006500 <__ssputs_r+0x6c>
 80064b2:	6965      	ldr	r5, [r4, #20]
 80064b4:	6909      	ldr	r1, [r1, #16]
 80064b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ba:	eba3 0901 	sub.w	r9, r3, r1
 80064be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064c2:	1c7b      	adds	r3, r7, #1
 80064c4:	444b      	add	r3, r9
 80064c6:	106d      	asrs	r5, r5, #1
 80064c8:	429d      	cmp	r5, r3
 80064ca:	bf38      	it	cc
 80064cc:	461d      	movcc	r5, r3
 80064ce:	0553      	lsls	r3, r2, #21
 80064d0:	d527      	bpl.n	8006522 <__ssputs_r+0x8e>
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7ff ff52 	bl	800637c <_malloc_r>
 80064d8:	4606      	mov	r6, r0
 80064da:	b360      	cbz	r0, 8006536 <__ssputs_r+0xa2>
 80064dc:	6921      	ldr	r1, [r4, #16]
 80064de:	464a      	mov	r2, r9
 80064e0:	f000 fae8 	bl	8006ab4 <memcpy>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	6126      	str	r6, [r4, #16]
 80064f2:	6165      	str	r5, [r4, #20]
 80064f4:	444e      	add	r6, r9
 80064f6:	eba5 0509 	sub.w	r5, r5, r9
 80064fa:	6026      	str	r6, [r4, #0]
 80064fc:	60a5      	str	r5, [r4, #8]
 80064fe:	463e      	mov	r6, r7
 8006500:	42be      	cmp	r6, r7
 8006502:	d900      	bls.n	8006506 <__ssputs_r+0x72>
 8006504:	463e      	mov	r6, r7
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	4632      	mov	r2, r6
 800650a:	4641      	mov	r1, r8
 800650c:	f000 faa8 	bl	8006a60 <memmove>
 8006510:	68a3      	ldr	r3, [r4, #8]
 8006512:	1b9b      	subs	r3, r3, r6
 8006514:	60a3      	str	r3, [r4, #8]
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	4433      	add	r3, r6
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	2000      	movs	r0, #0
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	462a      	mov	r2, r5
 8006524:	f000 fad4 	bl	8006ad0 <_realloc_r>
 8006528:	4606      	mov	r6, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	d1e0      	bne.n	80064f0 <__ssputs_r+0x5c>
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	4650      	mov	r0, sl
 8006532:	f7ff feb7 	bl	80062a4 <_free_r>
 8006536:	230c      	movs	r3, #12
 8006538:	f8ca 3000 	str.w	r3, [sl]
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	e7e9      	b.n	800651e <__ssputs_r+0x8a>
	...

0800654c <_svfiprintf_r>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	4698      	mov	r8, r3
 8006552:	898b      	ldrh	r3, [r1, #12]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	b09d      	sub	sp, #116	@ 0x74
 8006558:	4607      	mov	r7, r0
 800655a:	460d      	mov	r5, r1
 800655c:	4614      	mov	r4, r2
 800655e:	d510      	bpl.n	8006582 <_svfiprintf_r+0x36>
 8006560:	690b      	ldr	r3, [r1, #16]
 8006562:	b973      	cbnz	r3, 8006582 <_svfiprintf_r+0x36>
 8006564:	2140      	movs	r1, #64	@ 0x40
 8006566:	f7ff ff09 	bl	800637c <_malloc_r>
 800656a:	6028      	str	r0, [r5, #0]
 800656c:	6128      	str	r0, [r5, #16]
 800656e:	b930      	cbnz	r0, 800657e <_svfiprintf_r+0x32>
 8006570:	230c      	movs	r3, #12
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	b01d      	add	sp, #116	@ 0x74
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	2340      	movs	r3, #64	@ 0x40
 8006580:	616b      	str	r3, [r5, #20]
 8006582:	2300      	movs	r3, #0
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	2320      	movs	r3, #32
 8006588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800658c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006590:	2330      	movs	r3, #48	@ 0x30
 8006592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006730 <_svfiprintf_r+0x1e4>
 8006596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800659a:	f04f 0901 	mov.w	r9, #1
 800659e:	4623      	mov	r3, r4
 80065a0:	469a      	mov	sl, r3
 80065a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a6:	b10a      	cbz	r2, 80065ac <_svfiprintf_r+0x60>
 80065a8:	2a25      	cmp	r2, #37	@ 0x25
 80065aa:	d1f9      	bne.n	80065a0 <_svfiprintf_r+0x54>
 80065ac:	ebba 0b04 	subs.w	fp, sl, r4
 80065b0:	d00b      	beq.n	80065ca <_svfiprintf_r+0x7e>
 80065b2:	465b      	mov	r3, fp
 80065b4:	4622      	mov	r2, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ff6b 	bl	8006494 <__ssputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	f000 80a7 	beq.w	8006712 <_svfiprintf_r+0x1c6>
 80065c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c6:	445a      	add	r2, fp
 80065c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ca:	f89a 3000 	ldrb.w	r3, [sl]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 809f 	beq.w	8006712 <_svfiprintf_r+0x1c6>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065de:	f10a 0a01 	add.w	sl, sl, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ec:	4654      	mov	r4, sl
 80065ee:	2205      	movs	r2, #5
 80065f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f4:	484e      	ldr	r0, [pc, #312]	@ (8006730 <_svfiprintf_r+0x1e4>)
 80065f6:	f7f9 fe7b 	bl	80002f0 <memchr>
 80065fa:	9a04      	ldr	r2, [sp, #16]
 80065fc:	b9d8      	cbnz	r0, 8006636 <_svfiprintf_r+0xea>
 80065fe:	06d0      	lsls	r0, r2, #27
 8006600:	bf44      	itt	mi
 8006602:	2320      	movmi	r3, #32
 8006604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006608:	0711      	lsls	r1, r2, #28
 800660a:	bf44      	itt	mi
 800660c:	232b      	movmi	r3, #43	@ 0x2b
 800660e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006612:	f89a 3000 	ldrb.w	r3, [sl]
 8006616:	2b2a      	cmp	r3, #42	@ 0x2a
 8006618:	d015      	beq.n	8006646 <_svfiprintf_r+0xfa>
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	4654      	mov	r4, sl
 800661e:	2000      	movs	r0, #0
 8006620:	f04f 0c0a 	mov.w	ip, #10
 8006624:	4621      	mov	r1, r4
 8006626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662a:	3b30      	subs	r3, #48	@ 0x30
 800662c:	2b09      	cmp	r3, #9
 800662e:	d94b      	bls.n	80066c8 <_svfiprintf_r+0x17c>
 8006630:	b1b0      	cbz	r0, 8006660 <_svfiprintf_r+0x114>
 8006632:	9207      	str	r2, [sp, #28]
 8006634:	e014      	b.n	8006660 <_svfiprintf_r+0x114>
 8006636:	eba0 0308 	sub.w	r3, r0, r8
 800663a:	fa09 f303 	lsl.w	r3, r9, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	46a2      	mov	sl, r4
 8006644:	e7d2      	b.n	80065ec <_svfiprintf_r+0xa0>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	1d19      	adds	r1, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9103      	str	r1, [sp, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfbb      	ittet	lt
 8006652:	425b      	neglt	r3, r3
 8006654:	f042 0202 	orrlt.w	r2, r2, #2
 8006658:	9307      	strge	r3, [sp, #28]
 800665a:	9307      	strlt	r3, [sp, #28]
 800665c:	bfb8      	it	lt
 800665e:	9204      	strlt	r2, [sp, #16]
 8006660:	7823      	ldrb	r3, [r4, #0]
 8006662:	2b2e      	cmp	r3, #46	@ 0x2e
 8006664:	d10a      	bne.n	800667c <_svfiprintf_r+0x130>
 8006666:	7863      	ldrb	r3, [r4, #1]
 8006668:	2b2a      	cmp	r3, #42	@ 0x2a
 800666a:	d132      	bne.n	80066d2 <_svfiprintf_r+0x186>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	9203      	str	r2, [sp, #12]
 8006674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006678:	3402      	adds	r4, #2
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006740 <_svfiprintf_r+0x1f4>
 8006680:	7821      	ldrb	r1, [r4, #0]
 8006682:	2203      	movs	r2, #3
 8006684:	4650      	mov	r0, sl
 8006686:	f7f9 fe33 	bl	80002f0 <memchr>
 800668a:	b138      	cbz	r0, 800669c <_svfiprintf_r+0x150>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	eba0 000a 	sub.w	r0, r0, sl
 8006692:	2240      	movs	r2, #64	@ 0x40
 8006694:	4082      	lsls	r2, r0
 8006696:	4313      	orrs	r3, r2
 8006698:	3401      	adds	r4, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	4824      	ldr	r0, [pc, #144]	@ (8006734 <_svfiprintf_r+0x1e8>)
 80066a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066a6:	2206      	movs	r2, #6
 80066a8:	f7f9 fe22 	bl	80002f0 <memchr>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d036      	beq.n	800671e <_svfiprintf_r+0x1d2>
 80066b0:	4b21      	ldr	r3, [pc, #132]	@ (8006738 <_svfiprintf_r+0x1ec>)
 80066b2:	bb1b      	cbnz	r3, 80066fc <_svfiprintf_r+0x1b0>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	3307      	adds	r3, #7
 80066b8:	f023 0307 	bic.w	r3, r3, #7
 80066bc:	3308      	adds	r3, #8
 80066be:	9303      	str	r3, [sp, #12]
 80066c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c2:	4433      	add	r3, r6
 80066c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c6:	e76a      	b.n	800659e <_svfiprintf_r+0x52>
 80066c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066cc:	460c      	mov	r4, r1
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7a8      	b.n	8006624 <_svfiprintf_r+0xd8>
 80066d2:	2300      	movs	r3, #0
 80066d4:	3401      	adds	r4, #1
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	4619      	mov	r1, r3
 80066da:	f04f 0c0a 	mov.w	ip, #10
 80066de:	4620      	mov	r0, r4
 80066e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e4:	3a30      	subs	r2, #48	@ 0x30
 80066e6:	2a09      	cmp	r2, #9
 80066e8:	d903      	bls.n	80066f2 <_svfiprintf_r+0x1a6>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0c6      	beq.n	800667c <_svfiprintf_r+0x130>
 80066ee:	9105      	str	r1, [sp, #20]
 80066f0:	e7c4      	b.n	800667c <_svfiprintf_r+0x130>
 80066f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f6:	4604      	mov	r4, r0
 80066f8:	2301      	movs	r3, #1
 80066fa:	e7f0      	b.n	80066de <_svfiprintf_r+0x192>
 80066fc:	ab03      	add	r3, sp, #12
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	462a      	mov	r2, r5
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <_svfiprintf_r+0x1f0>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	4638      	mov	r0, r7
 8006708:	f3af 8000 	nop.w
 800670c:	1c42      	adds	r2, r0, #1
 800670e:	4606      	mov	r6, r0
 8006710:	d1d6      	bne.n	80066c0 <_svfiprintf_r+0x174>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	065b      	lsls	r3, r3, #25
 8006716:	f53f af2d 	bmi.w	8006574 <_svfiprintf_r+0x28>
 800671a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800671c:	e72c      	b.n	8006578 <_svfiprintf_r+0x2c>
 800671e:	ab03      	add	r3, sp, #12
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	462a      	mov	r2, r5
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <_svfiprintf_r+0x1f0>)
 8006726:	a904      	add	r1, sp, #16
 8006728:	4638      	mov	r0, r7
 800672a:	f000 f879 	bl	8006820 <_printf_i>
 800672e:	e7ed      	b.n	800670c <_svfiprintf_r+0x1c0>
 8006730:	08006bd8 	.word	0x08006bd8
 8006734:	08006be2 	.word	0x08006be2
 8006738:	00000000 	.word	0x00000000
 800673c:	08006495 	.word	0x08006495
 8006740:	08006bde 	.word	0x08006bde

08006744 <_printf_common>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	4616      	mov	r6, r2
 800674a:	4698      	mov	r8, r3
 800674c:	688a      	ldr	r2, [r1, #8]
 800674e:	690b      	ldr	r3, [r1, #16]
 8006750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006754:	4293      	cmp	r3, r2
 8006756:	bfb8      	it	lt
 8006758:	4613      	movlt	r3, r2
 800675a:	6033      	str	r3, [r6, #0]
 800675c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006760:	4607      	mov	r7, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b10a      	cbz	r2, 800676a <_printf_common+0x26>
 8006766:	3301      	adds	r3, #1
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	0699      	lsls	r1, r3, #26
 800676e:	bf42      	ittt	mi
 8006770:	6833      	ldrmi	r3, [r6, #0]
 8006772:	3302      	addmi	r3, #2
 8006774:	6033      	strmi	r3, [r6, #0]
 8006776:	6825      	ldr	r5, [r4, #0]
 8006778:	f015 0506 	ands.w	r5, r5, #6
 800677c:	d106      	bne.n	800678c <_printf_common+0x48>
 800677e:	f104 0a19 	add.w	sl, r4, #25
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	6832      	ldr	r2, [r6, #0]
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	42ab      	cmp	r3, r5
 800678a:	dc26      	bgt.n	80067da <_printf_common+0x96>
 800678c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006790:	6822      	ldr	r2, [r4, #0]
 8006792:	3b00      	subs	r3, #0
 8006794:	bf18      	it	ne
 8006796:	2301      	movne	r3, #1
 8006798:	0692      	lsls	r2, r2, #26
 800679a:	d42b      	bmi.n	80067f4 <_printf_common+0xb0>
 800679c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067a0:	4641      	mov	r1, r8
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c8      	blx	r9
 80067a6:	3001      	adds	r0, #1
 80067a8:	d01e      	beq.n	80067e8 <_printf_common+0xa4>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	f003 0306 	and.w	r3, r3, #6
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	bf02      	ittt	eq
 80067b6:	68e5      	ldreq	r5, [r4, #12]
 80067b8:	6833      	ldreq	r3, [r6, #0]
 80067ba:	1aed      	subeq	r5, r5, r3
 80067bc:	68a3      	ldr	r3, [r4, #8]
 80067be:	bf0c      	ite	eq
 80067c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c4:	2500      	movne	r5, #0
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bfc4      	itt	gt
 80067ca:	1a9b      	subgt	r3, r3, r2
 80067cc:	18ed      	addgt	r5, r5, r3
 80067ce:	2600      	movs	r6, #0
 80067d0:	341a      	adds	r4, #26
 80067d2:	42b5      	cmp	r5, r6
 80067d4:	d11a      	bne.n	800680c <_printf_common+0xc8>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e008      	b.n	80067ec <_printf_common+0xa8>
 80067da:	2301      	movs	r3, #1
 80067dc:	4652      	mov	r2, sl
 80067de:	4641      	mov	r1, r8
 80067e0:	4638      	mov	r0, r7
 80067e2:	47c8      	blx	r9
 80067e4:	3001      	adds	r0, #1
 80067e6:	d103      	bne.n	80067f0 <_printf_common+0xac>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f0:	3501      	adds	r5, #1
 80067f2:	e7c6      	b.n	8006782 <_printf_common+0x3e>
 80067f4:	18e1      	adds	r1, r4, r3
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	2030      	movs	r0, #48	@ 0x30
 80067fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067fe:	4422      	add	r2, r4
 8006800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006808:	3302      	adds	r3, #2
 800680a:	e7c7      	b.n	800679c <_printf_common+0x58>
 800680c:	2301      	movs	r3, #1
 800680e:	4622      	mov	r2, r4
 8006810:	4641      	mov	r1, r8
 8006812:	4638      	mov	r0, r7
 8006814:	47c8      	blx	r9
 8006816:	3001      	adds	r0, #1
 8006818:	d0e6      	beq.n	80067e8 <_printf_common+0xa4>
 800681a:	3601      	adds	r6, #1
 800681c:	e7d9      	b.n	80067d2 <_printf_common+0x8e>
	...

08006820 <_printf_i>:
 8006820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	7e0f      	ldrb	r7, [r1, #24]
 8006826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006828:	2f78      	cmp	r7, #120	@ 0x78
 800682a:	4691      	mov	r9, r2
 800682c:	4680      	mov	r8, r0
 800682e:	460c      	mov	r4, r1
 8006830:	469a      	mov	sl, r3
 8006832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006836:	d807      	bhi.n	8006848 <_printf_i+0x28>
 8006838:	2f62      	cmp	r7, #98	@ 0x62
 800683a:	d80a      	bhi.n	8006852 <_printf_i+0x32>
 800683c:	2f00      	cmp	r7, #0
 800683e:	f000 80d2 	beq.w	80069e6 <_printf_i+0x1c6>
 8006842:	2f58      	cmp	r7, #88	@ 0x58
 8006844:	f000 80b9 	beq.w	80069ba <_printf_i+0x19a>
 8006848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800684c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006850:	e03a      	b.n	80068c8 <_printf_i+0xa8>
 8006852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006856:	2b15      	cmp	r3, #21
 8006858:	d8f6      	bhi.n	8006848 <_printf_i+0x28>
 800685a:	a101      	add	r1, pc, #4	@ (adr r1, 8006860 <_printf_i+0x40>)
 800685c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068cd 	.word	0x080068cd
 8006868:	08006849 	.word	0x08006849
 800686c:	08006849 	.word	0x08006849
 8006870:	08006849 	.word	0x08006849
 8006874:	08006849 	.word	0x08006849
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006849 	.word	0x08006849
 8006880:	08006849 	.word	0x08006849
 8006884:	08006849 	.word	0x08006849
 8006888:	08006849 	.word	0x08006849
 800688c:	080069cd 	.word	0x080069cd
 8006890:	080068f7 	.word	0x080068f7
 8006894:	08006987 	.word	0x08006987
 8006898:	08006849 	.word	0x08006849
 800689c:	08006849 	.word	0x08006849
 80068a0:	080069ef 	.word	0x080069ef
 80068a4:	08006849 	.word	0x08006849
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	08006849 	.word	0x08006849
 80068b0:	08006849 	.word	0x08006849
 80068b4:	0800698f 	.word	0x0800698f
 80068b8:	6833      	ldr	r3, [r6, #0]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6032      	str	r2, [r6, #0]
 80068c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068c8:	2301      	movs	r3, #1
 80068ca:	e09d      	b.n	8006a08 <_printf_i+0x1e8>
 80068cc:	6833      	ldr	r3, [r6, #0]
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	6031      	str	r1, [r6, #0]
 80068d4:	0606      	lsls	r6, r0, #24
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0xbc>
 80068d8:	681d      	ldr	r5, [r3, #0]
 80068da:	e003      	b.n	80068e4 <_printf_i+0xc4>
 80068dc:	0645      	lsls	r5, r0, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0xb8>
 80068e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	da03      	bge.n	80068f0 <_printf_i+0xd0>
 80068e8:	232d      	movs	r3, #45	@ 0x2d
 80068ea:	426d      	negs	r5, r5
 80068ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f0:	4859      	ldr	r0, [pc, #356]	@ (8006a58 <_printf_i+0x238>)
 80068f2:	230a      	movs	r3, #10
 80068f4:	e011      	b.n	800691a <_printf_i+0xfa>
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	6833      	ldr	r3, [r6, #0]
 80068fa:	0608      	lsls	r0, r1, #24
 80068fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006900:	d402      	bmi.n	8006908 <_printf_i+0xe8>
 8006902:	0649      	lsls	r1, r1, #25
 8006904:	bf48      	it	mi
 8006906:	b2ad      	uxthmi	r5, r5
 8006908:	2f6f      	cmp	r7, #111	@ 0x6f
 800690a:	4853      	ldr	r0, [pc, #332]	@ (8006a58 <_printf_i+0x238>)
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	bf14      	ite	ne
 8006910:	230a      	movne	r3, #10
 8006912:	2308      	moveq	r3, #8
 8006914:	2100      	movs	r1, #0
 8006916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800691a:	6866      	ldr	r6, [r4, #4]
 800691c:	60a6      	str	r6, [r4, #8]
 800691e:	2e00      	cmp	r6, #0
 8006920:	bfa2      	ittt	ge
 8006922:	6821      	ldrge	r1, [r4, #0]
 8006924:	f021 0104 	bicge.w	r1, r1, #4
 8006928:	6021      	strge	r1, [r4, #0]
 800692a:	b90d      	cbnz	r5, 8006930 <_printf_i+0x110>
 800692c:	2e00      	cmp	r6, #0
 800692e:	d04b      	beq.n	80069c8 <_printf_i+0x1a8>
 8006930:	4616      	mov	r6, r2
 8006932:	fbb5 f1f3 	udiv	r1, r5, r3
 8006936:	fb03 5711 	mls	r7, r3, r1, r5
 800693a:	5dc7      	ldrb	r7, [r0, r7]
 800693c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006940:	462f      	mov	r7, r5
 8006942:	42bb      	cmp	r3, r7
 8006944:	460d      	mov	r5, r1
 8006946:	d9f4      	bls.n	8006932 <_printf_i+0x112>
 8006948:	2b08      	cmp	r3, #8
 800694a:	d10b      	bne.n	8006964 <_printf_i+0x144>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	07df      	lsls	r7, r3, #31
 8006950:	d508      	bpl.n	8006964 <_printf_i+0x144>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	6861      	ldr	r1, [r4, #4]
 8006956:	4299      	cmp	r1, r3
 8006958:	bfde      	ittt	le
 800695a:	2330      	movle	r3, #48	@ 0x30
 800695c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006960:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006964:	1b92      	subs	r2, r2, r6
 8006966:	6122      	str	r2, [r4, #16]
 8006968:	f8cd a000 	str.w	sl, [sp]
 800696c:	464b      	mov	r3, r9
 800696e:	aa03      	add	r2, sp, #12
 8006970:	4621      	mov	r1, r4
 8006972:	4640      	mov	r0, r8
 8006974:	f7ff fee6 	bl	8006744 <_printf_common>
 8006978:	3001      	adds	r0, #1
 800697a:	d14a      	bne.n	8006a12 <_printf_i+0x1f2>
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	b004      	add	sp, #16
 8006982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	f043 0320 	orr.w	r3, r3, #32
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	4833      	ldr	r0, [pc, #204]	@ (8006a5c <_printf_i+0x23c>)
 8006990:	2778      	movs	r7, #120	@ 0x78
 8006992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	6831      	ldr	r1, [r6, #0]
 800699a:	061f      	lsls	r7, r3, #24
 800699c:	f851 5b04 	ldr.w	r5, [r1], #4
 80069a0:	d402      	bmi.n	80069a8 <_printf_i+0x188>
 80069a2:	065f      	lsls	r7, r3, #25
 80069a4:	bf48      	it	mi
 80069a6:	b2ad      	uxthmi	r5, r5
 80069a8:	6031      	str	r1, [r6, #0]
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	bf44      	itt	mi
 80069ae:	f043 0320 	orrmi.w	r3, r3, #32
 80069b2:	6023      	strmi	r3, [r4, #0]
 80069b4:	b11d      	cbz	r5, 80069be <_printf_i+0x19e>
 80069b6:	2310      	movs	r3, #16
 80069b8:	e7ac      	b.n	8006914 <_printf_i+0xf4>
 80069ba:	4827      	ldr	r0, [pc, #156]	@ (8006a58 <_printf_i+0x238>)
 80069bc:	e7e9      	b.n	8006992 <_printf_i+0x172>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	f023 0320 	bic.w	r3, r3, #32
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	e7f6      	b.n	80069b6 <_printf_i+0x196>
 80069c8:	4616      	mov	r6, r2
 80069ca:	e7bd      	b.n	8006948 <_printf_i+0x128>
 80069cc:	6833      	ldr	r3, [r6, #0]
 80069ce:	6825      	ldr	r5, [r4, #0]
 80069d0:	6961      	ldr	r1, [r4, #20]
 80069d2:	1d18      	adds	r0, r3, #4
 80069d4:	6030      	str	r0, [r6, #0]
 80069d6:	062e      	lsls	r6, r5, #24
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	d501      	bpl.n	80069e0 <_printf_i+0x1c0>
 80069dc:	6019      	str	r1, [r3, #0]
 80069de:	e002      	b.n	80069e6 <_printf_i+0x1c6>
 80069e0:	0668      	lsls	r0, r5, #25
 80069e2:	d5fb      	bpl.n	80069dc <_printf_i+0x1bc>
 80069e4:	8019      	strh	r1, [r3, #0]
 80069e6:	2300      	movs	r3, #0
 80069e8:	6123      	str	r3, [r4, #16]
 80069ea:	4616      	mov	r6, r2
 80069ec:	e7bc      	b.n	8006968 <_printf_i+0x148>
 80069ee:	6833      	ldr	r3, [r6, #0]
 80069f0:	1d1a      	adds	r2, r3, #4
 80069f2:	6032      	str	r2, [r6, #0]
 80069f4:	681e      	ldr	r6, [r3, #0]
 80069f6:	6862      	ldr	r2, [r4, #4]
 80069f8:	2100      	movs	r1, #0
 80069fa:	4630      	mov	r0, r6
 80069fc:	f7f9 fc78 	bl	80002f0 <memchr>
 8006a00:	b108      	cbz	r0, 8006a06 <_printf_i+0x1e6>
 8006a02:	1b80      	subs	r0, r0, r6
 8006a04:	6060      	str	r0, [r4, #4]
 8006a06:	6863      	ldr	r3, [r4, #4]
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a10:	e7aa      	b.n	8006968 <_printf_i+0x148>
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	4632      	mov	r2, r6
 8006a16:	4649      	mov	r1, r9
 8006a18:	4640      	mov	r0, r8
 8006a1a:	47d0      	blx	sl
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d0ad      	beq.n	800697c <_printf_i+0x15c>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	079b      	lsls	r3, r3, #30
 8006a24:	d413      	bmi.n	8006a4e <_printf_i+0x22e>
 8006a26:	68e0      	ldr	r0, [r4, #12]
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	4298      	cmp	r0, r3
 8006a2c:	bfb8      	it	lt
 8006a2e:	4618      	movlt	r0, r3
 8006a30:	e7a6      	b.n	8006980 <_printf_i+0x160>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4632      	mov	r2, r6
 8006a36:	4649      	mov	r1, r9
 8006a38:	4640      	mov	r0, r8
 8006a3a:	47d0      	blx	sl
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d09d      	beq.n	800697c <_printf_i+0x15c>
 8006a40:	3501      	adds	r5, #1
 8006a42:	68e3      	ldr	r3, [r4, #12]
 8006a44:	9903      	ldr	r1, [sp, #12]
 8006a46:	1a5b      	subs	r3, r3, r1
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	dcf2      	bgt.n	8006a32 <_printf_i+0x212>
 8006a4c:	e7eb      	b.n	8006a26 <_printf_i+0x206>
 8006a4e:	2500      	movs	r5, #0
 8006a50:	f104 0619 	add.w	r6, r4, #25
 8006a54:	e7f5      	b.n	8006a42 <_printf_i+0x222>
 8006a56:	bf00      	nop
 8006a58:	08006be9 	.word	0x08006be9
 8006a5c:	08006bfa 	.word	0x08006bfa

08006a60 <memmove>:
 8006a60:	4288      	cmp	r0, r1
 8006a62:	b510      	push	{r4, lr}
 8006a64:	eb01 0402 	add.w	r4, r1, r2
 8006a68:	d902      	bls.n	8006a70 <memmove+0x10>
 8006a6a:	4284      	cmp	r4, r0
 8006a6c:	4623      	mov	r3, r4
 8006a6e:	d807      	bhi.n	8006a80 <memmove+0x20>
 8006a70:	1e43      	subs	r3, r0, #1
 8006a72:	42a1      	cmp	r1, r4
 8006a74:	d008      	beq.n	8006a88 <memmove+0x28>
 8006a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a7e:	e7f8      	b.n	8006a72 <memmove+0x12>
 8006a80:	4402      	add	r2, r0
 8006a82:	4601      	mov	r1, r0
 8006a84:	428a      	cmp	r2, r1
 8006a86:	d100      	bne.n	8006a8a <memmove+0x2a>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a92:	e7f7      	b.n	8006a84 <memmove+0x24>

08006a94 <_sbrk_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d06      	ldr	r5, [pc, #24]	@ (8006ab0 <_sbrk_r+0x1c>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f7fa f91c 	bl	8000cdc <_sbrk>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_sbrk_r+0x1a>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_sbrk_r+0x1a>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	2400075c 	.word	0x2400075c

08006ab4 <memcpy>:
 8006ab4:	440a      	add	r2, r1
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006abc:	d100      	bne.n	8006ac0 <memcpy+0xc>
 8006abe:	4770      	bx	lr
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aca:	4291      	cmp	r1, r2
 8006acc:	d1f9      	bne.n	8006ac2 <memcpy+0xe>
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <_realloc_r>:
 8006ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4615      	mov	r5, r2
 8006ad8:	460c      	mov	r4, r1
 8006ada:	b921      	cbnz	r1, 8006ae6 <_realloc_r+0x16>
 8006adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	f7ff bc4b 	b.w	800637c <_malloc_r>
 8006ae6:	b92a      	cbnz	r2, 8006af4 <_realloc_r+0x24>
 8006ae8:	f7ff fbdc 	bl	80062a4 <_free_r>
 8006aec:	2400      	movs	r4, #0
 8006aee:	4620      	mov	r0, r4
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	f000 f81a 	bl	8006b2c <_malloc_usable_size_r>
 8006af8:	4285      	cmp	r5, r0
 8006afa:	4606      	mov	r6, r0
 8006afc:	d802      	bhi.n	8006b04 <_realloc_r+0x34>
 8006afe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b02:	d8f4      	bhi.n	8006aee <_realloc_r+0x1e>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4640      	mov	r0, r8
 8006b08:	f7ff fc38 	bl	800637c <_malloc_r>
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d0ec      	beq.n	8006aec <_realloc_r+0x1c>
 8006b12:	42b5      	cmp	r5, r6
 8006b14:	462a      	mov	r2, r5
 8006b16:	4621      	mov	r1, r4
 8006b18:	bf28      	it	cs
 8006b1a:	4632      	movcs	r2, r6
 8006b1c:	f7ff ffca 	bl	8006ab4 <memcpy>
 8006b20:	4621      	mov	r1, r4
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7ff fbbe 	bl	80062a4 <_free_r>
 8006b28:	463c      	mov	r4, r7
 8006b2a:	e7e0      	b.n	8006aee <_realloc_r+0x1e>

08006b2c <_malloc_usable_size_r>:
 8006b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b30:	1f18      	subs	r0, r3, #4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfbc      	itt	lt
 8006b36:	580b      	ldrlt	r3, [r1, r0]
 8006b38:	18c0      	addlt	r0, r0, r3
 8006b3a:	4770      	bx	lr

08006b3c <_init>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr

08006b48 <_fini>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr
